// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: spec.proto

package goautowp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Autowp_AclEnforce_FullMethodName           = "/goautowp.Autowp/AclEnforce"
	Autowp_CreateFeedback_FullMethodName       = "/goautowp.Autowp/CreateFeedback"
	Autowp_GetBrandIcons_FullMethodName        = "/goautowp.Autowp/GetBrandIcons"
	Autowp_GetBrandVehicleTypes_FullMethodName = "/goautowp.Autowp/GetBrandVehicleTypes"
	Autowp_GetIP_FullMethodName                = "/goautowp.Autowp/GetIP"
	Autowp_GetPerspectives_FullMethodName      = "/goautowp.Autowp/GetPerspectives"
	Autowp_GetPerspectivePages_FullMethodName  = "/goautowp.Autowp/GetPerspectivePages"
	Autowp_GetReCaptchaConfig_FullMethodName   = "/goautowp.Autowp/GetReCaptchaConfig"
	Autowp_GetSpecs_FullMethodName             = "/goautowp.Autowp/GetSpecs"
	Autowp_GetVehicleTypes_FullMethodName      = "/goautowp.Autowp/GetVehicleTypes"
)

// AutowpClient is the client API for Autowp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutowpClient interface {
	AclEnforce(ctx context.Context, in *AclEnforceRequest, opts ...grpc.CallOption) (*AclEnforceResult, error)
	CreateFeedback(ctx context.Context, in *APICreateFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBrandIcons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BrandIcons, error)
	GetBrandVehicleTypes(ctx context.Context, in *GetBrandVehicleTypesRequest, opts ...grpc.CallOption) (*BrandVehicleTypeItems, error)
	GetIP(ctx context.Context, in *APIGetIPRequest, opts ...grpc.CallOption) (*APIIP, error)
	GetPerspectives(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PerspectivesItems, error)
	GetPerspectivePages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PerspectivePagesItems, error)
	GetReCaptchaConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReCaptchaConfig, error)
	GetSpecs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SpecsItems, error)
	GetVehicleTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VehicleTypeItems, error)
}

type autowpClient struct {
	cc grpc.ClientConnInterface
}

func NewAutowpClient(cc grpc.ClientConnInterface) AutowpClient {
	return &autowpClient{cc}
}

func (c *autowpClient) AclEnforce(ctx context.Context, in *AclEnforceRequest, opts ...grpc.CallOption) (*AclEnforceResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AclEnforceResult)
	err := c.cc.Invoke(ctx, Autowp_AclEnforce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) CreateFeedback(ctx context.Context, in *APICreateFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Autowp_CreateFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetBrandIcons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BrandIcons, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandIcons)
	err := c.cc.Invoke(ctx, Autowp_GetBrandIcons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetBrandVehicleTypes(ctx context.Context, in *GetBrandVehicleTypesRequest, opts ...grpc.CallOption) (*BrandVehicleTypeItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandVehicleTypeItems)
	err := c.cc.Invoke(ctx, Autowp_GetBrandVehicleTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetIP(ctx context.Context, in *APIGetIPRequest, opts ...grpc.CallOption) (*APIIP, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIIP)
	err := c.cc.Invoke(ctx, Autowp_GetIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetPerspectives(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PerspectivesItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerspectivesItems)
	err := c.cc.Invoke(ctx, Autowp_GetPerspectives_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetPerspectivePages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PerspectivePagesItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerspectivePagesItems)
	err := c.cc.Invoke(ctx, Autowp_GetPerspectivePages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetReCaptchaConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReCaptchaConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReCaptchaConfig)
	err := c.cc.Invoke(ctx, Autowp_GetReCaptchaConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetSpecs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SpecsItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpecsItems)
	err := c.cc.Invoke(ctx, Autowp_GetSpecs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetVehicleTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VehicleTypeItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VehicleTypeItems)
	err := c.cc.Invoke(ctx, Autowp_GetVehicleTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutowpServer is the server API for Autowp service.
// All implementations must embed UnimplementedAutowpServer
// for forward compatibility
type AutowpServer interface {
	AclEnforce(context.Context, *AclEnforceRequest) (*AclEnforceResult, error)
	CreateFeedback(context.Context, *APICreateFeedbackRequest) (*emptypb.Empty, error)
	GetBrandIcons(context.Context, *emptypb.Empty) (*BrandIcons, error)
	GetBrandVehicleTypes(context.Context, *GetBrandVehicleTypesRequest) (*BrandVehicleTypeItems, error)
	GetIP(context.Context, *APIGetIPRequest) (*APIIP, error)
	GetPerspectives(context.Context, *emptypb.Empty) (*PerspectivesItems, error)
	GetPerspectivePages(context.Context, *emptypb.Empty) (*PerspectivePagesItems, error)
	GetReCaptchaConfig(context.Context, *emptypb.Empty) (*ReCaptchaConfig, error)
	GetSpecs(context.Context, *emptypb.Empty) (*SpecsItems, error)
	GetVehicleTypes(context.Context, *emptypb.Empty) (*VehicleTypeItems, error)
	mustEmbedUnimplementedAutowpServer()
}

// UnimplementedAutowpServer must be embedded to have forward compatible implementations.
type UnimplementedAutowpServer struct {
}

func (UnimplementedAutowpServer) AclEnforce(context.Context, *AclEnforceRequest) (*AclEnforceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AclEnforce not implemented")
}
func (UnimplementedAutowpServer) CreateFeedback(context.Context, *APICreateFeedbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedback not implemented")
}
func (UnimplementedAutowpServer) GetBrandIcons(context.Context, *emptypb.Empty) (*BrandIcons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandIcons not implemented")
}
func (UnimplementedAutowpServer) GetBrandVehicleTypes(context.Context, *GetBrandVehicleTypesRequest) (*BrandVehicleTypeItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandVehicleTypes not implemented")
}
func (UnimplementedAutowpServer) GetIP(context.Context, *APIGetIPRequest) (*APIIP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIP not implemented")
}
func (UnimplementedAutowpServer) GetPerspectives(context.Context, *emptypb.Empty) (*PerspectivesItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerspectives not implemented")
}
func (UnimplementedAutowpServer) GetPerspectivePages(context.Context, *emptypb.Empty) (*PerspectivePagesItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerspectivePages not implemented")
}
func (UnimplementedAutowpServer) GetReCaptchaConfig(context.Context, *emptypb.Empty) (*ReCaptchaConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReCaptchaConfig not implemented")
}
func (UnimplementedAutowpServer) GetSpecs(context.Context, *emptypb.Empty) (*SpecsItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecs not implemented")
}
func (UnimplementedAutowpServer) GetVehicleTypes(context.Context, *emptypb.Empty) (*VehicleTypeItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicleTypes not implemented")
}
func (UnimplementedAutowpServer) mustEmbedUnimplementedAutowpServer() {}

// UnsafeAutowpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutowpServer will
// result in compilation errors.
type UnsafeAutowpServer interface {
	mustEmbedUnimplementedAutowpServer()
}

func RegisterAutowpServer(s grpc.ServiceRegistrar, srv AutowpServer) {
	s.RegisterService(&Autowp_ServiceDesc, srv)
}

func _Autowp_AclEnforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclEnforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).AclEnforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autowp_AclEnforce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).AclEnforce(ctx, req.(*AclEnforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_CreateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APICreateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).CreateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autowp_CreateFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).CreateFeedback(ctx, req.(*APICreateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetBrandIcons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetBrandIcons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autowp_GetBrandIcons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetBrandIcons(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetBrandVehicleTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandVehicleTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetBrandVehicleTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autowp_GetBrandVehicleTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetBrandVehicleTypes(ctx, req.(*GetBrandVehicleTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autowp_GetIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetIP(ctx, req.(*APIGetIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetPerspectives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetPerspectives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autowp_GetPerspectives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetPerspectives(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetPerspectivePages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetPerspectivePages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autowp_GetPerspectivePages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetPerspectivePages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetReCaptchaConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetReCaptchaConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autowp_GetReCaptchaConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetReCaptchaConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autowp_GetSpecs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetSpecs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetVehicleTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetVehicleTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autowp_GetVehicleTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetVehicleTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Autowp_ServiceDesc is the grpc.ServiceDesc for Autowp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Autowp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Autowp",
	HandlerType: (*AutowpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AclEnforce",
			Handler:    _Autowp_AclEnforce_Handler,
		},
		{
			MethodName: "CreateFeedback",
			Handler:    _Autowp_CreateFeedback_Handler,
		},
		{
			MethodName: "GetBrandIcons",
			Handler:    _Autowp_GetBrandIcons_Handler,
		},
		{
			MethodName: "GetBrandVehicleTypes",
			Handler:    _Autowp_GetBrandVehicleTypes_Handler,
		},
		{
			MethodName: "GetIP",
			Handler:    _Autowp_GetIP_Handler,
		},
		{
			MethodName: "GetPerspectives",
			Handler:    _Autowp_GetPerspectives_Handler,
		},
		{
			MethodName: "GetPerspectivePages",
			Handler:    _Autowp_GetPerspectivePages_Handler,
		},
		{
			MethodName: "GetReCaptchaConfig",
			Handler:    _Autowp_GetReCaptchaConfig_Handler,
		},
		{
			MethodName: "GetSpecs",
			Handler:    _Autowp_GetSpecs_Handler,
		},
		{
			MethodName: "GetVehicleTypes",
			Handler:    _Autowp_GetVehicleTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Forums_GetUserSummary_FullMethodName = "/goautowp.Forums/GetUserSummary"
	Forums_CreateTopic_FullMethodName    = "/goautowp.Forums/CreateTopic"
	Forums_CloseTopic_FullMethodName     = "/goautowp.Forums/CloseTopic"
	Forums_OpenTopic_FullMethodName      = "/goautowp.Forums/OpenTopic"
	Forums_DeleteTopic_FullMethodName    = "/goautowp.Forums/DeleteTopic"
	Forums_MoveTopic_FullMethodName      = "/goautowp.Forums/MoveTopic"
	Forums_GetTheme_FullMethodName       = "/goautowp.Forums/GetTheme"
	Forums_GetThemes_FullMethodName      = "/goautowp.Forums/GetThemes"
	Forums_GetTopic_FullMethodName       = "/goautowp.Forums/GetTopic"
	Forums_GetLastTopic_FullMethodName   = "/goautowp.Forums/GetLastTopic"
	Forums_GetLastMessage_FullMethodName = "/goautowp.Forums/GetLastMessage"
	Forums_GetTopics_FullMethodName      = "/goautowp.Forums/GetTopics"
)

// ForumsClient is the client API for Forums service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForumsClient interface {
	GetUserSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIForumsUserSummary, error)
	CreateTopic(ctx context.Context, in *APICreateTopicRequest, opts ...grpc.CallOption) (*APICreateTopicResponse, error)
	CloseTopic(ctx context.Context, in *APISetTopicStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OpenTopic(ctx context.Context, in *APISetTopicStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTopic(ctx context.Context, in *APISetTopicStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveTopic(ctx context.Context, in *APIMoveTopicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTheme(ctx context.Context, in *APIGetForumsThemeRequest, opts ...grpc.CallOption) (*APIForumsTheme, error)
	GetThemes(ctx context.Context, in *APIGetForumsThemesRequest, opts ...grpc.CallOption) (*APIForumsThemes, error)
	GetTopic(ctx context.Context, in *APIGetForumsTopicRequest, opts ...grpc.CallOption) (*APIForumsTopic, error)
	GetLastTopic(ctx context.Context, in *APIGetForumsThemeRequest, opts ...grpc.CallOption) (*APIForumsTopic, error)
	GetLastMessage(ctx context.Context, in *APIGetForumsTopicRequest, opts ...grpc.CallOption) (*APICommentMessage, error)
	GetTopics(ctx context.Context, in *APIGetForumsTopicsRequest, opts ...grpc.CallOption) (*APIForumsTopics, error)
}

type forumsClient struct {
	cc grpc.ClientConnInterface
}

func NewForumsClient(cc grpc.ClientConnInterface) ForumsClient {
	return &forumsClient{cc}
}

func (c *forumsClient) GetUserSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIForumsUserSummary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIForumsUserSummary)
	err := c.cc.Invoke(ctx, Forums_GetUserSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumsClient) CreateTopic(ctx context.Context, in *APICreateTopicRequest, opts ...grpc.CallOption) (*APICreateTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APICreateTopicResponse)
	err := c.cc.Invoke(ctx, Forums_CreateTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumsClient) CloseTopic(ctx context.Context, in *APISetTopicStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Forums_CloseTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumsClient) OpenTopic(ctx context.Context, in *APISetTopicStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Forums_OpenTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumsClient) DeleteTopic(ctx context.Context, in *APISetTopicStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Forums_DeleteTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumsClient) MoveTopic(ctx context.Context, in *APIMoveTopicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Forums_MoveTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumsClient) GetTheme(ctx context.Context, in *APIGetForumsThemeRequest, opts ...grpc.CallOption) (*APIForumsTheme, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIForumsTheme)
	err := c.cc.Invoke(ctx, Forums_GetTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumsClient) GetThemes(ctx context.Context, in *APIGetForumsThemesRequest, opts ...grpc.CallOption) (*APIForumsThemes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIForumsThemes)
	err := c.cc.Invoke(ctx, Forums_GetThemes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumsClient) GetTopic(ctx context.Context, in *APIGetForumsTopicRequest, opts ...grpc.CallOption) (*APIForumsTopic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIForumsTopic)
	err := c.cc.Invoke(ctx, Forums_GetTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumsClient) GetLastTopic(ctx context.Context, in *APIGetForumsThemeRequest, opts ...grpc.CallOption) (*APIForumsTopic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIForumsTopic)
	err := c.cc.Invoke(ctx, Forums_GetLastTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumsClient) GetLastMessage(ctx context.Context, in *APIGetForumsTopicRequest, opts ...grpc.CallOption) (*APICommentMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APICommentMessage)
	err := c.cc.Invoke(ctx, Forums_GetLastMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumsClient) GetTopics(ctx context.Context, in *APIGetForumsTopicsRequest, opts ...grpc.CallOption) (*APIForumsTopics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIForumsTopics)
	err := c.cc.Invoke(ctx, Forums_GetTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForumsServer is the server API for Forums service.
// All implementations must embed UnimplementedForumsServer
// for forward compatibility
type ForumsServer interface {
	GetUserSummary(context.Context, *emptypb.Empty) (*APIForumsUserSummary, error)
	CreateTopic(context.Context, *APICreateTopicRequest) (*APICreateTopicResponse, error)
	CloseTopic(context.Context, *APISetTopicStatusRequest) (*emptypb.Empty, error)
	OpenTopic(context.Context, *APISetTopicStatusRequest) (*emptypb.Empty, error)
	DeleteTopic(context.Context, *APISetTopicStatusRequest) (*emptypb.Empty, error)
	MoveTopic(context.Context, *APIMoveTopicRequest) (*emptypb.Empty, error)
	GetTheme(context.Context, *APIGetForumsThemeRequest) (*APIForumsTheme, error)
	GetThemes(context.Context, *APIGetForumsThemesRequest) (*APIForumsThemes, error)
	GetTopic(context.Context, *APIGetForumsTopicRequest) (*APIForumsTopic, error)
	GetLastTopic(context.Context, *APIGetForumsThemeRequest) (*APIForumsTopic, error)
	GetLastMessage(context.Context, *APIGetForumsTopicRequest) (*APICommentMessage, error)
	GetTopics(context.Context, *APIGetForumsTopicsRequest) (*APIForumsTopics, error)
	mustEmbedUnimplementedForumsServer()
}

// UnimplementedForumsServer must be embedded to have forward compatible implementations.
type UnimplementedForumsServer struct {
}

func (UnimplementedForumsServer) GetUserSummary(context.Context, *emptypb.Empty) (*APIForumsUserSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSummary not implemented")
}
func (UnimplementedForumsServer) CreateTopic(context.Context, *APICreateTopicRequest) (*APICreateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedForumsServer) CloseTopic(context.Context, *APISetTopicStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTopic not implemented")
}
func (UnimplementedForumsServer) OpenTopic(context.Context, *APISetTopicStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenTopic not implemented")
}
func (UnimplementedForumsServer) DeleteTopic(context.Context, *APISetTopicStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (UnimplementedForumsServer) MoveTopic(context.Context, *APIMoveTopicRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveTopic not implemented")
}
func (UnimplementedForumsServer) GetTheme(context.Context, *APIGetForumsThemeRequest) (*APIForumsTheme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheme not implemented")
}
func (UnimplementedForumsServer) GetThemes(context.Context, *APIGetForumsThemesRequest) (*APIForumsThemes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThemes not implemented")
}
func (UnimplementedForumsServer) GetTopic(context.Context, *APIGetForumsTopicRequest) (*APIForumsTopic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopic not implemented")
}
func (UnimplementedForumsServer) GetLastTopic(context.Context, *APIGetForumsThemeRequest) (*APIForumsTopic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastTopic not implemented")
}
func (UnimplementedForumsServer) GetLastMessage(context.Context, *APIGetForumsTopicRequest) (*APICommentMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMessage not implemented")
}
func (UnimplementedForumsServer) GetTopics(context.Context, *APIGetForumsTopicsRequest) (*APIForumsTopics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopics not implemented")
}
func (UnimplementedForumsServer) mustEmbedUnimplementedForumsServer() {}

// UnsafeForumsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForumsServer will
// result in compilation errors.
type UnsafeForumsServer interface {
	mustEmbedUnimplementedForumsServer()
}

func RegisterForumsServer(s grpc.ServiceRegistrar, srv ForumsServer) {
	s.RegisterService(&Forums_ServiceDesc, srv)
}

func _Forums_GetUserSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumsServer).GetUserSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forums_GetUserSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumsServer).GetUserSummary(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forums_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APICreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumsServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forums_CreateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumsServer).CreateTopic(ctx, req.(*APICreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forums_CloseTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APISetTopicStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumsServer).CloseTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forums_CloseTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumsServer).CloseTopic(ctx, req.(*APISetTopicStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forums_OpenTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APISetTopicStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumsServer).OpenTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forums_OpenTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumsServer).OpenTopic(ctx, req.(*APISetTopicStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forums_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APISetTopicStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumsServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forums_DeleteTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumsServer).DeleteTopic(ctx, req.(*APISetTopicStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forums_MoveTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIMoveTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumsServer).MoveTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forums_MoveTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumsServer).MoveTopic(ctx, req.(*APIMoveTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forums_GetTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetForumsThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumsServer).GetTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forums_GetTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumsServer).GetTheme(ctx, req.(*APIGetForumsThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forums_GetThemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetForumsThemesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumsServer).GetThemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forums_GetThemes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumsServer).GetThemes(ctx, req.(*APIGetForumsThemesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forums_GetTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetForumsTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumsServer).GetTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forums_GetTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumsServer).GetTopic(ctx, req.(*APIGetForumsTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forums_GetLastTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetForumsThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumsServer).GetLastTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forums_GetLastTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumsServer).GetLastTopic(ctx, req.(*APIGetForumsThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forums_GetLastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetForumsTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumsServer).GetLastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forums_GetLastMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumsServer).GetLastMessage(ctx, req.(*APIGetForumsTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forums_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetForumsTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumsServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forums_GetTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumsServer).GetTopics(ctx, req.(*APIGetForumsTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Forums_ServiceDesc is the grpc.ServiceDesc for Forums service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forums_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Forums",
	HandlerType: (*ForumsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserSummary",
			Handler:    _Forums_GetUserSummary_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _Forums_CreateTopic_Handler,
		},
		{
			MethodName: "CloseTopic",
			Handler:    _Forums_CloseTopic_Handler,
		},
		{
			MethodName: "OpenTopic",
			Handler:    _Forums_OpenTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _Forums_DeleteTopic_Handler,
		},
		{
			MethodName: "MoveTopic",
			Handler:    _Forums_MoveTopic_Handler,
		},
		{
			MethodName: "GetTheme",
			Handler:    _Forums_GetTheme_Handler,
		},
		{
			MethodName: "GetThemes",
			Handler:    _Forums_GetThemes_Handler,
		},
		{
			MethodName: "GetTopic",
			Handler:    _Forums_GetTopic_Handler,
		},
		{
			MethodName: "GetLastTopic",
			Handler:    _Forums_GetLastTopic_Handler,
		},
		{
			MethodName: "GetLastMessage",
			Handler:    _Forums_GetLastMessage_Handler,
		},
		{
			MethodName: "GetTopics",
			Handler:    _Forums_GetTopics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Articles_GetList_FullMethodName          = "/goautowp.Articles/GetList"
	Articles_GetItemByCatname_FullMethodName = "/goautowp.Articles/GetItemByCatname"
)

// ArticlesClient is the client API for Articles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticlesClient interface {
	GetList(ctx context.Context, in *ArticlesRequest, opts ...grpc.CallOption) (*ArticlesResponse, error)
	GetItemByCatname(ctx context.Context, in *ArticleByCatnameRequest, opts ...grpc.CallOption) (*Article, error)
}

type articlesClient struct {
	cc grpc.ClientConnInterface
}

func NewArticlesClient(cc grpc.ClientConnInterface) ArticlesClient {
	return &articlesClient{cc}
}

func (c *articlesClient) GetList(ctx context.Context, in *ArticlesRequest, opts ...grpc.CallOption) (*ArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticlesResponse)
	err := c.cc.Invoke(ctx, Articles_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesClient) GetItemByCatname(ctx context.Context, in *ArticleByCatnameRequest, opts ...grpc.CallOption) (*Article, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Article)
	err := c.cc.Invoke(ctx, Articles_GetItemByCatname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticlesServer is the server API for Articles service.
// All implementations must embed UnimplementedArticlesServer
// for forward compatibility
type ArticlesServer interface {
	GetList(context.Context, *ArticlesRequest) (*ArticlesResponse, error)
	GetItemByCatname(context.Context, *ArticleByCatnameRequest) (*Article, error)
	mustEmbedUnimplementedArticlesServer()
}

// UnimplementedArticlesServer must be embedded to have forward compatible implementations.
type UnimplementedArticlesServer struct {
}

func (UnimplementedArticlesServer) GetList(context.Context, *ArticlesRequest) (*ArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedArticlesServer) GetItemByCatname(context.Context, *ArticleByCatnameRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemByCatname not implemented")
}
func (UnimplementedArticlesServer) mustEmbedUnimplementedArticlesServer() {}

// UnsafeArticlesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticlesServer will
// result in compilation errors.
type UnsafeArticlesServer interface {
	mustEmbedUnimplementedArticlesServer()
}

func RegisterArticlesServer(s grpc.ServiceRegistrar, srv ArticlesServer) {
	s.RegisterService(&Articles_ServiceDesc, srv)
}

func _Articles_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Articles_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).GetList(ctx, req.(*ArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Articles_GetItemByCatname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleByCatnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).GetItemByCatname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Articles_GetItemByCatname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).GetItemByCatname(ctx, req.(*ArticleByCatnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Articles_ServiceDesc is the grpc.ServiceDesc for Articles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Articles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Articles",
	HandlerType: (*ArticlesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _Articles_GetList_Handler,
		},
		{
			MethodName: "GetItemByCatname",
			Handler:    _Articles_GetItemByCatname_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Traffic_AddToBlacklist_FullMethodName      = "/goautowp.Traffic/AddToBlacklist"
	Traffic_AddToWhitelist_FullMethodName      = "/goautowp.Traffic/AddToWhitelist"
	Traffic_DeleteFromBlacklist_FullMethodName = "/goautowp.Traffic/DeleteFromBlacklist"
	Traffic_DeleteFromWhitelist_FullMethodName = "/goautowp.Traffic/DeleteFromWhitelist"
	Traffic_GetTop_FullMethodName              = "/goautowp.Traffic/GetTop"
	Traffic_GetWhitelist_FullMethodName        = "/goautowp.Traffic/GetWhitelist"
)

// TrafficClient is the client API for Traffic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrafficClient interface {
	AddToBlacklist(ctx context.Context, in *AddToTrafficBlacklistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddToWhitelist(ctx context.Context, in *AddToTrafficWhitelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFromBlacklist(ctx context.Context, in *DeleteFromTrafficBlacklistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFromWhitelist(ctx context.Context, in *DeleteFromTrafficWhitelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APITrafficTopResponse, error)
	GetWhitelist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APITrafficWhitelistItems, error)
}

type trafficClient struct {
	cc grpc.ClientConnInterface
}

func NewTrafficClient(cc grpc.ClientConnInterface) TrafficClient {
	return &trafficClient{cc}
}

func (c *trafficClient) AddToBlacklist(ctx context.Context, in *AddToTrafficBlacklistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Traffic_AddToBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficClient) AddToWhitelist(ctx context.Context, in *AddToTrafficWhitelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Traffic_AddToWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficClient) DeleteFromBlacklist(ctx context.Context, in *DeleteFromTrafficBlacklistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Traffic_DeleteFromBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficClient) DeleteFromWhitelist(ctx context.Context, in *DeleteFromTrafficWhitelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Traffic_DeleteFromWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficClient) GetTop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APITrafficTopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APITrafficTopResponse)
	err := c.cc.Invoke(ctx, Traffic_GetTop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficClient) GetWhitelist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APITrafficWhitelistItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APITrafficWhitelistItems)
	err := c.cc.Invoke(ctx, Traffic_GetWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrafficServer is the server API for Traffic service.
// All implementations must embed UnimplementedTrafficServer
// for forward compatibility
type TrafficServer interface {
	AddToBlacklist(context.Context, *AddToTrafficBlacklistRequest) (*emptypb.Empty, error)
	AddToWhitelist(context.Context, *AddToTrafficWhitelistRequest) (*emptypb.Empty, error)
	DeleteFromBlacklist(context.Context, *DeleteFromTrafficBlacklistRequest) (*emptypb.Empty, error)
	DeleteFromWhitelist(context.Context, *DeleteFromTrafficWhitelistRequest) (*emptypb.Empty, error)
	GetTop(context.Context, *emptypb.Empty) (*APITrafficTopResponse, error)
	GetWhitelist(context.Context, *emptypb.Empty) (*APITrafficWhitelistItems, error)
	mustEmbedUnimplementedTrafficServer()
}

// UnimplementedTrafficServer must be embedded to have forward compatible implementations.
type UnimplementedTrafficServer struct {
}

func (UnimplementedTrafficServer) AddToBlacklist(context.Context, *AddToTrafficBlacklistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlacklist not implemented")
}
func (UnimplementedTrafficServer) AddToWhitelist(context.Context, *AddToTrafficWhitelistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhitelist not implemented")
}
func (UnimplementedTrafficServer) DeleteFromBlacklist(context.Context, *DeleteFromTrafficBlacklistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromBlacklist not implemented")
}
func (UnimplementedTrafficServer) DeleteFromWhitelist(context.Context, *DeleteFromTrafficWhitelistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromWhitelist not implemented")
}
func (UnimplementedTrafficServer) GetTop(context.Context, *emptypb.Empty) (*APITrafficTopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTop not implemented")
}
func (UnimplementedTrafficServer) GetWhitelist(context.Context, *emptypb.Empty) (*APITrafficWhitelistItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhitelist not implemented")
}
func (UnimplementedTrafficServer) mustEmbedUnimplementedTrafficServer() {}

// UnsafeTrafficServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrafficServer will
// result in compilation errors.
type UnsafeTrafficServer interface {
	mustEmbedUnimplementedTrafficServer()
}

func RegisterTrafficServer(s grpc.ServiceRegistrar, srv TrafficServer) {
	s.RegisterService(&Traffic_ServiceDesc, srv)
}

func _Traffic_AddToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToTrafficBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServer).AddToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traffic_AddToBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServer).AddToBlacklist(ctx, req.(*AddToTrafficBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traffic_AddToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToTrafficWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServer).AddToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traffic_AddToWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServer).AddToWhitelist(ctx, req.(*AddToTrafficWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traffic_DeleteFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromTrafficBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServer).DeleteFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traffic_DeleteFromBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServer).DeleteFromBlacklist(ctx, req.(*DeleteFromTrafficBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traffic_DeleteFromWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromTrafficWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServer).DeleteFromWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traffic_DeleteFromWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServer).DeleteFromWhitelist(ctx, req.(*DeleteFromTrafficWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traffic_GetTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServer).GetTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traffic_GetTop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServer).GetTop(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Traffic_GetWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServer).GetWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Traffic_GetWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServer).GetWhitelist(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Traffic_ServiceDesc is the grpc.ServiceDesc for Traffic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Traffic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Traffic",
	HandlerType: (*TrafficServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToBlacklist",
			Handler:    _Traffic_AddToBlacklist_Handler,
		},
		{
			MethodName: "AddToWhitelist",
			Handler:    _Traffic_AddToWhitelist_Handler,
		},
		{
			MethodName: "DeleteFromBlacklist",
			Handler:    _Traffic_DeleteFromBlacklist_Handler,
		},
		{
			MethodName: "DeleteFromWhitelist",
			Handler:    _Traffic_DeleteFromWhitelist_Handler,
		},
		{
			MethodName: "GetTop",
			Handler:    _Traffic_GetTop_Handler,
		},
		{
			MethodName: "GetWhitelist",
			Handler:    _Traffic_GetWhitelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Contacts_CreateContact_FullMethodName = "/goautowp.Contacts/CreateContact"
	Contacts_DeleteContact_FullMethodName = "/goautowp.Contacts/DeleteContact"
	Contacts_GetContact_FullMethodName    = "/goautowp.Contacts/GetContact"
	Contacts_GetContacts_FullMethodName   = "/goautowp.Contacts/GetContacts"
)

// ContactsClient is the client API for Contacts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactsClient interface {
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*Contact, error)
	GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*ContactItems, error)
}

type contactsClient struct {
	cc grpc.ClientConnInterface
}

func NewContactsClient(cc grpc.ClientConnInterface) ContactsClient {
	return &contactsClient{cc}
}

func (c *contactsClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Contacts_CreateContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Contacts_DeleteContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*Contact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contact)
	err := c.cc.Invoke(ctx, Contacts_GetContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*ContactItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactItems)
	err := c.cc.Invoke(ctx, Contacts_GetContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactsServer is the server API for Contacts service.
// All implementations must embed UnimplementedContactsServer
// for forward compatibility
type ContactsServer interface {
	CreateContact(context.Context, *CreateContactRequest) (*emptypb.Empty, error)
	DeleteContact(context.Context, *DeleteContactRequest) (*emptypb.Empty, error)
	GetContact(context.Context, *GetContactRequest) (*Contact, error)
	GetContacts(context.Context, *GetContactsRequest) (*ContactItems, error)
	mustEmbedUnimplementedContactsServer()
}

// UnimplementedContactsServer must be embedded to have forward compatible implementations.
type UnimplementedContactsServer struct {
}

func (UnimplementedContactsServer) CreateContact(context.Context, *CreateContactRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedContactsServer) DeleteContact(context.Context, *DeleteContactRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedContactsServer) GetContact(context.Context, *GetContactRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedContactsServer) GetContacts(context.Context, *GetContactsRequest) (*ContactItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (UnimplementedContactsServer) mustEmbedUnimplementedContactsServer() {}

// UnsafeContactsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactsServer will
// result in compilation errors.
type UnsafeContactsServer interface {
	mustEmbedUnimplementedContactsServer()
}

func RegisterContactsServer(s grpc.ServiceRegistrar, srv ContactsServer) {
	s.RegisterService(&Contacts_ServiceDesc, srv)
}

func _Contacts_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contacts_CreateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contacts_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contacts_GetContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).GetContact(ctx, req.(*GetContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contacts_GetContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).GetContacts(ctx, req.(*GetContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Contacts_ServiceDesc is the grpc.ServiceDesc for Contacts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Contacts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Contacts",
	HandlerType: (*ContactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContact",
			Handler:    _Contacts_CreateContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _Contacts_DeleteContact_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _Contacts_GetContact_Handler,
		},
		{
			MethodName: "GetContacts",
			Handler:    _Contacts_GetContacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Users_DeleteUser_FullMethodName                       = "/goautowp.Users/DeleteUser"
	Users_GetUser_FullMethodName                          = "/goautowp.Users/GetUser"
	Users_Me_FullMethodName                               = "/goautowp.Users/Me"
	Users_GetUserPreferences_FullMethodName               = "/goautowp.Users/GetUserPreferences"
	Users_DisableUserCommentsNotifications_FullMethodName = "/goautowp.Users/DisableUserCommentsNotifications"
	Users_EnableUserCommentsNotifications_FullMethodName  = "/goautowp.Users/EnableUserCommentsNotifications"
	Users_GetUsers_FullMethodName                         = "/goautowp.Users/GetUsers"
)

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	DeleteUser(ctx context.Context, in *APIDeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUser(ctx context.Context, in *APIGetUserRequest, opts ...grpc.CallOption) (*APIUser, error)
	Me(ctx context.Context, in *APIMeRequest, opts ...grpc.CallOption) (*APIUser, error)
	GetUserPreferences(ctx context.Context, in *APIUserPreferencesRequest, opts ...grpc.CallOption) (*APIUserPreferencesResponse, error)
	DisableUserCommentsNotifications(ctx context.Context, in *APIUserPreferencesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EnableUserCommentsNotifications(ctx context.Context, in *APIUserPreferencesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUsers(ctx context.Context, in *APIUsersRequest, opts ...grpc.CallOption) (*APIUsersResponse, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) DeleteUser(ctx context.Context, in *APIDeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Users_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUser(ctx context.Context, in *APIGetUserRequest, opts ...grpc.CallOption) (*APIUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUser)
	err := c.cc.Invoke(ctx, Users_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Me(ctx context.Context, in *APIMeRequest, opts ...grpc.CallOption) (*APIUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUser)
	err := c.cc.Invoke(ctx, Users_Me_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUserPreferences(ctx context.Context, in *APIUserPreferencesRequest, opts ...grpc.CallOption) (*APIUserPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUserPreferencesResponse)
	err := c.cc.Invoke(ctx, Users_GetUserPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DisableUserCommentsNotifications(ctx context.Context, in *APIUserPreferencesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Users_DisableUserCommentsNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) EnableUserCommentsNotifications(ctx context.Context, in *APIUserPreferencesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Users_EnableUserCommentsNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsers(ctx context.Context, in *APIUsersRequest, opts ...grpc.CallOption) (*APIUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUsersResponse)
	err := c.cc.Invoke(ctx, Users_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	DeleteUser(context.Context, *APIDeleteUserRequest) (*emptypb.Empty, error)
	GetUser(context.Context, *APIGetUserRequest) (*APIUser, error)
	Me(context.Context, *APIMeRequest) (*APIUser, error)
	GetUserPreferences(context.Context, *APIUserPreferencesRequest) (*APIUserPreferencesResponse, error)
	DisableUserCommentsNotifications(context.Context, *APIUserPreferencesRequest) (*emptypb.Empty, error)
	EnableUserCommentsNotifications(context.Context, *APIUserPreferencesRequest) (*emptypb.Empty, error)
	GetUsers(context.Context, *APIUsersRequest) (*APIUsersResponse, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) DeleteUser(context.Context, *APIDeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUsersServer) GetUser(context.Context, *APIGetUserRequest) (*APIUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersServer) Me(context.Context, *APIMeRequest) (*APIUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (UnimplementedUsersServer) GetUserPreferences(context.Context, *APIUserPreferencesRequest) (*APIUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPreferences not implemented")
}
func (UnimplementedUsersServer) DisableUserCommentsNotifications(context.Context, *APIUserPreferencesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableUserCommentsNotifications not implemented")
}
func (UnimplementedUsersServer) EnableUserCommentsNotifications(context.Context, *APIUserPreferencesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUserCommentsNotifications not implemented")
}
func (UnimplementedUsersServer) GetUsers(context.Context, *APIUsersRequest) (*APIUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIDeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteUser(ctx, req.(*APIDeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUser(ctx, req.(*APIGetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_Me_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Me(ctx, req.(*APIMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUserPreferences(ctx, req.(*APIUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DisableUserCommentsNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DisableUserCommentsNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_DisableUserCommentsNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DisableUserCommentsNotifications(ctx, req.(*APIUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_EnableUserCommentsNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).EnableUserCommentsNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_EnableUserCommentsNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).EnableUserCommentsNotifications(ctx, req.(*APIUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsers(ctx, req.(*APIUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteUser",
			Handler:    _Users_DeleteUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Users_GetUser_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _Users_Me_Handler,
		},
		{
			MethodName: "GetUserPreferences",
			Handler:    _Users_GetUserPreferences_Handler,
		},
		{
			MethodName: "DisableUserCommentsNotifications",
			Handler:    _Users_DisableUserCommentsNotifications_Handler,
		},
		{
			MethodName: "EnableUserCommentsNotifications",
			Handler:    _Users_EnableUserCommentsNotifications_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Users_GetUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Rating_GetUserPicturesRating_FullMethodName         = "/goautowp.Rating/GetUserPicturesRating"
	Rating_GetUserPicturesRatingBrands_FullMethodName   = "/goautowp.Rating/GetUserPicturesRatingBrands"
	Rating_GetUserCommentsRating_FullMethodName         = "/goautowp.Rating/GetUserCommentsRating"
	Rating_GetUserCommentsRatingFans_FullMethodName     = "/goautowp.Rating/GetUserCommentsRatingFans"
	Rating_GetUserPictureLikesRating_FullMethodName     = "/goautowp.Rating/GetUserPictureLikesRating"
	Rating_GetUserPictureLikesRatingFans_FullMethodName = "/goautowp.Rating/GetUserPictureLikesRatingFans"
	Rating_GetUserSpecsRating_FullMethodName            = "/goautowp.Rating/GetUserSpecsRating"
	Rating_GetUserSpecsRatingBrands_FullMethodName      = "/goautowp.Rating/GetUserSpecsRatingBrands"
)

// RatingClient is the client API for Rating service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatingClient interface {
	GetUserPicturesRating(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIUsersRatingResponse, error)
	GetUserPicturesRatingBrands(ctx context.Context, in *UserRatingDetailsRequest, opts ...grpc.CallOption) (*UserRatingBrandsResponse, error)
	GetUserCommentsRating(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIUsersRatingResponse, error)
	GetUserCommentsRatingFans(ctx context.Context, in *UserRatingDetailsRequest, opts ...grpc.CallOption) (*GetUserRatingFansResponse, error)
	GetUserPictureLikesRating(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIUsersRatingResponse, error)
	GetUserPictureLikesRatingFans(ctx context.Context, in *UserRatingDetailsRequest, opts ...grpc.CallOption) (*GetUserRatingFansResponse, error)
	GetUserSpecsRating(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIUsersRatingResponse, error)
	GetUserSpecsRatingBrands(ctx context.Context, in *UserRatingDetailsRequest, opts ...grpc.CallOption) (*UserRatingBrandsResponse, error)
}

type ratingClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingClient(cc grpc.ClientConnInterface) RatingClient {
	return &ratingClient{cc}
}

func (c *ratingClient) GetUserPicturesRating(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIUsersRatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUsersRatingResponse)
	err := c.cc.Invoke(ctx, Rating_GetUserPicturesRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingClient) GetUserPicturesRatingBrands(ctx context.Context, in *UserRatingDetailsRequest, opts ...grpc.CallOption) (*UserRatingBrandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRatingBrandsResponse)
	err := c.cc.Invoke(ctx, Rating_GetUserPicturesRatingBrands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingClient) GetUserCommentsRating(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIUsersRatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUsersRatingResponse)
	err := c.cc.Invoke(ctx, Rating_GetUserCommentsRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingClient) GetUserCommentsRatingFans(ctx context.Context, in *UserRatingDetailsRequest, opts ...grpc.CallOption) (*GetUserRatingFansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRatingFansResponse)
	err := c.cc.Invoke(ctx, Rating_GetUserCommentsRatingFans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingClient) GetUserPictureLikesRating(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIUsersRatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUsersRatingResponse)
	err := c.cc.Invoke(ctx, Rating_GetUserPictureLikesRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingClient) GetUserPictureLikesRatingFans(ctx context.Context, in *UserRatingDetailsRequest, opts ...grpc.CallOption) (*GetUserRatingFansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRatingFansResponse)
	err := c.cc.Invoke(ctx, Rating_GetUserPictureLikesRatingFans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingClient) GetUserSpecsRating(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIUsersRatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUsersRatingResponse)
	err := c.cc.Invoke(ctx, Rating_GetUserSpecsRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingClient) GetUserSpecsRatingBrands(ctx context.Context, in *UserRatingDetailsRequest, opts ...grpc.CallOption) (*UserRatingBrandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRatingBrandsResponse)
	err := c.cc.Invoke(ctx, Rating_GetUserSpecsRatingBrands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingServer is the server API for Rating service.
// All implementations must embed UnimplementedRatingServer
// for forward compatibility
type RatingServer interface {
	GetUserPicturesRating(context.Context, *emptypb.Empty) (*APIUsersRatingResponse, error)
	GetUserPicturesRatingBrands(context.Context, *UserRatingDetailsRequest) (*UserRatingBrandsResponse, error)
	GetUserCommentsRating(context.Context, *emptypb.Empty) (*APIUsersRatingResponse, error)
	GetUserCommentsRatingFans(context.Context, *UserRatingDetailsRequest) (*GetUserRatingFansResponse, error)
	GetUserPictureLikesRating(context.Context, *emptypb.Empty) (*APIUsersRatingResponse, error)
	GetUserPictureLikesRatingFans(context.Context, *UserRatingDetailsRequest) (*GetUserRatingFansResponse, error)
	GetUserSpecsRating(context.Context, *emptypb.Empty) (*APIUsersRatingResponse, error)
	GetUserSpecsRatingBrands(context.Context, *UserRatingDetailsRequest) (*UserRatingBrandsResponse, error)
	mustEmbedUnimplementedRatingServer()
}

// UnimplementedRatingServer must be embedded to have forward compatible implementations.
type UnimplementedRatingServer struct {
}

func (UnimplementedRatingServer) GetUserPicturesRating(context.Context, *emptypb.Empty) (*APIUsersRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPicturesRating not implemented")
}
func (UnimplementedRatingServer) GetUserPicturesRatingBrands(context.Context, *UserRatingDetailsRequest) (*UserRatingBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPicturesRatingBrands not implemented")
}
func (UnimplementedRatingServer) GetUserCommentsRating(context.Context, *emptypb.Empty) (*APIUsersRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCommentsRating not implemented")
}
func (UnimplementedRatingServer) GetUserCommentsRatingFans(context.Context, *UserRatingDetailsRequest) (*GetUserRatingFansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCommentsRatingFans not implemented")
}
func (UnimplementedRatingServer) GetUserPictureLikesRating(context.Context, *emptypb.Empty) (*APIUsersRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPictureLikesRating not implemented")
}
func (UnimplementedRatingServer) GetUserPictureLikesRatingFans(context.Context, *UserRatingDetailsRequest) (*GetUserRatingFansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPictureLikesRatingFans not implemented")
}
func (UnimplementedRatingServer) GetUserSpecsRating(context.Context, *emptypb.Empty) (*APIUsersRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSpecsRating not implemented")
}
func (UnimplementedRatingServer) GetUserSpecsRatingBrands(context.Context, *UserRatingDetailsRequest) (*UserRatingBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSpecsRatingBrands not implemented")
}
func (UnimplementedRatingServer) mustEmbedUnimplementedRatingServer() {}

// UnsafeRatingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatingServer will
// result in compilation errors.
type UnsafeRatingServer interface {
	mustEmbedUnimplementedRatingServer()
}

func RegisterRatingServer(s grpc.ServiceRegistrar, srv RatingServer) {
	s.RegisterService(&Rating_ServiceDesc, srv)
}

func _Rating_GetUserPicturesRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServer).GetUserPicturesRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rating_GetUserPicturesRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServer).GetUserPicturesRating(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rating_GetUserPicturesRatingBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRatingDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServer).GetUserPicturesRatingBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rating_GetUserPicturesRatingBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServer).GetUserPicturesRatingBrands(ctx, req.(*UserRatingDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rating_GetUserCommentsRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServer).GetUserCommentsRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rating_GetUserCommentsRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServer).GetUserCommentsRating(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rating_GetUserCommentsRatingFans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRatingDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServer).GetUserCommentsRatingFans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rating_GetUserCommentsRatingFans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServer).GetUserCommentsRatingFans(ctx, req.(*UserRatingDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rating_GetUserPictureLikesRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServer).GetUserPictureLikesRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rating_GetUserPictureLikesRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServer).GetUserPictureLikesRating(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rating_GetUserPictureLikesRatingFans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRatingDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServer).GetUserPictureLikesRatingFans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rating_GetUserPictureLikesRatingFans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServer).GetUserPictureLikesRatingFans(ctx, req.(*UserRatingDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rating_GetUserSpecsRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServer).GetUserSpecsRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rating_GetUserSpecsRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServer).GetUserSpecsRating(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rating_GetUserSpecsRatingBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRatingDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServer).GetUserSpecsRatingBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rating_GetUserSpecsRatingBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServer).GetUserSpecsRatingBrands(ctx, req.(*UserRatingDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rating_ServiceDesc is the grpc.ServiceDesc for Rating service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rating_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Rating",
	HandlerType: (*RatingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPicturesRating",
			Handler:    _Rating_GetUserPicturesRating_Handler,
		},
		{
			MethodName: "GetUserPicturesRatingBrands",
			Handler:    _Rating_GetUserPicturesRatingBrands_Handler,
		},
		{
			MethodName: "GetUserCommentsRating",
			Handler:    _Rating_GetUserCommentsRating_Handler,
		},
		{
			MethodName: "GetUserCommentsRatingFans",
			Handler:    _Rating_GetUserCommentsRatingFans_Handler,
		},
		{
			MethodName: "GetUserPictureLikesRating",
			Handler:    _Rating_GetUserPictureLikesRating_Handler,
		},
		{
			MethodName: "GetUserPictureLikesRatingFans",
			Handler:    _Rating_GetUserPictureLikesRatingFans_Handler,
		},
		{
			MethodName: "GetUserSpecsRating",
			Handler:    _Rating_GetUserSpecsRating_Handler,
		},
		{
			MethodName: "GetUserSpecsRatingBrands",
			Handler:    _Rating_GetUserSpecsRatingBrands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Items_GetTopBrandsList_FullMethodName       = "/goautowp.Items/GetTopBrandsList"
	Items_GetTopPersonsList_FullMethodName      = "/goautowp.Items/GetTopPersonsList"
	Items_GetTopFactoriesList_FullMethodName    = "/goautowp.Items/GetTopFactoriesList"
	Items_GetTopCategoriesList_FullMethodName   = "/goautowp.Items/GetTopCategoriesList"
	Items_GetTwinsBrandsList_FullMethodName     = "/goautowp.Items/GetTwinsBrandsList"
	Items_GetTopTwinsBrandsList_FullMethodName  = "/goautowp.Items/GetTopTwinsBrandsList"
	Items_Item_FullMethodName                   = "/goautowp.Items/Item"
	Items_List_FullMethodName                   = "/goautowp.Items/List"
	Items_GetTree_FullMethodName                = "/goautowp.Items/GetTree"
	Items_GetContentLanguages_FullMethodName    = "/goautowp.Items/GetContentLanguages"
	Items_GetItemLink_FullMethodName            = "/goautowp.Items/GetItemLink"
	Items_GetItemLinks_FullMethodName           = "/goautowp.Items/GetItemLinks"
	Items_DeleteItemLink_FullMethodName         = "/goautowp.Items/DeleteItemLink"
	Items_CreateItemLink_FullMethodName         = "/goautowp.Items/CreateItemLink"
	Items_UpdateItemLink_FullMethodName         = "/goautowp.Items/UpdateItemLink"
	Items_GetItemVehicleTypes_FullMethodName    = "/goautowp.Items/GetItemVehicleTypes"
	Items_GetItemVehicleType_FullMethodName     = "/goautowp.Items/GetItemVehicleType"
	Items_CreateItemVehicleType_FullMethodName  = "/goautowp.Items/CreateItemVehicleType"
	Items_DeleteItemVehicleType_FullMethodName  = "/goautowp.Items/DeleteItemVehicleType"
	Items_GetItemLanguages_FullMethodName       = "/goautowp.Items/GetItemLanguages"
	Items_GetItemParentLanguages_FullMethodName = "/goautowp.Items/GetItemParentLanguages"
	Items_GetStats_FullMethodName               = "/goautowp.Items/GetStats"
)

// ItemsClient is the client API for Items service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemsClient interface {
	GetTopBrandsList(ctx context.Context, in *GetTopBrandsListRequest, opts ...grpc.CallOption) (*APITopBrandsList, error)
	GetTopPersonsList(ctx context.Context, in *GetTopPersonsListRequest, opts ...grpc.CallOption) (*APITopPersonsList, error)
	GetTopFactoriesList(ctx context.Context, in *GetTopFactoriesListRequest, opts ...grpc.CallOption) (*APITopFactoriesList, error)
	GetTopCategoriesList(ctx context.Context, in *GetTopCategoriesListRequest, opts ...grpc.CallOption) (*APITopCategoriesList, error)
	GetTwinsBrandsList(ctx context.Context, in *GetTwinsBrandsListRequest, opts ...grpc.CallOption) (*APITwinsBrandsList, error)
	GetTopTwinsBrandsList(ctx context.Context, in *GetTopTwinsBrandsListRequest, opts ...grpc.CallOption) (*APITopTwinsBrandsList, error)
	Item(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*APIItem, error)
	List(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*APIItemList, error)
	GetTree(ctx context.Context, in *GetTreeRequest, opts ...grpc.CallOption) (*APITreeItem, error)
	GetContentLanguages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIContentLanguages, error)
	GetItemLink(ctx context.Context, in *APIItemLinkRequest, opts ...grpc.CallOption) (*APIItemLink, error)
	GetItemLinks(ctx context.Context, in *APIGetItemLinksRequest, opts ...grpc.CallOption) (*APIItemLinksResponse, error)
	DeleteItemLink(ctx context.Context, in *APIItemLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateItemLink(ctx context.Context, in *APIItemLink, opts ...grpc.CallOption) (*APICreateItemLinkResponse, error)
	UpdateItemLink(ctx context.Context, in *APIItemLink, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetItemVehicleTypes(ctx context.Context, in *APIGetItemVehicleTypesRequest, opts ...grpc.CallOption) (*APIGetItemVehicleTypesResponse, error)
	GetItemVehicleType(ctx context.Context, in *APIItemVehicleTypeRequest, opts ...grpc.CallOption) (*APIItemVehicleType, error)
	CreateItemVehicleType(ctx context.Context, in *APIItemVehicleType, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteItemVehicleType(ctx context.Context, in *APIItemVehicleTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetItemLanguages(ctx context.Context, in *APIGetItemLanguagesRequest, opts ...grpc.CallOption) (*ItemLanguages, error)
	GetItemParentLanguages(ctx context.Context, in *APIGetItemParentLanguagesRequest, opts ...grpc.CallOption) (*ItemParentLanguages, error)
	GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatsResponse, error)
}

type itemsClient struct {
	cc grpc.ClientConnInterface
}

func NewItemsClient(cc grpc.ClientConnInterface) ItemsClient {
	return &itemsClient{cc}
}

func (c *itemsClient) GetTopBrandsList(ctx context.Context, in *GetTopBrandsListRequest, opts ...grpc.CallOption) (*APITopBrandsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APITopBrandsList)
	err := c.cc.Invoke(ctx, Items_GetTopBrandsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetTopPersonsList(ctx context.Context, in *GetTopPersonsListRequest, opts ...grpc.CallOption) (*APITopPersonsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APITopPersonsList)
	err := c.cc.Invoke(ctx, Items_GetTopPersonsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetTopFactoriesList(ctx context.Context, in *GetTopFactoriesListRequest, opts ...grpc.CallOption) (*APITopFactoriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APITopFactoriesList)
	err := c.cc.Invoke(ctx, Items_GetTopFactoriesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetTopCategoriesList(ctx context.Context, in *GetTopCategoriesListRequest, opts ...grpc.CallOption) (*APITopCategoriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APITopCategoriesList)
	err := c.cc.Invoke(ctx, Items_GetTopCategoriesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetTwinsBrandsList(ctx context.Context, in *GetTwinsBrandsListRequest, opts ...grpc.CallOption) (*APITwinsBrandsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APITwinsBrandsList)
	err := c.cc.Invoke(ctx, Items_GetTwinsBrandsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetTopTwinsBrandsList(ctx context.Context, in *GetTopTwinsBrandsListRequest, opts ...grpc.CallOption) (*APITopTwinsBrandsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APITopTwinsBrandsList)
	err := c.cc.Invoke(ctx, Items_GetTopTwinsBrandsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) Item(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*APIItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIItem)
	err := c.cc.Invoke(ctx, Items_Item_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) List(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*APIItemList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIItemList)
	err := c.cc.Invoke(ctx, Items_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetTree(ctx context.Context, in *GetTreeRequest, opts ...grpc.CallOption) (*APITreeItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APITreeItem)
	err := c.cc.Invoke(ctx, Items_GetTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetContentLanguages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIContentLanguages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIContentLanguages)
	err := c.cc.Invoke(ctx, Items_GetContentLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetItemLink(ctx context.Context, in *APIItemLinkRequest, opts ...grpc.CallOption) (*APIItemLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIItemLink)
	err := c.cc.Invoke(ctx, Items_GetItemLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetItemLinks(ctx context.Context, in *APIGetItemLinksRequest, opts ...grpc.CallOption) (*APIItemLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIItemLinksResponse)
	err := c.cc.Invoke(ctx, Items_GetItemLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) DeleteItemLink(ctx context.Context, in *APIItemLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Items_DeleteItemLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) CreateItemLink(ctx context.Context, in *APIItemLink, opts ...grpc.CallOption) (*APICreateItemLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APICreateItemLinkResponse)
	err := c.cc.Invoke(ctx, Items_CreateItemLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) UpdateItemLink(ctx context.Context, in *APIItemLink, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Items_UpdateItemLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetItemVehicleTypes(ctx context.Context, in *APIGetItemVehicleTypesRequest, opts ...grpc.CallOption) (*APIGetItemVehicleTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIGetItemVehicleTypesResponse)
	err := c.cc.Invoke(ctx, Items_GetItemVehicleTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetItemVehicleType(ctx context.Context, in *APIItemVehicleTypeRequest, opts ...grpc.CallOption) (*APIItemVehicleType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIItemVehicleType)
	err := c.cc.Invoke(ctx, Items_GetItemVehicleType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) CreateItemVehicleType(ctx context.Context, in *APIItemVehicleType, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Items_CreateItemVehicleType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) DeleteItemVehicleType(ctx context.Context, in *APIItemVehicleTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Items_DeleteItemVehicleType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetItemLanguages(ctx context.Context, in *APIGetItemLanguagesRequest, opts ...grpc.CallOption) (*ItemLanguages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemLanguages)
	err := c.cc.Invoke(ctx, Items_GetItemLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetItemParentLanguages(ctx context.Context, in *APIGetItemParentLanguagesRequest, opts ...grpc.CallOption) (*ItemParentLanguages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemParentLanguages)
	err := c.cc.Invoke(ctx, Items_GetItemParentLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, Items_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemsServer is the server API for Items service.
// All implementations must embed UnimplementedItemsServer
// for forward compatibility
type ItemsServer interface {
	GetTopBrandsList(context.Context, *GetTopBrandsListRequest) (*APITopBrandsList, error)
	GetTopPersonsList(context.Context, *GetTopPersonsListRequest) (*APITopPersonsList, error)
	GetTopFactoriesList(context.Context, *GetTopFactoriesListRequest) (*APITopFactoriesList, error)
	GetTopCategoriesList(context.Context, *GetTopCategoriesListRequest) (*APITopCategoriesList, error)
	GetTwinsBrandsList(context.Context, *GetTwinsBrandsListRequest) (*APITwinsBrandsList, error)
	GetTopTwinsBrandsList(context.Context, *GetTopTwinsBrandsListRequest) (*APITopTwinsBrandsList, error)
	Item(context.Context, *ItemRequest) (*APIItem, error)
	List(context.Context, *ListItemsRequest) (*APIItemList, error)
	GetTree(context.Context, *GetTreeRequest) (*APITreeItem, error)
	GetContentLanguages(context.Context, *emptypb.Empty) (*APIContentLanguages, error)
	GetItemLink(context.Context, *APIItemLinkRequest) (*APIItemLink, error)
	GetItemLinks(context.Context, *APIGetItemLinksRequest) (*APIItemLinksResponse, error)
	DeleteItemLink(context.Context, *APIItemLinkRequest) (*emptypb.Empty, error)
	CreateItemLink(context.Context, *APIItemLink) (*APICreateItemLinkResponse, error)
	UpdateItemLink(context.Context, *APIItemLink) (*emptypb.Empty, error)
	GetItemVehicleTypes(context.Context, *APIGetItemVehicleTypesRequest) (*APIGetItemVehicleTypesResponse, error)
	GetItemVehicleType(context.Context, *APIItemVehicleTypeRequest) (*APIItemVehicleType, error)
	CreateItemVehicleType(context.Context, *APIItemVehicleType) (*emptypb.Empty, error)
	DeleteItemVehicleType(context.Context, *APIItemVehicleTypeRequest) (*emptypb.Empty, error)
	GetItemLanguages(context.Context, *APIGetItemLanguagesRequest) (*ItemLanguages, error)
	GetItemParentLanguages(context.Context, *APIGetItemParentLanguagesRequest) (*ItemParentLanguages, error)
	GetStats(context.Context, *emptypb.Empty) (*StatsResponse, error)
	mustEmbedUnimplementedItemsServer()
}

// UnimplementedItemsServer must be embedded to have forward compatible implementations.
type UnimplementedItemsServer struct {
}

func (UnimplementedItemsServer) GetTopBrandsList(context.Context, *GetTopBrandsListRequest) (*APITopBrandsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopBrandsList not implemented")
}
func (UnimplementedItemsServer) GetTopPersonsList(context.Context, *GetTopPersonsListRequest) (*APITopPersonsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopPersonsList not implemented")
}
func (UnimplementedItemsServer) GetTopFactoriesList(context.Context, *GetTopFactoriesListRequest) (*APITopFactoriesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopFactoriesList not implemented")
}
func (UnimplementedItemsServer) GetTopCategoriesList(context.Context, *GetTopCategoriesListRequest) (*APITopCategoriesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopCategoriesList not implemented")
}
func (UnimplementedItemsServer) GetTwinsBrandsList(context.Context, *GetTwinsBrandsListRequest) (*APITwinsBrandsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwinsBrandsList not implemented")
}
func (UnimplementedItemsServer) GetTopTwinsBrandsList(context.Context, *GetTopTwinsBrandsListRequest) (*APITopTwinsBrandsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopTwinsBrandsList not implemented")
}
func (UnimplementedItemsServer) Item(context.Context, *ItemRequest) (*APIItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Item not implemented")
}
func (UnimplementedItemsServer) List(context.Context, *ListItemsRequest) (*APIItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedItemsServer) GetTree(context.Context, *GetTreeRequest) (*APITreeItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTree not implemented")
}
func (UnimplementedItemsServer) GetContentLanguages(context.Context, *emptypb.Empty) (*APIContentLanguages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentLanguages not implemented")
}
func (UnimplementedItemsServer) GetItemLink(context.Context, *APIItemLinkRequest) (*APIItemLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemLink not implemented")
}
func (UnimplementedItemsServer) GetItemLinks(context.Context, *APIGetItemLinksRequest) (*APIItemLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemLinks not implemented")
}
func (UnimplementedItemsServer) DeleteItemLink(context.Context, *APIItemLinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemLink not implemented")
}
func (UnimplementedItemsServer) CreateItemLink(context.Context, *APIItemLink) (*APICreateItemLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemLink not implemented")
}
func (UnimplementedItemsServer) UpdateItemLink(context.Context, *APIItemLink) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemLink not implemented")
}
func (UnimplementedItemsServer) GetItemVehicleTypes(context.Context, *APIGetItemVehicleTypesRequest) (*APIGetItemVehicleTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemVehicleTypes not implemented")
}
func (UnimplementedItemsServer) GetItemVehicleType(context.Context, *APIItemVehicleTypeRequest) (*APIItemVehicleType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemVehicleType not implemented")
}
func (UnimplementedItemsServer) CreateItemVehicleType(context.Context, *APIItemVehicleType) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemVehicleType not implemented")
}
func (UnimplementedItemsServer) DeleteItemVehicleType(context.Context, *APIItemVehicleTypeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemVehicleType not implemented")
}
func (UnimplementedItemsServer) GetItemLanguages(context.Context, *APIGetItemLanguagesRequest) (*ItemLanguages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemLanguages not implemented")
}
func (UnimplementedItemsServer) GetItemParentLanguages(context.Context, *APIGetItemParentLanguagesRequest) (*ItemParentLanguages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemParentLanguages not implemented")
}
func (UnimplementedItemsServer) GetStats(context.Context, *emptypb.Empty) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedItemsServer) mustEmbedUnimplementedItemsServer() {}

// UnsafeItemsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemsServer will
// result in compilation errors.
type UnsafeItemsServer interface {
	mustEmbedUnimplementedItemsServer()
}

func RegisterItemsServer(s grpc.ServiceRegistrar, srv ItemsServer) {
	s.RegisterService(&Items_ServiceDesc, srv)
}

func _Items_GetTopBrandsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopBrandsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetTopBrandsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetTopBrandsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetTopBrandsList(ctx, req.(*GetTopBrandsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetTopPersonsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopPersonsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetTopPersonsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetTopPersonsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetTopPersonsList(ctx, req.(*GetTopPersonsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetTopFactoriesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopFactoriesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetTopFactoriesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetTopFactoriesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetTopFactoriesList(ctx, req.(*GetTopFactoriesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetTopCategoriesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopCategoriesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetTopCategoriesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetTopCategoriesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetTopCategoriesList(ctx, req.(*GetTopCategoriesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetTwinsBrandsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwinsBrandsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetTwinsBrandsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetTwinsBrandsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetTwinsBrandsList(ctx, req.(*GetTwinsBrandsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetTopTwinsBrandsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopTwinsBrandsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetTopTwinsBrandsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetTopTwinsBrandsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetTopTwinsBrandsList(ctx, req.(*GetTopTwinsBrandsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_Item_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).Item(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_Item_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).Item(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).List(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetTree(ctx, req.(*GetTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetContentLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetContentLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetContentLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetContentLanguages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetItemLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIItemLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetItemLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetItemLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetItemLink(ctx, req.(*APIItemLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetItemLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetItemLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetItemLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetItemLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetItemLinks(ctx, req.(*APIGetItemLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_DeleteItemLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIItemLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).DeleteItemLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_DeleteItemLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).DeleteItemLink(ctx, req.(*APIItemLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_CreateItemLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIItemLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).CreateItemLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_CreateItemLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).CreateItemLink(ctx, req.(*APIItemLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_UpdateItemLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIItemLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).UpdateItemLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_UpdateItemLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).UpdateItemLink(ctx, req.(*APIItemLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetItemVehicleTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetItemVehicleTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetItemVehicleTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetItemVehicleTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetItemVehicleTypes(ctx, req.(*APIGetItemVehicleTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetItemVehicleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIItemVehicleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetItemVehicleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetItemVehicleType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetItemVehicleType(ctx, req.(*APIItemVehicleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_CreateItemVehicleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIItemVehicleType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).CreateItemVehicleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_CreateItemVehicleType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).CreateItemVehicleType(ctx, req.(*APIItemVehicleType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_DeleteItemVehicleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIItemVehicleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).DeleteItemVehicleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_DeleteItemVehicleType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).DeleteItemVehicleType(ctx, req.(*APIItemVehicleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetItemLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetItemLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetItemLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetItemLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetItemLanguages(ctx, req.(*APIGetItemLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetItemParentLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetItemParentLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetItemParentLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetItemParentLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetItemParentLanguages(ctx, req.(*APIGetItemParentLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Items_ServiceDesc is the grpc.ServiceDesc for Items service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Items_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Items",
	HandlerType: (*ItemsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopBrandsList",
			Handler:    _Items_GetTopBrandsList_Handler,
		},
		{
			MethodName: "GetTopPersonsList",
			Handler:    _Items_GetTopPersonsList_Handler,
		},
		{
			MethodName: "GetTopFactoriesList",
			Handler:    _Items_GetTopFactoriesList_Handler,
		},
		{
			MethodName: "GetTopCategoriesList",
			Handler:    _Items_GetTopCategoriesList_Handler,
		},
		{
			MethodName: "GetTwinsBrandsList",
			Handler:    _Items_GetTwinsBrandsList_Handler,
		},
		{
			MethodName: "GetTopTwinsBrandsList",
			Handler:    _Items_GetTopTwinsBrandsList_Handler,
		},
		{
			MethodName: "Item",
			Handler:    _Items_Item_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Items_List_Handler,
		},
		{
			MethodName: "GetTree",
			Handler:    _Items_GetTree_Handler,
		},
		{
			MethodName: "GetContentLanguages",
			Handler:    _Items_GetContentLanguages_Handler,
		},
		{
			MethodName: "GetItemLink",
			Handler:    _Items_GetItemLink_Handler,
		},
		{
			MethodName: "GetItemLinks",
			Handler:    _Items_GetItemLinks_Handler,
		},
		{
			MethodName: "DeleteItemLink",
			Handler:    _Items_DeleteItemLink_Handler,
		},
		{
			MethodName: "CreateItemLink",
			Handler:    _Items_CreateItemLink_Handler,
		},
		{
			MethodName: "UpdateItemLink",
			Handler:    _Items_UpdateItemLink_Handler,
		},
		{
			MethodName: "GetItemVehicleTypes",
			Handler:    _Items_GetItemVehicleTypes_Handler,
		},
		{
			MethodName: "GetItemVehicleType",
			Handler:    _Items_GetItemVehicleType_Handler,
		},
		{
			MethodName: "CreateItemVehicleType",
			Handler:    _Items_CreateItemVehicleType_Handler,
		},
		{
			MethodName: "DeleteItemVehicleType",
			Handler:    _Items_DeleteItemVehicleType_Handler,
		},
		{
			MethodName: "GetItemLanguages",
			Handler:    _Items_GetItemLanguages_Handler,
		},
		{
			MethodName: "GetItemParentLanguages",
			Handler:    _Items_GetItemParentLanguages_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Items_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Comments_GetCommentVotes_FullMethodName = "/goautowp.Comments/GetCommentVotes"
	Comments_Subscribe_FullMethodName       = "/goautowp.Comments/Subscribe"
	Comments_UnSubscribe_FullMethodName     = "/goautowp.Comments/UnSubscribe"
	Comments_View_FullMethodName            = "/goautowp.Comments/View"
	Comments_SetDeleted_FullMethodName      = "/goautowp.Comments/SetDeleted"
	Comments_MoveComment_FullMethodName     = "/goautowp.Comments/MoveComment"
	Comments_VoteComment_FullMethodName     = "/goautowp.Comments/VoteComment"
	Comments_Add_FullMethodName             = "/goautowp.Comments/Add"
	Comments_GetMessagePage_FullMethodName  = "/goautowp.Comments/GetMessagePage"
	Comments_GetMessage_FullMethodName      = "/goautowp.Comments/GetMessage"
	Comments_GetMessages_FullMethodName     = "/goautowp.Comments/GetMessages"
)

// CommentsClient is the client API for Comments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentsClient interface {
	GetCommentVotes(ctx context.Context, in *GetCommentVotesRequest, opts ...grpc.CallOption) (*CommentVoteItems, error)
	Subscribe(ctx context.Context, in *CommentsSubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnSubscribe(ctx context.Context, in *CommentsUnSubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	View(ctx context.Context, in *CommentsViewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetDeleted(ctx context.Context, in *CommentsSetDeletedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveComment(ctx context.Context, in *CommentsMoveCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VoteComment(ctx context.Context, in *CommentsVoteCommentRequest, opts ...grpc.CallOption) (*CommentsVoteCommentResponse, error)
	Add(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	GetMessagePage(ctx context.Context, in *GetMessagePageRequest, opts ...grpc.CallOption) (*APICommentsMessagePage, error)
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*APICommentsMessage, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*APICommentsMessages, error)
}

type commentsClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentsClient(cc grpc.ClientConnInterface) CommentsClient {
	return &commentsClient{cc}
}

func (c *commentsClient) GetCommentVotes(ctx context.Context, in *GetCommentVotesRequest, opts ...grpc.CallOption) (*CommentVoteItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentVoteItems)
	err := c.cc.Invoke(ctx, Comments_GetCommentVotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) Subscribe(ctx context.Context, in *CommentsSubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Comments_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) UnSubscribe(ctx context.Context, in *CommentsUnSubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Comments_UnSubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) View(ctx context.Context, in *CommentsViewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Comments_View_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) SetDeleted(ctx context.Context, in *CommentsSetDeletedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Comments_SetDeleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) MoveComment(ctx context.Context, in *CommentsMoveCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Comments_MoveComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) VoteComment(ctx context.Context, in *CommentsVoteCommentRequest, opts ...grpc.CallOption) (*CommentsVoteCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentsVoteCommentResponse)
	err := c.cc.Invoke(ctx, Comments_VoteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) Add(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, Comments_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) GetMessagePage(ctx context.Context, in *GetMessagePageRequest, opts ...grpc.CallOption) (*APICommentsMessagePage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APICommentsMessagePage)
	err := c.cc.Invoke(ctx, Comments_GetMessagePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*APICommentsMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APICommentsMessage)
	err := c.cc.Invoke(ctx, Comments_GetMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*APICommentsMessages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APICommentsMessages)
	err := c.cc.Invoke(ctx, Comments_GetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentsServer is the server API for Comments service.
// All implementations must embed UnimplementedCommentsServer
// for forward compatibility
type CommentsServer interface {
	GetCommentVotes(context.Context, *GetCommentVotesRequest) (*CommentVoteItems, error)
	Subscribe(context.Context, *CommentsSubscribeRequest) (*emptypb.Empty, error)
	UnSubscribe(context.Context, *CommentsUnSubscribeRequest) (*emptypb.Empty, error)
	View(context.Context, *CommentsViewRequest) (*emptypb.Empty, error)
	SetDeleted(context.Context, *CommentsSetDeletedRequest) (*emptypb.Empty, error)
	MoveComment(context.Context, *CommentsMoveCommentRequest) (*emptypb.Empty, error)
	VoteComment(context.Context, *CommentsVoteCommentRequest) (*CommentsVoteCommentResponse, error)
	Add(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	GetMessagePage(context.Context, *GetMessagePageRequest) (*APICommentsMessagePage, error)
	GetMessage(context.Context, *GetMessageRequest) (*APICommentsMessage, error)
	GetMessages(context.Context, *GetMessagesRequest) (*APICommentsMessages, error)
	mustEmbedUnimplementedCommentsServer()
}

// UnimplementedCommentsServer must be embedded to have forward compatible implementations.
type UnimplementedCommentsServer struct {
}

func (UnimplementedCommentsServer) GetCommentVotes(context.Context, *GetCommentVotesRequest) (*CommentVoteItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentVotes not implemented")
}
func (UnimplementedCommentsServer) Subscribe(context.Context, *CommentsSubscribeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedCommentsServer) UnSubscribe(context.Context, *CommentsUnSubscribeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribe not implemented")
}
func (UnimplementedCommentsServer) View(context.Context, *CommentsViewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedCommentsServer) SetDeleted(context.Context, *CommentsSetDeletedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeleted not implemented")
}
func (UnimplementedCommentsServer) MoveComment(context.Context, *CommentsMoveCommentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveComment not implemented")
}
func (UnimplementedCommentsServer) VoteComment(context.Context, *CommentsVoteCommentRequest) (*CommentsVoteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteComment not implemented")
}
func (UnimplementedCommentsServer) Add(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCommentsServer) GetMessagePage(context.Context, *GetMessagePageRequest) (*APICommentsMessagePage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagePage not implemented")
}
func (UnimplementedCommentsServer) GetMessage(context.Context, *GetMessageRequest) (*APICommentsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedCommentsServer) GetMessages(context.Context, *GetMessagesRequest) (*APICommentsMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedCommentsServer) mustEmbedUnimplementedCommentsServer() {}

// UnsafeCommentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentsServer will
// result in compilation errors.
type UnsafeCommentsServer interface {
	mustEmbedUnimplementedCommentsServer()
}

func RegisterCommentsServer(s grpc.ServiceRegistrar, srv CommentsServer) {
	s.RegisterService(&Comments_ServiceDesc, srv)
}

func _Comments_GetCommentVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).GetCommentVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comments_GetCommentVotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).GetCommentVotes(ctx, req.(*GetCommentVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comments_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).Subscribe(ctx, req.(*CommentsSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_UnSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsUnSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).UnSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comments_UnSubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).UnSubscribe(ctx, req.(*CommentsUnSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comments_View_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).View(ctx, req.(*CommentsViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_SetDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsSetDeletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).SetDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comments_SetDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).SetDeleted(ctx, req.(*CommentsSetDeletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_MoveComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsMoveCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).MoveComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comments_MoveComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).MoveComment(ctx, req.(*CommentsMoveCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_VoteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsVoteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).VoteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comments_VoteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).VoteComment(ctx, req.(*CommentsVoteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comments_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).Add(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_GetMessagePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).GetMessagePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comments_GetMessagePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).GetMessagePage(ctx, req.(*GetMessagePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comments_GetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comments_GetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Comments_ServiceDesc is the grpc.ServiceDesc for Comments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Comments",
	HandlerType: (*CommentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommentVotes",
			Handler:    _Comments_GetCommentVotes_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Comments_Subscribe_Handler,
		},
		{
			MethodName: "UnSubscribe",
			Handler:    _Comments_UnSubscribe_Handler,
		},
		{
			MethodName: "View",
			Handler:    _Comments_View_Handler,
		},
		{
			MethodName: "SetDeleted",
			Handler:    _Comments_SetDeleted_Handler,
		},
		{
			MethodName: "MoveComment",
			Handler:    _Comments_MoveComment_Handler,
		},
		{
			MethodName: "VoteComment",
			Handler:    _Comments_VoteComment_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Comments_Add_Handler,
		},
		{
			MethodName: "GetMessagePage",
			Handler:    _Comments_GetMessagePage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _Comments_GetMessage_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _Comments_GetMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Map_GetPoints_FullMethodName = "/goautowp.Map/GetPoints"
)

// MapClient is the client API for Map service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapClient interface {
	GetPoints(ctx context.Context, in *MapGetPointsRequest, opts ...grpc.CallOption) (*MapPoints, error)
}

type mapClient struct {
	cc grpc.ClientConnInterface
}

func NewMapClient(cc grpc.ClientConnInterface) MapClient {
	return &mapClient{cc}
}

func (c *mapClient) GetPoints(ctx context.Context, in *MapGetPointsRequest, opts ...grpc.CallOption) (*MapPoints, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapPoints)
	err := c.cc.Invoke(ctx, Map_GetPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapServer is the server API for Map service.
// All implementations must embed UnimplementedMapServer
// for forward compatibility
type MapServer interface {
	GetPoints(context.Context, *MapGetPointsRequest) (*MapPoints, error)
	mustEmbedUnimplementedMapServer()
}

// UnimplementedMapServer must be embedded to have forward compatible implementations.
type UnimplementedMapServer struct {
}

func (UnimplementedMapServer) GetPoints(context.Context, *MapGetPointsRequest) (*MapPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoints not implemented")
}
func (UnimplementedMapServer) mustEmbedUnimplementedMapServer() {}

// UnsafeMapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapServer will
// result in compilation errors.
type UnsafeMapServer interface {
	mustEmbedUnimplementedMapServer()
}

func RegisterMapServer(s grpc.ServiceRegistrar, srv MapServer) {
	s.RegisterService(&Map_ServiceDesc, srv)
}

func _Map_GetPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapGetPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).GetPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Map_GetPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).GetPoints(ctx, req.(*MapGetPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Map_ServiceDesc is the grpc.ServiceDesc for Map service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Map_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Map",
	HandlerType: (*MapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPoints",
			Handler:    _Map_GetPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Pictures_View_FullMethodName                    = "/goautowp.Pictures/View"
	Pictures_Vote_FullMethodName                    = "/goautowp.Pictures/Vote"
	Pictures_CreateModerVoteTemplate_FullMethodName = "/goautowp.Pictures/CreateModerVoteTemplate"
	Pictures_DeleteModerVoteTemplate_FullMethodName = "/goautowp.Pictures/DeleteModerVoteTemplate"
	Pictures_GetModerVoteTemplates_FullMethodName   = "/goautowp.Pictures/GetModerVoteTemplates"
)

// PicturesClient is the client API for Pictures service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PicturesClient interface {
	View(ctx context.Context, in *PicturesViewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Vote(ctx context.Context, in *PicturesVoteRequest, opts ...grpc.CallOption) (*PicturesVoteSummary, error)
	CreateModerVoteTemplate(ctx context.Context, in *ModerVoteTemplate, opts ...grpc.CallOption) (*ModerVoteTemplate, error)
	DeleteModerVoteTemplate(ctx context.Context, in *DeleteModerVoteTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetModerVoteTemplates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModerVoteTemplates, error)
}

type picturesClient struct {
	cc grpc.ClientConnInterface
}

func NewPicturesClient(cc grpc.ClientConnInterface) PicturesClient {
	return &picturesClient{cc}
}

func (c *picturesClient) View(ctx context.Context, in *PicturesViewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Pictures_View_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *picturesClient) Vote(ctx context.Context, in *PicturesVoteRequest, opts ...grpc.CallOption) (*PicturesVoteSummary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PicturesVoteSummary)
	err := c.cc.Invoke(ctx, Pictures_Vote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *picturesClient) CreateModerVoteTemplate(ctx context.Context, in *ModerVoteTemplate, opts ...grpc.CallOption) (*ModerVoteTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModerVoteTemplate)
	err := c.cc.Invoke(ctx, Pictures_CreateModerVoteTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *picturesClient) DeleteModerVoteTemplate(ctx context.Context, in *DeleteModerVoteTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Pictures_DeleteModerVoteTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *picturesClient) GetModerVoteTemplates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModerVoteTemplates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModerVoteTemplates)
	err := c.cc.Invoke(ctx, Pictures_GetModerVoteTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PicturesServer is the server API for Pictures service.
// All implementations must embed UnimplementedPicturesServer
// for forward compatibility
type PicturesServer interface {
	View(context.Context, *PicturesViewRequest) (*emptypb.Empty, error)
	Vote(context.Context, *PicturesVoteRequest) (*PicturesVoteSummary, error)
	CreateModerVoteTemplate(context.Context, *ModerVoteTemplate) (*ModerVoteTemplate, error)
	DeleteModerVoteTemplate(context.Context, *DeleteModerVoteTemplateRequest) (*emptypb.Empty, error)
	GetModerVoteTemplates(context.Context, *emptypb.Empty) (*ModerVoteTemplates, error)
	mustEmbedUnimplementedPicturesServer()
}

// UnimplementedPicturesServer must be embedded to have forward compatible implementations.
type UnimplementedPicturesServer struct {
}

func (UnimplementedPicturesServer) View(context.Context, *PicturesViewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedPicturesServer) Vote(context.Context, *PicturesVoteRequest) (*PicturesVoteSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedPicturesServer) CreateModerVoteTemplate(context.Context, *ModerVoteTemplate) (*ModerVoteTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModerVoteTemplate not implemented")
}
func (UnimplementedPicturesServer) DeleteModerVoteTemplate(context.Context, *DeleteModerVoteTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModerVoteTemplate not implemented")
}
func (UnimplementedPicturesServer) GetModerVoteTemplates(context.Context, *emptypb.Empty) (*ModerVoteTemplates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModerVoteTemplates not implemented")
}
func (UnimplementedPicturesServer) mustEmbedUnimplementedPicturesServer() {}

// UnsafePicturesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PicturesServer will
// result in compilation errors.
type UnsafePicturesServer interface {
	mustEmbedUnimplementedPicturesServer()
}

func RegisterPicturesServer(s grpc.ServiceRegistrar, srv PicturesServer) {
	s.RegisterService(&Pictures_ServiceDesc, srv)
}

func _Pictures_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PicturesViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicturesServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pictures_View_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicturesServer).View(ctx, req.(*PicturesViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pictures_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PicturesVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicturesServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pictures_Vote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicturesServer).Vote(ctx, req.(*PicturesVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pictures_CreateModerVoteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModerVoteTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicturesServer).CreateModerVoteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pictures_CreateModerVoteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicturesServer).CreateModerVoteTemplate(ctx, req.(*ModerVoteTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pictures_DeleteModerVoteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModerVoteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicturesServer).DeleteModerVoteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pictures_DeleteModerVoteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicturesServer).DeleteModerVoteTemplate(ctx, req.(*DeleteModerVoteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pictures_GetModerVoteTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicturesServer).GetModerVoteTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pictures_GetModerVoteTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicturesServer).GetModerVoteTemplates(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Pictures_ServiceDesc is the grpc.ServiceDesc for Pictures service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pictures_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Pictures",
	HandlerType: (*PicturesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "View",
			Handler:    _Pictures_View_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Pictures_Vote_Handler,
		},
		{
			MethodName: "CreateModerVoteTemplate",
			Handler:    _Pictures_CreateModerVoteTemplate_Handler,
		},
		{
			MethodName: "DeleteModerVoteTemplate",
			Handler:    _Pictures_DeleteModerVoteTemplate_Handler,
		},
		{
			MethodName: "GetModerVoteTemplates",
			Handler:    _Pictures_GetModerVoteTemplates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Messaging_GetMessagesNewCount_FullMethodName = "/goautowp.Messaging/GetMessagesNewCount"
	Messaging_GetMessagesSummary_FullMethodName  = "/goautowp.Messaging/GetMessagesSummary"
	Messaging_DeleteMessage_FullMethodName       = "/goautowp.Messaging/DeleteMessage"
	Messaging_ClearFolder_FullMethodName         = "/goautowp.Messaging/ClearFolder"
	Messaging_CreateMessage_FullMethodName       = "/goautowp.Messaging/CreateMessage"
	Messaging_GetMessages_FullMethodName         = "/goautowp.Messaging/GetMessages"
)

// MessagingClient is the client API for Messaging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagingClient interface {
	GetMessagesNewCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIMessageNewCount, error)
	GetMessagesSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIMessageSummary, error)
	DeleteMessage(ctx context.Context, in *MessagingDeleteMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClearFolder(ctx context.Context, in *MessagingClearFolder, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateMessage(ctx context.Context, in *MessagingCreateMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMessages(ctx context.Context, in *MessagingGetMessagesRequest, opts ...grpc.CallOption) (*MessagingGetMessagesResponse, error)
}

type messagingClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingClient(cc grpc.ClientConnInterface) MessagingClient {
	return &messagingClient{cc}
}

func (c *messagingClient) GetMessagesNewCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIMessageNewCount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIMessageNewCount)
	err := c.cc.Invoke(ctx, Messaging_GetMessagesNewCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) GetMessagesSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIMessageSummary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIMessageSummary)
	err := c.cc.Invoke(ctx, Messaging_GetMessagesSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) DeleteMessage(ctx context.Context, in *MessagingDeleteMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Messaging_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) ClearFolder(ctx context.Context, in *MessagingClearFolder, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Messaging_ClearFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) CreateMessage(ctx context.Context, in *MessagingCreateMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Messaging_CreateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) GetMessages(ctx context.Context, in *MessagingGetMessagesRequest, opts ...grpc.CallOption) (*MessagingGetMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessagingGetMessagesResponse)
	err := c.cc.Invoke(ctx, Messaging_GetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingServer is the server API for Messaging service.
// All implementations must embed UnimplementedMessagingServer
// for forward compatibility
type MessagingServer interface {
	GetMessagesNewCount(context.Context, *emptypb.Empty) (*APIMessageNewCount, error)
	GetMessagesSummary(context.Context, *emptypb.Empty) (*APIMessageSummary, error)
	DeleteMessage(context.Context, *MessagingDeleteMessage) (*emptypb.Empty, error)
	ClearFolder(context.Context, *MessagingClearFolder) (*emptypb.Empty, error)
	CreateMessage(context.Context, *MessagingCreateMessage) (*emptypb.Empty, error)
	GetMessages(context.Context, *MessagingGetMessagesRequest) (*MessagingGetMessagesResponse, error)
	mustEmbedUnimplementedMessagingServer()
}

// UnimplementedMessagingServer must be embedded to have forward compatible implementations.
type UnimplementedMessagingServer struct {
}

func (UnimplementedMessagingServer) GetMessagesNewCount(context.Context, *emptypb.Empty) (*APIMessageNewCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesNewCount not implemented")
}
func (UnimplementedMessagingServer) GetMessagesSummary(context.Context, *emptypb.Empty) (*APIMessageSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesSummary not implemented")
}
func (UnimplementedMessagingServer) DeleteMessage(context.Context, *MessagingDeleteMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedMessagingServer) ClearFolder(context.Context, *MessagingClearFolder) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearFolder not implemented")
}
func (UnimplementedMessagingServer) CreateMessage(context.Context, *MessagingCreateMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedMessagingServer) GetMessages(context.Context, *MessagingGetMessagesRequest) (*MessagingGetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedMessagingServer) mustEmbedUnimplementedMessagingServer() {}

// UnsafeMessagingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagingServer will
// result in compilation errors.
type UnsafeMessagingServer interface {
	mustEmbedUnimplementedMessagingServer()
}

func RegisterMessagingServer(s grpc.ServiceRegistrar, srv MessagingServer) {
	s.RegisterService(&Messaging_ServiceDesc, srv)
}

func _Messaging_GetMessagesNewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).GetMessagesNewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messaging_GetMessagesNewCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).GetMessagesNewCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_GetMessagesSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).GetMessagesSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messaging_GetMessagesSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).GetMessagesSummary(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagingDeleteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messaging_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).DeleteMessage(ctx, req.(*MessagingDeleteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_ClearFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagingClearFolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).ClearFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messaging_ClearFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).ClearFolder(ctx, req.(*MessagingClearFolder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagingCreateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messaging_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).CreateMessage(ctx, req.(*MessagingCreateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagingGetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messaging_GetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).GetMessages(ctx, req.(*MessagingGetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Messaging_ServiceDesc is the grpc.ServiceDesc for Messaging service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messaging_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Messaging",
	HandlerType: (*MessagingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessagesNewCount",
			Handler:    _Messaging_GetMessagesNewCount_Handler,
		},
		{
			MethodName: "GetMessagesSummary",
			Handler:    _Messaging_GetMessagesSummary_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Messaging_DeleteMessage_Handler,
		},
		{
			MethodName: "ClearFolder",
			Handler:    _Messaging_ClearFolder_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _Messaging_CreateMessage_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _Messaging_GetMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Statistics_GetPulse_FullMethodName     = "/goautowp.Statistics/GetPulse"
	Statistics_GetAboutData_FullMethodName = "/goautowp.Statistics/GetAboutData"
)

// StatisticsClient is the client API for Statistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticsClient interface {
	GetPulse(ctx context.Context, in *PulseRequest, opts ...grpc.CallOption) (*PulseResponse, error)
	GetAboutData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AboutDataResponse, error)
}

type statisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsClient(cc grpc.ClientConnInterface) StatisticsClient {
	return &statisticsClient{cc}
}

func (c *statisticsClient) GetPulse(ctx context.Context, in *PulseRequest, opts ...grpc.CallOption) (*PulseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PulseResponse)
	err := c.cc.Invoke(ctx, Statistics_GetPulse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) GetAboutData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AboutDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AboutDataResponse)
	err := c.cc.Invoke(ctx, Statistics_GetAboutData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticsServer is the server API for Statistics service.
// All implementations must embed UnimplementedStatisticsServer
// for forward compatibility
type StatisticsServer interface {
	GetPulse(context.Context, *PulseRequest) (*PulseResponse, error)
	GetAboutData(context.Context, *emptypb.Empty) (*AboutDataResponse, error)
	mustEmbedUnimplementedStatisticsServer()
}

// UnimplementedStatisticsServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticsServer struct {
}

func (UnimplementedStatisticsServer) GetPulse(context.Context, *PulseRequest) (*PulseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPulse not implemented")
}
func (UnimplementedStatisticsServer) GetAboutData(context.Context, *emptypb.Empty) (*AboutDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAboutData not implemented")
}
func (UnimplementedStatisticsServer) mustEmbedUnimplementedStatisticsServer() {}

// UnsafeStatisticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticsServer will
// result in compilation errors.
type UnsafeStatisticsServer interface {
	mustEmbedUnimplementedStatisticsServer()
}

func RegisterStatisticsServer(s grpc.ServiceRegistrar, srv StatisticsServer) {
	s.RegisterService(&Statistics_ServiceDesc, srv)
}

func _Statistics_GetPulse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).GetPulse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Statistics_GetPulse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).GetPulse(ctx, req.(*PulseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_GetAboutData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).GetAboutData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Statistics_GetAboutData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).GetAboutData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Statistics_ServiceDesc is the grpc.ServiceDesc for Statistics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Statistics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Statistics",
	HandlerType: (*StatisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPulse",
			Handler:    _Statistics_GetPulse_Handler,
		},
		{
			MethodName: "GetAboutData",
			Handler:    _Statistics_GetAboutData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Donations_GetVODData_FullMethodName      = "/goautowp.Donations/GetVODData"
	Donations_GetTransactions_FullMethodName = "/goautowp.Donations/GetTransactions"
)

// DonationsClient is the client API for Donations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DonationsClient interface {
	GetVODData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VODDataResponse, error)
	GetTransactions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DonationsTransactionsResponse, error)
}

type donationsClient struct {
	cc grpc.ClientConnInterface
}

func NewDonationsClient(cc grpc.ClientConnInterface) DonationsClient {
	return &donationsClient{cc}
}

func (c *donationsClient) GetVODData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VODDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VODDataResponse)
	err := c.cc.Invoke(ctx, Donations_GetVODData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationsClient) GetTransactions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DonationsTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DonationsTransactionsResponse)
	err := c.cc.Invoke(ctx, Donations_GetTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DonationsServer is the server API for Donations service.
// All implementations must embed UnimplementedDonationsServer
// for forward compatibility
type DonationsServer interface {
	GetVODData(context.Context, *emptypb.Empty) (*VODDataResponse, error)
	GetTransactions(context.Context, *emptypb.Empty) (*DonationsTransactionsResponse, error)
	mustEmbedUnimplementedDonationsServer()
}

// UnimplementedDonationsServer must be embedded to have forward compatible implementations.
type UnimplementedDonationsServer struct {
}

func (UnimplementedDonationsServer) GetVODData(context.Context, *emptypb.Empty) (*VODDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVODData not implemented")
}
func (UnimplementedDonationsServer) GetTransactions(context.Context, *emptypb.Empty) (*DonationsTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedDonationsServer) mustEmbedUnimplementedDonationsServer() {}

// UnsafeDonationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DonationsServer will
// result in compilation errors.
type UnsafeDonationsServer interface {
	mustEmbedUnimplementedDonationsServer()
}

func RegisterDonationsServer(s grpc.ServiceRegistrar, srv DonationsServer) {
	s.RegisterService(&Donations_ServiceDesc, srv)
}

func _Donations_GetVODData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationsServer).GetVODData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Donations_GetVODData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationsServer).GetVODData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Donations_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationsServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Donations_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationsServer).GetTransactions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Donations_ServiceDesc is the grpc.ServiceDesc for Donations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Donations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Donations",
	HandlerType: (*DonationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVODData",
			Handler:    _Donations_GetVODData_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Donations_GetTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Text_GetText_FullMethodName = "/goautowp.Text/GetText"
)

// TextClient is the client API for Text service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextClient interface {
	GetText(ctx context.Context, in *APIGetTextRequest, opts ...grpc.CallOption) (*APIGetTextResponse, error)
}

type textClient struct {
	cc grpc.ClientConnInterface
}

func NewTextClient(cc grpc.ClientConnInterface) TextClient {
	return &textClient{cc}
}

func (c *textClient) GetText(ctx context.Context, in *APIGetTextRequest, opts ...grpc.CallOption) (*APIGetTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIGetTextResponse)
	err := c.cc.Invoke(ctx, Text_GetText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextServer is the server API for Text service.
// All implementations must embed UnimplementedTextServer
// for forward compatibility
type TextServer interface {
	GetText(context.Context, *APIGetTextRequest) (*APIGetTextResponse, error)
	mustEmbedUnimplementedTextServer()
}

// UnimplementedTextServer must be embedded to have forward compatible implementations.
type UnimplementedTextServer struct {
}

func (UnimplementedTextServer) GetText(context.Context, *APIGetTextRequest) (*APIGetTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetText not implemented")
}
func (UnimplementedTextServer) mustEmbedUnimplementedTextServer() {}

// UnsafeTextServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextServer will
// result in compilation errors.
type UnsafeTextServer interface {
	mustEmbedUnimplementedTextServer()
}

func RegisterTextServer(s grpc.ServiceRegistrar, srv TextServer) {
	s.RegisterService(&Text_ServiceDesc, srv)
}

func _Text_GetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServer).GetText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Text_GetText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServer).GetText(ctx, req.(*APIGetTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Text_ServiceDesc is the grpc.ServiceDesc for Text service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Text_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Text",
	HandlerType: (*TextServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetText",
			Handler:    _Text_GetText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

const (
	Attrs_GetAttribute_FullMethodName      = "/goautowp.Attrs/GetAttribute"
	Attrs_GetAttributes_FullMethodName     = "/goautowp.Attrs/GetAttributes"
	Attrs_GetAttributeTypes_FullMethodName = "/goautowp.Attrs/GetAttributeTypes"
	Attrs_GetListOptions_FullMethodName    = "/goautowp.Attrs/GetListOptions"
	Attrs_GetUnits_FullMethodName          = "/goautowp.Attrs/GetUnits"
	Attrs_GetZoneAttributes_FullMethodName = "/goautowp.Attrs/GetZoneAttributes"
	Attrs_GetZones_FullMethodName          = "/goautowp.Attrs/GetZones"
)

// AttrsClient is the client API for Attrs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttrsClient interface {
	GetAttribute(ctx context.Context, in *AttrAttributeID, opts ...grpc.CallOption) (*AttrAttribute, error)
	GetAttributes(ctx context.Context, in *AttrAttributesRequest, opts ...grpc.CallOption) (*AttrAttributesResponse, error)
	GetAttributeTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AttrAttributeTypesResponse, error)
	GetListOptions(ctx context.Context, in *AttrListOptionsRequest, opts ...grpc.CallOption) (*AttrListOptionsResponse, error)
	GetUnits(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AttrUnitsResponse, error)
	GetZoneAttributes(ctx context.Context, in *AttrZoneAttributesRequest, opts ...grpc.CallOption) (*AttrZoneAttributesResponse, error)
	GetZones(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AttrZonesResponse, error)
}

type attrsClient struct {
	cc grpc.ClientConnInterface
}

func NewAttrsClient(cc grpc.ClientConnInterface) AttrsClient {
	return &attrsClient{cc}
}

func (c *attrsClient) GetAttribute(ctx context.Context, in *AttrAttributeID, opts ...grpc.CallOption) (*AttrAttribute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttrAttribute)
	err := c.cc.Invoke(ctx, Attrs_GetAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrsClient) GetAttributes(ctx context.Context, in *AttrAttributesRequest, opts ...grpc.CallOption) (*AttrAttributesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttrAttributesResponse)
	err := c.cc.Invoke(ctx, Attrs_GetAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrsClient) GetAttributeTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AttrAttributeTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttrAttributeTypesResponse)
	err := c.cc.Invoke(ctx, Attrs_GetAttributeTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrsClient) GetListOptions(ctx context.Context, in *AttrListOptionsRequest, opts ...grpc.CallOption) (*AttrListOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttrListOptionsResponse)
	err := c.cc.Invoke(ctx, Attrs_GetListOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrsClient) GetUnits(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AttrUnitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttrUnitsResponse)
	err := c.cc.Invoke(ctx, Attrs_GetUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrsClient) GetZoneAttributes(ctx context.Context, in *AttrZoneAttributesRequest, opts ...grpc.CallOption) (*AttrZoneAttributesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttrZoneAttributesResponse)
	err := c.cc.Invoke(ctx, Attrs_GetZoneAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrsClient) GetZones(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AttrZonesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttrZonesResponse)
	err := c.cc.Invoke(ctx, Attrs_GetZones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttrsServer is the server API for Attrs service.
// All implementations must embed UnimplementedAttrsServer
// for forward compatibility
type AttrsServer interface {
	GetAttribute(context.Context, *AttrAttributeID) (*AttrAttribute, error)
	GetAttributes(context.Context, *AttrAttributesRequest) (*AttrAttributesResponse, error)
	GetAttributeTypes(context.Context, *emptypb.Empty) (*AttrAttributeTypesResponse, error)
	GetListOptions(context.Context, *AttrListOptionsRequest) (*AttrListOptionsResponse, error)
	GetUnits(context.Context, *emptypb.Empty) (*AttrUnitsResponse, error)
	GetZoneAttributes(context.Context, *AttrZoneAttributesRequest) (*AttrZoneAttributesResponse, error)
	GetZones(context.Context, *emptypb.Empty) (*AttrZonesResponse, error)
	mustEmbedUnimplementedAttrsServer()
}

// UnimplementedAttrsServer must be embedded to have forward compatible implementations.
type UnimplementedAttrsServer struct {
}

func (UnimplementedAttrsServer) GetAttribute(context.Context, *AttrAttributeID) (*AttrAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttribute not implemented")
}
func (UnimplementedAttrsServer) GetAttributes(context.Context, *AttrAttributesRequest) (*AttrAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttributes not implemented")
}
func (UnimplementedAttrsServer) GetAttributeTypes(context.Context, *emptypb.Empty) (*AttrAttributeTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttributeTypes not implemented")
}
func (UnimplementedAttrsServer) GetListOptions(context.Context, *AttrListOptionsRequest) (*AttrListOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOptions not implemented")
}
func (UnimplementedAttrsServer) GetUnits(context.Context, *emptypb.Empty) (*AttrUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnits not implemented")
}
func (UnimplementedAttrsServer) GetZoneAttributes(context.Context, *AttrZoneAttributesRequest) (*AttrZoneAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZoneAttributes not implemented")
}
func (UnimplementedAttrsServer) GetZones(context.Context, *emptypb.Empty) (*AttrZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZones not implemented")
}
func (UnimplementedAttrsServer) mustEmbedUnimplementedAttrsServer() {}

// UnsafeAttrsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttrsServer will
// result in compilation errors.
type UnsafeAttrsServer interface {
	mustEmbedUnimplementedAttrsServer()
}

func RegisterAttrsServer(s grpc.ServiceRegistrar, srv AttrsServer) {
	s.RegisterService(&Attrs_ServiceDesc, srv)
}

func _Attrs_GetAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttrAttributeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrsServer).GetAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attrs_GetAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrsServer).GetAttribute(ctx, req.(*AttrAttributeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attrs_GetAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttrAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrsServer).GetAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attrs_GetAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrsServer).GetAttributes(ctx, req.(*AttrAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attrs_GetAttributeTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrsServer).GetAttributeTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attrs_GetAttributeTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrsServer).GetAttributeTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attrs_GetListOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttrListOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrsServer).GetListOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attrs_GetListOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrsServer).GetListOptions(ctx, req.(*AttrListOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attrs_GetUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrsServer).GetUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attrs_GetUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrsServer).GetUnits(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attrs_GetZoneAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttrZoneAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrsServer).GetZoneAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attrs_GetZoneAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrsServer).GetZoneAttributes(ctx, req.(*AttrZoneAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attrs_GetZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrsServer).GetZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attrs_GetZones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrsServer).GetZones(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Attrs_ServiceDesc is the grpc.ServiceDesc for Attrs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Attrs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Attrs",
	HandlerType: (*AttrsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAttribute",
			Handler:    _Attrs_GetAttribute_Handler,
		},
		{
			MethodName: "GetAttributes",
			Handler:    _Attrs_GetAttributes_Handler,
		},
		{
			MethodName: "GetAttributeTypes",
			Handler:    _Attrs_GetAttributeTypes_Handler,
		},
		{
			MethodName: "GetListOptions",
			Handler:    _Attrs_GetListOptions_Handler,
		},
		{
			MethodName: "GetUnits",
			Handler:    _Attrs_GetUnits_Handler,
		},
		{
			MethodName: "GetZoneAttributes",
			Handler:    _Attrs_GetZoneAttributes_Handler,
		},
		{
			MethodName: "GetZones",
			Handler:    _Attrs_GetZones_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}
