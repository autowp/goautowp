// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goautowp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AutowpClient is the client API for Autowp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutowpClient interface {
	AclEnforce(ctx context.Context, in *AclEnforceRequest, opts ...grpc.CallOption) (*AclEnforceResult, error)
	AddToTrafficBlacklist(ctx context.Context, in *AddToTrafficBlacklistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddToTrafficWhitelist(ctx context.Context, in *AddToTrafficWhitelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateFeedback(ctx context.Context, in *APICreateFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFromTrafficBlacklist(ctx context.Context, in *DeleteFromTrafficBlacklistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFromTrafficWhitelist(ctx context.Context, in *DeleteFromTrafficWhitelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBrandIcons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BrandIcons, error)
	GetBrandVehicleTypes(ctx context.Context, in *GetBrandVehicleTypesRequest, opts ...grpc.CallOption) (*BrandVehicleTypeItems, error)
	GetCommentVotes(ctx context.Context, in *GetCommentVotesRequest, opts ...grpc.CallOption) (*CommentVoteItems, error)
	GetForumsUserSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIForumsUserSummary, error)
	GetIP(ctx context.Context, in *APIGetIPRequest, opts ...grpc.CallOption) (*APIIP, error)
	GetMessagesNewCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIMessageNewCount, error)
	GetMessagesSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIMessageSummary, error)
	GetPerspectives(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PerspectivesItems, error)
	GetPerspectivePages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PerspectivePagesItems, error)
	GetReCaptchaConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReCaptchaConfig, error)
	GetSpecs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SpecsItems, error)
	GetTrafficTop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APITrafficTopResponse, error)
	GetTrafficWhitelist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APITrafficWhitelistItems, error)
	GetVehicleTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VehicleTypeItems, error)
}

type autowpClient struct {
	cc grpc.ClientConnInterface
}

func NewAutowpClient(cc grpc.ClientConnInterface) AutowpClient {
	return &autowpClient{cc}
}

func (c *autowpClient) AclEnforce(ctx context.Context, in *AclEnforceRequest, opts ...grpc.CallOption) (*AclEnforceResult, error) {
	out := new(AclEnforceResult)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/AclEnforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) AddToTrafficBlacklist(ctx context.Context, in *AddToTrafficBlacklistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/AddToTrafficBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) AddToTrafficWhitelist(ctx context.Context, in *AddToTrafficWhitelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/AddToTrafficWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) CreateFeedback(ctx context.Context, in *APICreateFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/CreateFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) DeleteFromTrafficBlacklist(ctx context.Context, in *DeleteFromTrafficBlacklistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/DeleteFromTrafficBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) DeleteFromTrafficWhitelist(ctx context.Context, in *DeleteFromTrafficWhitelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/DeleteFromTrafficWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetBrandIcons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BrandIcons, error) {
	out := new(BrandIcons)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetBrandIcons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetBrandVehicleTypes(ctx context.Context, in *GetBrandVehicleTypesRequest, opts ...grpc.CallOption) (*BrandVehicleTypeItems, error) {
	out := new(BrandVehicleTypeItems)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetBrandVehicleTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetCommentVotes(ctx context.Context, in *GetCommentVotesRequest, opts ...grpc.CallOption) (*CommentVoteItems, error) {
	out := new(CommentVoteItems)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetCommentVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetForumsUserSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIForumsUserSummary, error) {
	out := new(APIForumsUserSummary)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetForumsUserSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetIP(ctx context.Context, in *APIGetIPRequest, opts ...grpc.CallOption) (*APIIP, error) {
	out := new(APIIP)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetMessagesNewCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIMessageNewCount, error) {
	out := new(APIMessageNewCount)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetMessagesNewCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetMessagesSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIMessageSummary, error) {
	out := new(APIMessageSummary)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetMessagesSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetPerspectives(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PerspectivesItems, error) {
	out := new(PerspectivesItems)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetPerspectives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetPerspectivePages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PerspectivePagesItems, error) {
	out := new(PerspectivePagesItems)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetPerspectivePages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetReCaptchaConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReCaptchaConfig, error) {
	out := new(ReCaptchaConfig)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetReCaptchaConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetSpecs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SpecsItems, error) {
	out := new(SpecsItems)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetTrafficTop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APITrafficTopResponse, error) {
	out := new(APITrafficTopResponse)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetTrafficTop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetTrafficWhitelist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APITrafficWhitelistItems, error) {
	out := new(APITrafficWhitelistItems)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetTrafficWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autowpClient) GetVehicleTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VehicleTypeItems, error) {
	out := new(VehicleTypeItems)
	err := c.cc.Invoke(ctx, "/goautowp.Autowp/GetVehicleTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutowpServer is the server API for Autowp service.
// All implementations must embed UnimplementedAutowpServer
// for forward compatibility
type AutowpServer interface {
	AclEnforce(context.Context, *AclEnforceRequest) (*AclEnforceResult, error)
	AddToTrafficBlacklist(context.Context, *AddToTrafficBlacklistRequest) (*emptypb.Empty, error)
	AddToTrafficWhitelist(context.Context, *AddToTrafficWhitelistRequest) (*emptypb.Empty, error)
	CreateFeedback(context.Context, *APICreateFeedbackRequest) (*emptypb.Empty, error)
	DeleteFromTrafficBlacklist(context.Context, *DeleteFromTrafficBlacklistRequest) (*emptypb.Empty, error)
	DeleteFromTrafficWhitelist(context.Context, *DeleteFromTrafficWhitelistRequest) (*emptypb.Empty, error)
	GetBrandIcons(context.Context, *emptypb.Empty) (*BrandIcons, error)
	GetBrandVehicleTypes(context.Context, *GetBrandVehicleTypesRequest) (*BrandVehicleTypeItems, error)
	GetCommentVotes(context.Context, *GetCommentVotesRequest) (*CommentVoteItems, error)
	GetForumsUserSummary(context.Context, *emptypb.Empty) (*APIForumsUserSummary, error)
	GetIP(context.Context, *APIGetIPRequest) (*APIIP, error)
	GetMessagesNewCount(context.Context, *emptypb.Empty) (*APIMessageNewCount, error)
	GetMessagesSummary(context.Context, *emptypb.Empty) (*APIMessageSummary, error)
	GetPerspectives(context.Context, *emptypb.Empty) (*PerspectivesItems, error)
	GetPerspectivePages(context.Context, *emptypb.Empty) (*PerspectivePagesItems, error)
	GetReCaptchaConfig(context.Context, *emptypb.Empty) (*ReCaptchaConfig, error)
	GetSpecs(context.Context, *emptypb.Empty) (*SpecsItems, error)
	GetTrafficTop(context.Context, *emptypb.Empty) (*APITrafficTopResponse, error)
	GetTrafficWhitelist(context.Context, *emptypb.Empty) (*APITrafficWhitelistItems, error)
	GetVehicleTypes(context.Context, *emptypb.Empty) (*VehicleTypeItems, error)
	mustEmbedUnimplementedAutowpServer()
}

// UnimplementedAutowpServer must be embedded to have forward compatible implementations.
type UnimplementedAutowpServer struct {
}

func (UnimplementedAutowpServer) AclEnforce(context.Context, *AclEnforceRequest) (*AclEnforceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AclEnforce not implemented")
}
func (UnimplementedAutowpServer) AddToTrafficBlacklist(context.Context, *AddToTrafficBlacklistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToTrafficBlacklist not implemented")
}
func (UnimplementedAutowpServer) AddToTrafficWhitelist(context.Context, *AddToTrafficWhitelistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToTrafficWhitelist not implemented")
}
func (UnimplementedAutowpServer) CreateFeedback(context.Context, *APICreateFeedbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedback not implemented")
}
func (UnimplementedAutowpServer) DeleteFromTrafficBlacklist(context.Context, *DeleteFromTrafficBlacklistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromTrafficBlacklist not implemented")
}
func (UnimplementedAutowpServer) DeleteFromTrafficWhitelist(context.Context, *DeleteFromTrafficWhitelistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromTrafficWhitelist not implemented")
}
func (UnimplementedAutowpServer) GetBrandIcons(context.Context, *emptypb.Empty) (*BrandIcons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandIcons not implemented")
}
func (UnimplementedAutowpServer) GetBrandVehicleTypes(context.Context, *GetBrandVehicleTypesRequest) (*BrandVehicleTypeItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandVehicleTypes not implemented")
}
func (UnimplementedAutowpServer) GetCommentVotes(context.Context, *GetCommentVotesRequest) (*CommentVoteItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentVotes not implemented")
}
func (UnimplementedAutowpServer) GetForumsUserSummary(context.Context, *emptypb.Empty) (*APIForumsUserSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForumsUserSummary not implemented")
}
func (UnimplementedAutowpServer) GetIP(context.Context, *APIGetIPRequest) (*APIIP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIP not implemented")
}
func (UnimplementedAutowpServer) GetMessagesNewCount(context.Context, *emptypb.Empty) (*APIMessageNewCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesNewCount not implemented")
}
func (UnimplementedAutowpServer) GetMessagesSummary(context.Context, *emptypb.Empty) (*APIMessageSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesSummary not implemented")
}
func (UnimplementedAutowpServer) GetPerspectives(context.Context, *emptypb.Empty) (*PerspectivesItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerspectives not implemented")
}
func (UnimplementedAutowpServer) GetPerspectivePages(context.Context, *emptypb.Empty) (*PerspectivePagesItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerspectivePages not implemented")
}
func (UnimplementedAutowpServer) GetReCaptchaConfig(context.Context, *emptypb.Empty) (*ReCaptchaConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReCaptchaConfig not implemented")
}
func (UnimplementedAutowpServer) GetSpecs(context.Context, *emptypb.Empty) (*SpecsItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecs not implemented")
}
func (UnimplementedAutowpServer) GetTrafficTop(context.Context, *emptypb.Empty) (*APITrafficTopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrafficTop not implemented")
}
func (UnimplementedAutowpServer) GetTrafficWhitelist(context.Context, *emptypb.Empty) (*APITrafficWhitelistItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrafficWhitelist not implemented")
}
func (UnimplementedAutowpServer) GetVehicleTypes(context.Context, *emptypb.Empty) (*VehicleTypeItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicleTypes not implemented")
}
func (UnimplementedAutowpServer) mustEmbedUnimplementedAutowpServer() {}

// UnsafeAutowpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutowpServer will
// result in compilation errors.
type UnsafeAutowpServer interface {
	mustEmbedUnimplementedAutowpServer()
}

func RegisterAutowpServer(s grpc.ServiceRegistrar, srv AutowpServer) {
	s.RegisterService(&Autowp_ServiceDesc, srv)
}

func _Autowp_AclEnforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclEnforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).AclEnforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/AclEnforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).AclEnforce(ctx, req.(*AclEnforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_AddToTrafficBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToTrafficBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).AddToTrafficBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/AddToTrafficBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).AddToTrafficBlacklist(ctx, req.(*AddToTrafficBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_AddToTrafficWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToTrafficWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).AddToTrafficWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/AddToTrafficWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).AddToTrafficWhitelist(ctx, req.(*AddToTrafficWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_CreateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APICreateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).CreateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/CreateFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).CreateFeedback(ctx, req.(*APICreateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_DeleteFromTrafficBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromTrafficBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).DeleteFromTrafficBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/DeleteFromTrafficBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).DeleteFromTrafficBlacklist(ctx, req.(*DeleteFromTrafficBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_DeleteFromTrafficWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromTrafficWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).DeleteFromTrafficWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/DeleteFromTrafficWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).DeleteFromTrafficWhitelist(ctx, req.(*DeleteFromTrafficWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetBrandIcons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetBrandIcons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetBrandIcons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetBrandIcons(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetBrandVehicleTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandVehicleTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetBrandVehicleTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetBrandVehicleTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetBrandVehicleTypes(ctx, req.(*GetBrandVehicleTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetCommentVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetCommentVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetCommentVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetCommentVotes(ctx, req.(*GetCommentVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetForumsUserSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetForumsUserSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetForumsUserSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetForumsUserSummary(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetIP(ctx, req.(*APIGetIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetMessagesNewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetMessagesNewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetMessagesNewCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetMessagesNewCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetMessagesSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetMessagesSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetMessagesSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetMessagesSummary(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetPerspectives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetPerspectives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetPerspectives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetPerspectives(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetPerspectivePages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetPerspectivePages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetPerspectivePages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetPerspectivePages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetReCaptchaConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetReCaptchaConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetReCaptchaConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetReCaptchaConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetSpecs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetTrafficTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetTrafficTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetTrafficTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetTrafficTop(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetTrafficWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetTrafficWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetTrafficWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetTrafficWhitelist(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autowp_GetVehicleTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutowpServer).GetVehicleTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Autowp/GetVehicleTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutowpServer).GetVehicleTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Autowp_ServiceDesc is the grpc.ServiceDesc for Autowp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Autowp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Autowp",
	HandlerType: (*AutowpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AclEnforce",
			Handler:    _Autowp_AclEnforce_Handler,
		},
		{
			MethodName: "AddToTrafficBlacklist",
			Handler:    _Autowp_AddToTrafficBlacklist_Handler,
		},
		{
			MethodName: "AddToTrafficWhitelist",
			Handler:    _Autowp_AddToTrafficWhitelist_Handler,
		},
		{
			MethodName: "CreateFeedback",
			Handler:    _Autowp_CreateFeedback_Handler,
		},
		{
			MethodName: "DeleteFromTrafficBlacklist",
			Handler:    _Autowp_DeleteFromTrafficBlacklist_Handler,
		},
		{
			MethodName: "DeleteFromTrafficWhitelist",
			Handler:    _Autowp_DeleteFromTrafficWhitelist_Handler,
		},
		{
			MethodName: "GetBrandIcons",
			Handler:    _Autowp_GetBrandIcons_Handler,
		},
		{
			MethodName: "GetBrandVehicleTypes",
			Handler:    _Autowp_GetBrandVehicleTypes_Handler,
		},
		{
			MethodName: "GetCommentVotes",
			Handler:    _Autowp_GetCommentVotes_Handler,
		},
		{
			MethodName: "GetForumsUserSummary",
			Handler:    _Autowp_GetForumsUserSummary_Handler,
		},
		{
			MethodName: "GetIP",
			Handler:    _Autowp_GetIP_Handler,
		},
		{
			MethodName: "GetMessagesNewCount",
			Handler:    _Autowp_GetMessagesNewCount_Handler,
		},
		{
			MethodName: "GetMessagesSummary",
			Handler:    _Autowp_GetMessagesSummary_Handler,
		},
		{
			MethodName: "GetPerspectives",
			Handler:    _Autowp_GetPerspectives_Handler,
		},
		{
			MethodName: "GetPerspectivePages",
			Handler:    _Autowp_GetPerspectivePages_Handler,
		},
		{
			MethodName: "GetReCaptchaConfig",
			Handler:    _Autowp_GetReCaptchaConfig_Handler,
		},
		{
			MethodName: "GetSpecs",
			Handler:    _Autowp_GetSpecs_Handler,
		},
		{
			MethodName: "GetTrafficTop",
			Handler:    _Autowp_GetTrafficTop_Handler,
		},
		{
			MethodName: "GetTrafficWhitelist",
			Handler:    _Autowp_GetTrafficWhitelist_Handler,
		},
		{
			MethodName: "GetVehicleTypes",
			Handler:    _Autowp_GetVehicleTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

// ContactsClient is the client API for Contacts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactsClient interface {
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*Contact, error)
	GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*ContactItems, error)
}

type contactsClient struct {
	cc grpc.ClientConnInterface
}

func NewContactsClient(cc grpc.ClientConnInterface) ContactsClient {
	return &contactsClient{cc}
}

func (c *contactsClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Contacts/CreateContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Contacts/DeleteContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/goautowp.Contacts/GetContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*ContactItems, error) {
	out := new(ContactItems)
	err := c.cc.Invoke(ctx, "/goautowp.Contacts/GetContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactsServer is the server API for Contacts service.
// All implementations must embed UnimplementedContactsServer
// for forward compatibility
type ContactsServer interface {
	CreateContact(context.Context, *CreateContactRequest) (*emptypb.Empty, error)
	DeleteContact(context.Context, *DeleteContactRequest) (*emptypb.Empty, error)
	GetContact(context.Context, *GetContactRequest) (*Contact, error)
	GetContacts(context.Context, *GetContactsRequest) (*ContactItems, error)
	mustEmbedUnimplementedContactsServer()
}

// UnimplementedContactsServer must be embedded to have forward compatible implementations.
type UnimplementedContactsServer struct {
}

func (UnimplementedContactsServer) CreateContact(context.Context, *CreateContactRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedContactsServer) DeleteContact(context.Context, *DeleteContactRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedContactsServer) GetContact(context.Context, *GetContactRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedContactsServer) GetContacts(context.Context, *GetContactsRequest) (*ContactItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (UnimplementedContactsServer) mustEmbedUnimplementedContactsServer() {}

// UnsafeContactsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactsServer will
// result in compilation errors.
type UnsafeContactsServer interface {
	mustEmbedUnimplementedContactsServer()
}

func RegisterContactsServer(s grpc.ServiceRegistrar, srv ContactsServer) {
	s.RegisterService(&Contacts_ServiceDesc, srv)
}

func _Contacts_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Contacts/CreateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Contacts/DeleteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Contacts/GetContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).GetContact(ctx, req.(*GetContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Contacts/GetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).GetContacts(ctx, req.(*GetContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Contacts_ServiceDesc is the grpc.ServiceDesc for Contacts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Contacts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Contacts",
	HandlerType: (*ContactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContact",
			Handler:    _Contacts_CreateContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _Contacts_DeleteContact_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _Contacts_GetContact_Handler,
		},
		{
			MethodName: "GetContacts",
			Handler:    _Contacts_GetContacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	CreateUser(ctx context.Context, in *APICreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, in *APIUpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUser(ctx context.Context, in *APIDeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUser(ctx context.Context, in *APIGetUserRequest, opts ...grpc.CallOption) (*APIUser, error)
	EmailChange(ctx context.Context, in *APIEmailChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EmailChangeConfirm(ctx context.Context, in *APIEmailChangeConfirmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PasswordRecovery(ctx context.Context, in *APIPasswordRecoveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PasswordRecoveryCheckCode(ctx context.Context, in *APIPasswordRecoveryCheckCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PasswordRecoveryConfirm(ctx context.Context, in *APIPasswordRecoveryConfirmRequest, opts ...grpc.CallOption) (*APIPasswordRecoveryConfirmResponse, error)
	SetPassword(ctx context.Context, in *APISetPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) CreateUser(ctx context.Context, in *APICreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Users/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateUser(ctx context.Context, in *APIUpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Users/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteUser(ctx context.Context, in *APIDeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Users/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUser(ctx context.Context, in *APIGetUserRequest, opts ...grpc.CallOption) (*APIUser, error) {
	out := new(APIUser)
	err := c.cc.Invoke(ctx, "/goautowp.Users/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) EmailChange(ctx context.Context, in *APIEmailChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Users/EmailChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) EmailChangeConfirm(ctx context.Context, in *APIEmailChangeConfirmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Users/EmailChangeConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) PasswordRecovery(ctx context.Context, in *APIPasswordRecoveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Users/PasswordRecovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) PasswordRecoveryCheckCode(ctx context.Context, in *APIPasswordRecoveryCheckCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Users/PasswordRecoveryCheckCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) PasswordRecoveryConfirm(ctx context.Context, in *APIPasswordRecoveryConfirmRequest, opts ...grpc.CallOption) (*APIPasswordRecoveryConfirmResponse, error) {
	out := new(APIPasswordRecoveryConfirmResponse)
	err := c.cc.Invoke(ctx, "/goautowp.Users/PasswordRecoveryConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SetPassword(ctx context.Context, in *APISetPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goautowp.Users/SetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	CreateUser(context.Context, *APICreateUserRequest) (*emptypb.Empty, error)
	UpdateUser(context.Context, *APIUpdateUserRequest) (*emptypb.Empty, error)
	DeleteUser(context.Context, *APIDeleteUserRequest) (*emptypb.Empty, error)
	GetUser(context.Context, *APIGetUserRequest) (*APIUser, error)
	EmailChange(context.Context, *APIEmailChangeRequest) (*emptypb.Empty, error)
	EmailChangeConfirm(context.Context, *APIEmailChangeConfirmRequest) (*emptypb.Empty, error)
	PasswordRecovery(context.Context, *APIPasswordRecoveryRequest) (*emptypb.Empty, error)
	PasswordRecoveryCheckCode(context.Context, *APIPasswordRecoveryCheckCodeRequest) (*emptypb.Empty, error)
	PasswordRecoveryConfirm(context.Context, *APIPasswordRecoveryConfirmRequest) (*APIPasswordRecoveryConfirmResponse, error)
	SetPassword(context.Context, *APISetPasswordRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) CreateUser(context.Context, *APICreateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServer) UpdateUser(context.Context, *APIUpdateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUsersServer) DeleteUser(context.Context, *APIDeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUsersServer) GetUser(context.Context, *APIGetUserRequest) (*APIUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersServer) EmailChange(context.Context, *APIEmailChangeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailChange not implemented")
}
func (UnimplementedUsersServer) EmailChangeConfirm(context.Context, *APIEmailChangeConfirmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailChangeConfirm not implemented")
}
func (UnimplementedUsersServer) PasswordRecovery(context.Context, *APIPasswordRecoveryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordRecovery not implemented")
}
func (UnimplementedUsersServer) PasswordRecoveryCheckCode(context.Context, *APIPasswordRecoveryCheckCodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordRecoveryCheckCode not implemented")
}
func (UnimplementedUsersServer) PasswordRecoveryConfirm(context.Context, *APIPasswordRecoveryConfirmRequest) (*APIPasswordRecoveryConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordRecoveryConfirm not implemented")
}
func (UnimplementedUsersServer) SetPassword(context.Context, *APISetPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPassword not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APICreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Users/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUser(ctx, req.(*APICreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIUpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Users/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateUser(ctx, req.(*APIUpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIDeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Users/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteUser(ctx, req.(*APIDeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIGetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Users/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUser(ctx, req.(*APIGetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_EmailChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIEmailChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).EmailChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Users/EmailChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).EmailChange(ctx, req.(*APIEmailChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_EmailChangeConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIEmailChangeConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).EmailChangeConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Users/EmailChangeConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).EmailChangeConfirm(ctx, req.(*APIEmailChangeConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_PasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIPasswordRecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).PasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Users/PasswordRecovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).PasswordRecovery(ctx, req.(*APIPasswordRecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_PasswordRecoveryCheckCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIPasswordRecoveryCheckCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).PasswordRecoveryCheckCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Users/PasswordRecoveryCheckCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).PasswordRecoveryCheckCode(ctx, req.(*APIPasswordRecoveryCheckCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_PasswordRecoveryConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIPasswordRecoveryConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).PasswordRecoveryConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Users/PasswordRecoveryConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).PasswordRecoveryConfirm(ctx, req.(*APIPasswordRecoveryConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APISetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Users/SetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SetPassword(ctx, req.(*APISetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Users_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Users_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Users_DeleteUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Users_GetUser_Handler,
		},
		{
			MethodName: "EmailChange",
			Handler:    _Users_EmailChange_Handler,
		},
		{
			MethodName: "EmailChangeConfirm",
			Handler:    _Users_EmailChangeConfirm_Handler,
		},
		{
			MethodName: "PasswordRecovery",
			Handler:    _Users_PasswordRecovery_Handler,
		},
		{
			MethodName: "PasswordRecoveryCheckCode",
			Handler:    _Users_PasswordRecoveryCheckCode_Handler,
		},
		{
			MethodName: "PasswordRecoveryConfirm",
			Handler:    _Users_PasswordRecoveryConfirm_Handler,
		},
		{
			MethodName: "SetPassword",
			Handler:    _Users_SetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

// ItemsClient is the client API for Items service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemsClient interface {
	GetTopBrandsList(ctx context.Context, in *GetTopBrandsListRequest, opts ...grpc.CallOption) (*APITopBrandsList, error)
	GetTopPersonsList(ctx context.Context, in *GetTopPersonsListRequest, opts ...grpc.CallOption) (*APITopPersonsList, error)
	GetTopFactoriesList(ctx context.Context, in *GetTopFactoriesListRequest, opts ...grpc.CallOption) (*APITopFactoriesList, error)
	GetTopCategoriesList(ctx context.Context, in *GetTopCategoriesListRequest, opts ...grpc.CallOption) (*APITopCategoriesList, error)
	GetTopTwinsBrandsList(ctx context.Context, in *GetTopTwinsBrandsListRequest, opts ...grpc.CallOption) (*APITopTwinsBrandsList, error)
	List(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*APIItemList, error)
}

type itemsClient struct {
	cc grpc.ClientConnInterface
}

func NewItemsClient(cc grpc.ClientConnInterface) ItemsClient {
	return &itemsClient{cc}
}

func (c *itemsClient) GetTopBrandsList(ctx context.Context, in *GetTopBrandsListRequest, opts ...grpc.CallOption) (*APITopBrandsList, error) {
	out := new(APITopBrandsList)
	err := c.cc.Invoke(ctx, "/goautowp.Items/GetTopBrandsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetTopPersonsList(ctx context.Context, in *GetTopPersonsListRequest, opts ...grpc.CallOption) (*APITopPersonsList, error) {
	out := new(APITopPersonsList)
	err := c.cc.Invoke(ctx, "/goautowp.Items/GetTopPersonsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetTopFactoriesList(ctx context.Context, in *GetTopFactoriesListRequest, opts ...grpc.CallOption) (*APITopFactoriesList, error) {
	out := new(APITopFactoriesList)
	err := c.cc.Invoke(ctx, "/goautowp.Items/GetTopFactoriesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetTopCategoriesList(ctx context.Context, in *GetTopCategoriesListRequest, opts ...grpc.CallOption) (*APITopCategoriesList, error) {
	out := new(APITopCategoriesList)
	err := c.cc.Invoke(ctx, "/goautowp.Items/GetTopCategoriesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetTopTwinsBrandsList(ctx context.Context, in *GetTopTwinsBrandsListRequest, opts ...grpc.CallOption) (*APITopTwinsBrandsList, error) {
	out := new(APITopTwinsBrandsList)
	err := c.cc.Invoke(ctx, "/goautowp.Items/GetTopTwinsBrandsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) List(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*APIItemList, error) {
	out := new(APIItemList)
	err := c.cc.Invoke(ctx, "/goautowp.Items/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemsServer is the server API for Items service.
// All implementations must embed UnimplementedItemsServer
// for forward compatibility
type ItemsServer interface {
	GetTopBrandsList(context.Context, *GetTopBrandsListRequest) (*APITopBrandsList, error)
	GetTopPersonsList(context.Context, *GetTopPersonsListRequest) (*APITopPersonsList, error)
	GetTopFactoriesList(context.Context, *GetTopFactoriesListRequest) (*APITopFactoriesList, error)
	GetTopCategoriesList(context.Context, *GetTopCategoriesListRequest) (*APITopCategoriesList, error)
	GetTopTwinsBrandsList(context.Context, *GetTopTwinsBrandsListRequest) (*APITopTwinsBrandsList, error)
	List(context.Context, *ListItemsRequest) (*APIItemList, error)
	mustEmbedUnimplementedItemsServer()
}

// UnimplementedItemsServer must be embedded to have forward compatible implementations.
type UnimplementedItemsServer struct {
}

func (UnimplementedItemsServer) GetTopBrandsList(context.Context, *GetTopBrandsListRequest) (*APITopBrandsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopBrandsList not implemented")
}
func (UnimplementedItemsServer) GetTopPersonsList(context.Context, *GetTopPersonsListRequest) (*APITopPersonsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopPersonsList not implemented")
}
func (UnimplementedItemsServer) GetTopFactoriesList(context.Context, *GetTopFactoriesListRequest) (*APITopFactoriesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopFactoriesList not implemented")
}
func (UnimplementedItemsServer) GetTopCategoriesList(context.Context, *GetTopCategoriesListRequest) (*APITopCategoriesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopCategoriesList not implemented")
}
func (UnimplementedItemsServer) GetTopTwinsBrandsList(context.Context, *GetTopTwinsBrandsListRequest) (*APITopTwinsBrandsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopTwinsBrandsList not implemented")
}
func (UnimplementedItemsServer) List(context.Context, *ListItemsRequest) (*APIItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedItemsServer) mustEmbedUnimplementedItemsServer() {}

// UnsafeItemsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemsServer will
// result in compilation errors.
type UnsafeItemsServer interface {
	mustEmbedUnimplementedItemsServer()
}

func RegisterItemsServer(s grpc.ServiceRegistrar, srv ItemsServer) {
	s.RegisterService(&Items_ServiceDesc, srv)
}

func _Items_GetTopBrandsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopBrandsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetTopBrandsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Items/GetTopBrandsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetTopBrandsList(ctx, req.(*GetTopBrandsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetTopPersonsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopPersonsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetTopPersonsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Items/GetTopPersonsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetTopPersonsList(ctx, req.(*GetTopPersonsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetTopFactoriesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopFactoriesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetTopFactoriesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Items/GetTopFactoriesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetTopFactoriesList(ctx, req.(*GetTopFactoriesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetTopCategoriesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopCategoriesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetTopCategoriesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Items/GetTopCategoriesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetTopCategoriesList(ctx, req.(*GetTopCategoriesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetTopTwinsBrandsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopTwinsBrandsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetTopTwinsBrandsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Items/GetTopTwinsBrandsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetTopTwinsBrandsList(ctx, req.(*GetTopTwinsBrandsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goautowp.Items/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).List(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Items_ServiceDesc is the grpc.ServiceDesc for Items service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Items_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goautowp.Items",
	HandlerType: (*ItemsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopBrandsList",
			Handler:    _Items_GetTopBrandsList_Handler,
		},
		{
			MethodName: "GetTopPersonsList",
			Handler:    _Items_GetTopPersonsList_Handler,
		},
		{
			MethodName: "GetTopFactoriesList",
			Handler:    _Items_GetTopFactoriesList_Handler,
		},
		{
			MethodName: "GetTopCategoriesList",
			Handler:    _Items_GetTopCategoriesList_Handler,
		},
		{
			MethodName: "GetTopTwinsBrandsList",
			Handler:    _Items_GetTopTwinsBrandsList_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Items_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}
