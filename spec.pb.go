// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.27.3
// source: spec.proto

package goautowp

import (
	errdetails "google.golang.org/genproto/googleapis/rpc/errdetails"
	date "google.golang.org/genproto/googleapis/type/date"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PictureItemType int32

const (
	PictureItemType_PICTURE_ITEM_UNKNOWN    PictureItemType = 0
	PictureItemType_PICTURE_ITEM_CONTENT    PictureItemType = 1
	PictureItemType_PICTURE_ITEM_AUTHOR     PictureItemType = 2
	PictureItemType_PICTURE_ITEM_COPYRIGHTS PictureItemType = 3
)

// Enum value maps for PictureItemType.
var (
	PictureItemType_name = map[int32]string{
		0: "PICTURE_ITEM_UNKNOWN",
		1: "PICTURE_ITEM_CONTENT",
		2: "PICTURE_ITEM_AUTHOR",
		3: "PICTURE_ITEM_COPYRIGHTS",
	}
	PictureItemType_value = map[string]int32{
		"PICTURE_ITEM_UNKNOWN":    0,
		"PICTURE_ITEM_CONTENT":    1,
		"PICTURE_ITEM_AUTHOR":     2,
		"PICTURE_ITEM_COPYRIGHTS": 3,
	}
)

func (x PictureItemType) Enum() *PictureItemType {
	p := new(PictureItemType)
	*p = x
	return p
}

func (x PictureItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PictureItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[0].Descriptor()
}

func (PictureItemType) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[0]
}

func (x PictureItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PictureItemType.Descriptor instead.
func (PictureItemType) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{0}
}

type ItemType int32

const (
	ItemType_ITEM_TYPE_UNKNOWN   ItemType = 0
	ItemType_ITEM_TYPE_VEHICLE   ItemType = 1
	ItemType_ITEM_TYPE_ENGINE    ItemType = 2
	ItemType_ITEM_TYPE_CATEGORY  ItemType = 3
	ItemType_ITEM_TYPE_TWINS     ItemType = 4
	ItemType_ITEM_TYPE_BRAND     ItemType = 5
	ItemType_ITEM_TYPE_FACTORY   ItemType = 6
	ItemType_ITEM_TYPE_MUSEUM    ItemType = 7
	ItemType_ITEM_TYPE_PERSON    ItemType = 8
	ItemType_ITEM_TYPE_COPYRIGHT ItemType = 9
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0: "ITEM_TYPE_UNKNOWN",
		1: "ITEM_TYPE_VEHICLE",
		2: "ITEM_TYPE_ENGINE",
		3: "ITEM_TYPE_CATEGORY",
		4: "ITEM_TYPE_TWINS",
		5: "ITEM_TYPE_BRAND",
		6: "ITEM_TYPE_FACTORY",
		7: "ITEM_TYPE_MUSEUM",
		8: "ITEM_TYPE_PERSON",
		9: "ITEM_TYPE_COPYRIGHT",
	}
	ItemType_value = map[string]int32{
		"ITEM_TYPE_UNKNOWN":   0,
		"ITEM_TYPE_VEHICLE":   1,
		"ITEM_TYPE_ENGINE":    2,
		"ITEM_TYPE_CATEGORY":  3,
		"ITEM_TYPE_TWINS":     4,
		"ITEM_TYPE_BRAND":     5,
		"ITEM_TYPE_FACTORY":   6,
		"ITEM_TYPE_MUSEUM":    7,
		"ITEM_TYPE_PERSON":    8,
		"ITEM_TYPE_COPYRIGHT": 9,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[1].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[1]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{1}
}

type ItemParentType int32

const (
	ItemParentType_ITEM_TYPE_DEFAULT ItemParentType = 0
	ItemParentType_ITEM_TYPE_TUNING  ItemParentType = 1
	ItemParentType_ITEM_TYPE_SPORT   ItemParentType = 2
	ItemParentType_ITEM_TYPE_DESIGN  ItemParentType = 3
)

// Enum value maps for ItemParentType.
var (
	ItemParentType_name = map[int32]string{
		0: "ITEM_TYPE_DEFAULT",
		1: "ITEM_TYPE_TUNING",
		2: "ITEM_TYPE_SPORT",
		3: "ITEM_TYPE_DESIGN",
	}
	ItemParentType_value = map[string]int32{
		"ITEM_TYPE_DEFAULT": 0,
		"ITEM_TYPE_TUNING":  1,
		"ITEM_TYPE_SPORT":   2,
		"ITEM_TYPE_DESIGN":  3,
	}
)

func (x ItemParentType) Enum() *ItemParentType {
	p := new(ItemParentType)
	*p = x
	return p
}

func (x ItemParentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemParentType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[2].Descriptor()
}

func (ItemParentType) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[2]
}

func (x ItemParentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemParentType.Descriptor instead.
func (ItemParentType) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{2}
}

type PictureStatus int32

const (
	PictureStatus_PICTURE_STATUS_UNKNOWN  PictureStatus = 0
	PictureStatus_PICTURE_STATUS_ACCEPTED PictureStatus = 1
	PictureStatus_PICTURE_STATUS_REMOVING PictureStatus = 2
	PictureStatus_PICTURE_STATUS_REMOVED  PictureStatus = 3
	PictureStatus_PICTURE_STATUS_INBOX    PictureStatus = 4
)

// Enum value maps for PictureStatus.
var (
	PictureStatus_name = map[int32]string{
		0: "PICTURE_STATUS_UNKNOWN",
		1: "PICTURE_STATUS_ACCEPTED",
		2: "PICTURE_STATUS_REMOVING",
		3: "PICTURE_STATUS_REMOVED",
		4: "PICTURE_STATUS_INBOX",
	}
	PictureStatus_value = map[string]int32{
		"PICTURE_STATUS_UNKNOWN":  0,
		"PICTURE_STATUS_ACCEPTED": 1,
		"PICTURE_STATUS_REMOVING": 2,
		"PICTURE_STATUS_REMOVED":  3,
		"PICTURE_STATUS_INBOX":    4,
	}
)

func (x PictureStatus) Enum() *PictureStatus {
	p := new(PictureStatus)
	*p = x
	return p
}

func (x PictureStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PictureStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[3].Descriptor()
}

func (PictureStatus) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[3]
}

func (x PictureStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PictureStatus.Descriptor instead.
func (PictureStatus) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{3}
}

type CommentsType int32

const (
	CommentsType_UNKNOWN          CommentsType = 0
	CommentsType_PICTURES_TYPE_ID CommentsType = 1
	CommentsType_ITEM_TYPE_ID     CommentsType = 2
	CommentsType_VOTINGS_TYPE_ID  CommentsType = 3
	CommentsType_ARTICLES_TYPE_ID CommentsType = 4
	CommentsType_FORUMS_TYPE_ID   CommentsType = 5
)

// Enum value maps for CommentsType.
var (
	CommentsType_name = map[int32]string{
		0: "UNKNOWN",
		1: "PICTURES_TYPE_ID",
		2: "ITEM_TYPE_ID",
		3: "VOTINGS_TYPE_ID",
		4: "ARTICLES_TYPE_ID",
		5: "FORUMS_TYPE_ID",
	}
	CommentsType_value = map[string]int32{
		"UNKNOWN":          0,
		"PICTURES_TYPE_ID": 1,
		"ITEM_TYPE_ID":     2,
		"VOTINGS_TYPE_ID":  3,
		"ARTICLES_TYPE_ID": 4,
		"FORUMS_TYPE_ID":   5,
	}
)

func (x CommentsType) Enum() *CommentsType {
	p := new(CommentsType)
	*p = x
	return p
}

func (x CommentsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentsType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[4].Descriptor()
}

func (CommentsType) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[4]
}

func (x CommentsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommentsType.Descriptor instead.
func (CommentsType) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{4}
}

type ModeratorAttention int32

const (
	ModeratorAttention_NONE     ModeratorAttention = 0
	ModeratorAttention_REQUIRED ModeratorAttention = 1
	ModeratorAttention_COMPLETE ModeratorAttention = 2
)

// Enum value maps for ModeratorAttention.
var (
	ModeratorAttention_name = map[int32]string{
		0: "NONE",
		1: "REQUIRED",
		2: "COMPLETE",
	}
	ModeratorAttention_value = map[string]int32{
		"NONE":     0,
		"REQUIRED": 1,
		"COMPLETE": 2,
	}
)

func (x ModeratorAttention) Enum() *ModeratorAttention {
	p := new(ModeratorAttention)
	*p = x
	return p
}

func (x ModeratorAttention) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModeratorAttention) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[5].Descriptor()
}

func (ModeratorAttention) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[5]
}

func (x ModeratorAttention) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModeratorAttention.Descriptor instead.
func (ModeratorAttention) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{5}
}

type AttrAttributeType_ID int32

const (
	AttrAttributeType_UNKNOWN AttrAttributeType_ID = 0
	AttrAttributeType_STRING  AttrAttributeType_ID = 1
	AttrAttributeType_INTEGER AttrAttributeType_ID = 2
	AttrAttributeType_FLOAT   AttrAttributeType_ID = 3
	AttrAttributeType_TEXT    AttrAttributeType_ID = 4
	AttrAttributeType_BOOLEAN AttrAttributeType_ID = 5
	AttrAttributeType_LIST    AttrAttributeType_ID = 6
	AttrAttributeType_TREE    AttrAttributeType_ID = 7
)

// Enum value maps for AttrAttributeType_ID.
var (
	AttrAttributeType_ID_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRING",
		2: "INTEGER",
		3: "FLOAT",
		4: "TEXT",
		5: "BOOLEAN",
		6: "LIST",
		7: "TREE",
	}
	AttrAttributeType_ID_value = map[string]int32{
		"UNKNOWN": 0,
		"STRING":  1,
		"INTEGER": 2,
		"FLOAT":   3,
		"TEXT":    4,
		"BOOLEAN": 5,
		"LIST":    6,
		"TREE":    7,
	}
)

func (x AttrAttributeType_ID) Enum() *AttrAttributeType_ID {
	p := new(AttrAttributeType_ID)
	*p = x
	return p
}

func (x AttrAttributeType_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttrAttributeType_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[6].Descriptor()
}

func (AttrAttributeType_ID) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[6]
}

func (x AttrAttributeType_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttrAttributeType_ID.Descriptor instead.
func (AttrAttributeType_ID) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{12, 0}
}

type AttrConflictsRequest_Filter int32

const (
	AttrConflictsRequest_ALL                  AttrConflictsRequest_Filter = 0
	AttrConflictsRequest_DO_NOT_AGREE_WITH_ME AttrConflictsRequest_Filter = 1
	AttrConflictsRequest_I_DISAGREE           AttrConflictsRequest_Filter = 2
	AttrConflictsRequest_MINUS_WEIGHT         AttrConflictsRequest_Filter = 3
)

// Enum value maps for AttrConflictsRequest_Filter.
var (
	AttrConflictsRequest_Filter_name = map[int32]string{
		0: "ALL",
		1: "DO_NOT_AGREE_WITH_ME",
		2: "I_DISAGREE",
		3: "MINUS_WEIGHT",
	}
	AttrConflictsRequest_Filter_value = map[string]int32{
		"ALL":                  0,
		"DO_NOT_AGREE_WITH_ME": 1,
		"I_DISAGREE":           2,
		"MINUS_WEIGHT":         3,
	}
)

func (x AttrConflictsRequest_Filter) Enum() *AttrConflictsRequest_Filter {
	p := new(AttrConflictsRequest_Filter)
	*p = x
	return p
}

func (x AttrConflictsRequest_Filter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttrConflictsRequest_Filter) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[7].Descriptor()
}

func (AttrConflictsRequest_Filter) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[7]
}

func (x AttrConflictsRequest_Filter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttrConflictsRequest_Filter.Descriptor instead.
func (AttrConflictsRequest_Filter) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{22, 0}
}

type PulseRequest_Period int32

const (
	PulseRequest_DEFAULT PulseRequest_Period = 0
	PulseRequest_YEAR    PulseRequest_Period = 1
	PulseRequest_MONTH   PulseRequest_Period = 2
)

// Enum value maps for PulseRequest_Period.
var (
	PulseRequest_Period_name = map[int32]string{
		0: "DEFAULT",
		1: "YEAR",
		2: "MONTH",
	}
	PulseRequest_Period_value = map[string]int32{
		"DEFAULT": 0,
		"YEAR":    1,
		"MONTH":   2,
	}
)

func (x PulseRequest_Period) Enum() *PulseRequest_Period {
	p := new(PulseRequest_Period)
	*p = x
	return p
}

func (x PulseRequest_Period) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PulseRequest_Period) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[8].Descriptor()
}

func (PulseRequest_Period) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[8]
}

func (x PulseRequest_Period) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PulseRequest_Period.Descriptor instead.
func (PulseRequest_Period) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{32, 0}
}

type CommentVote_VoteValue int32

const (
	CommentVote_UNKNOWN  CommentVote_VoteValue = 0
	CommentVote_POSITIVE CommentVote_VoteValue = -1
	CommentVote_NEGATIVE CommentVote_VoteValue = 1
)

// Enum value maps for CommentVote_VoteValue.
var (
	CommentVote_VoteValue_name = map[int32]string{
		0:  "UNKNOWN",
		-1: "POSITIVE",
		1:  "NEGATIVE",
	}
	CommentVote_VoteValue_value = map[string]int32{
		"UNKNOWN":  0,
		"POSITIVE": -1,
		"NEGATIVE": 1,
	}
)

func (x CommentVote_VoteValue) Enum() *CommentVote_VoteValue {
	p := new(CommentVote_VoteValue)
	*p = x
	return p
}

func (x CommentVote_VoteValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentVote_VoteValue) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[9].Descriptor()
}

func (CommentVote_VoteValue) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[9]
}

func (x CommentVote_VoteValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommentVote_VoteValue.Descriptor instead.
func (CommentVote_VoteValue) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{61, 0}
}

type APIBrandsListLine_Category int32

const (
	APIBrandsListLine_DEFAULT  APIBrandsListLine_Category = 0
	APIBrandsListLine_NUMBER   APIBrandsListLine_Category = 1
	APIBrandsListLine_CYRILLIC APIBrandsListLine_Category = 2
	APIBrandsListLine_LATIN    APIBrandsListLine_Category = 3
)

// Enum value maps for APIBrandsListLine_Category.
var (
	APIBrandsListLine_Category_name = map[int32]string{
		0: "DEFAULT",
		1: "NUMBER",
		2: "CYRILLIC",
		3: "LATIN",
	}
	APIBrandsListLine_Category_value = map[string]int32{
		"DEFAULT":  0,
		"NUMBER":   1,
		"CYRILLIC": 2,
		"LATIN":    3,
	}
)

func (x APIBrandsListLine_Category) Enum() *APIBrandsListLine_Category {
	p := new(APIBrandsListLine_Category)
	*p = x
	return p
}

func (x APIBrandsListLine_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APIBrandsListLine_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[10].Descriptor()
}

func (APIBrandsListLine_Category) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[10]
}

func (x APIBrandsListLine_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APIBrandsListLine_Category.Descriptor instead.
func (APIBrandsListLine_Category) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{102, 0}
}

type ListItemsRequest_Order int32

const (
	ListItemsRequest_DEFAULT  ListItemsRequest_Order = 0
	ListItemsRequest_NAME_NAT ListItemsRequest_Order = 1
	ListItemsRequest_NAME     ListItemsRequest_Order = 2
)

// Enum value maps for ListItemsRequest_Order.
var (
	ListItemsRequest_Order_name = map[int32]string{
		0: "DEFAULT",
		1: "NAME_NAT",
		2: "NAME",
	}
	ListItemsRequest_Order_value = map[string]int32{
		"DEFAULT":  0,
		"NAME_NAT": 1,
		"NAME":     2,
	}
)

func (x ListItemsRequest_Order) Enum() *ListItemsRequest_Order {
	p := new(ListItemsRequest_Order)
	*p = x
	return p
}

func (x ListItemsRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListItemsRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[11].Descriptor()
}

func (ListItemsRequest_Order) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[11]
}

func (x ListItemsRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListItemsRequest_Order.Descriptor instead.
func (ListItemsRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{125, 0}
}

type GetMessagesRequest_Order int32

const (
	GetMessagesRequest_DEFAULT   GetMessagesRequest_Order = 0
	GetMessagesRequest_VOTE_DESC GetMessagesRequest_Order = 1
	GetMessagesRequest_VOTE_ASC  GetMessagesRequest_Order = 2
	GetMessagesRequest_DATE_DESC GetMessagesRequest_Order = 3
	GetMessagesRequest_DATE_ASC  GetMessagesRequest_Order = 4
)

// Enum value maps for GetMessagesRequest_Order.
var (
	GetMessagesRequest_Order_name = map[int32]string{
		0: "DEFAULT",
		1: "VOTE_DESC",
		2: "VOTE_ASC",
		3: "DATE_DESC",
		4: "DATE_ASC",
	}
	GetMessagesRequest_Order_value = map[string]int32{
		"DEFAULT":   0,
		"VOTE_DESC": 1,
		"VOTE_ASC":  2,
		"DATE_DESC": 3,
		"DATE_ASC":  4,
	}
)

func (x GetMessagesRequest_Order) Enum() *GetMessagesRequest_Order {
	p := new(GetMessagesRequest_Order)
	*p = x
	return p
}

func (x GetMessagesRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMessagesRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[12].Descriptor()
}

func (GetMessagesRequest_Order) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[12]
}

func (x GetMessagesRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMessagesRequest_Order.Descriptor instead.
func (GetMessagesRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{226, 0}
}

type ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetryInfo           *errdetails.RetryInfo           `protobuf:"bytes,1,opt,name=retryInfo,proto3" json:"retryInfo,omitempty"`
	DebugInfo           *errdetails.DebugInfo           `protobuf:"bytes,2,opt,name=debugInfo,proto3" json:"debugInfo,omitempty"`
	QuotaFailure        *errdetails.QuotaFailure        `protobuf:"bytes,3,opt,name=quotaFailure,proto3" json:"quotaFailure,omitempty"`
	PreconditionFailure *errdetails.PreconditionFailure `protobuf:"bytes,4,opt,name=preconditionFailure,proto3" json:"preconditionFailure,omitempty"`
	BadRequest          *errdetails.BadRequest          `protobuf:"bytes,5,opt,name=badRequest,proto3" json:"badRequest,omitempty"`
	RequestInfo         *errdetails.RequestInfo         `protobuf:"bytes,6,opt,name=requestInfo,proto3" json:"requestInfo,omitempty"`
	Help                *errdetails.Help                `protobuf:"bytes,7,opt,name=help,proto3" json:"help,omitempty"`
	LocalizedMessage    *errdetails.LocalizedMessage    `protobuf:"bytes,8,opt,name=localizedMessage,proto3" json:"localizedMessage,omitempty"`
}

func (x *ErrorDetails) Reset() {
	*x = ErrorDetails{}
	mi := &file_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails) ProtoMessage() {}

func (x *ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails.ProtoReflect.Descriptor instead.
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorDetails) GetRetryInfo() *errdetails.RetryInfo {
	if x != nil {
		return x.RetryInfo
	}
	return nil
}

func (x *ErrorDetails) GetDebugInfo() *errdetails.DebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *ErrorDetails) GetQuotaFailure() *errdetails.QuotaFailure {
	if x != nil {
		return x.QuotaFailure
	}
	return nil
}

func (x *ErrorDetails) GetPreconditionFailure() *errdetails.PreconditionFailure {
	if x != nil {
		return x.PreconditionFailure
	}
	return nil
}

func (x *ErrorDetails) GetBadRequest() *errdetails.BadRequest {
	if x != nil {
		return x.BadRequest
	}
	return nil
}

func (x *ErrorDetails) GetRequestInfo() *errdetails.RequestInfo {
	if x != nil {
		return x.RequestInfo
	}
	return nil
}

func (x *ErrorDetails) GetHelp() *errdetails.Help {
	if x != nil {
		return x.Help
	}
	return nil
}

func (x *ErrorDetails) GetLocalizedMessage() *errdetails.LocalizedMessage {
	if x != nil {
		return x.LocalizedMessage
	}
	return nil
}

type AttrAttributeID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AttrAttributeID) Reset() {
	*x = AttrAttributeID{}
	mi := &file_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrAttributeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrAttributeID) ProtoMessage() {}

func (x *AttrAttributeID) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrAttributeID.ProtoReflect.Descriptor instead.
func (*AttrAttributeID) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AttrAttributeID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AttrAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId   int64 `protobuf:"varint,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	ParentId int64 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *AttrAttributesRequest) Reset() {
	*x = AttrAttributesRequest{}
	mi := &file_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrAttributesRequest) ProtoMessage() {}

func (x *AttrAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrAttributesRequest.ProtoReflect.Descriptor instead.
func (*AttrAttributesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{2}
}

func (x *AttrAttributesRequest) GetZoneId() int64 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

func (x *AttrAttributesRequest) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type AttrAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AttrAttribute `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AttrAttributesResponse) Reset() {
	*x = AttrAttributesResponse{}
	mi := &file_spec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrAttributesResponse) ProtoMessage() {}

func (x *AttrAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrAttributesResponse.ProtoReflect.Descriptor instead.
func (*AttrAttributesResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{3}
}

func (x *AttrAttributesResponse) GetItems() []*AttrAttribute {
	if x != nil {
		return x.Items
	}
	return nil
}

type AttrAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId    int64                `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name        string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TypeId      AttrAttributeType_ID `protobuf:"varint,5,opt,name=type_id,json=typeId,proto3,enum=goautowp.AttrAttributeType_ID" json:"type_id,omitempty"`
	UnitId      int64                `protobuf:"varint,6,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	IsMultiple  bool                 `protobuf:"varint,7,opt,name=is_multiple,json=isMultiple,proto3" json:"is_multiple,omitempty"`
	Precision   int32                `protobuf:"varint,8,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *AttrAttribute) Reset() {
	*x = AttrAttribute{}
	mi := &file_spec_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrAttribute) ProtoMessage() {}

func (x *AttrAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrAttribute.ProtoReflect.Descriptor instead.
func (*AttrAttribute) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{4}
}

func (x *AttrAttribute) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AttrAttribute) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *AttrAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttrAttribute) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AttrAttribute) GetTypeId() AttrAttributeType_ID {
	if x != nil {
		return x.TypeId
	}
	return AttrAttributeType_UNKNOWN
}

func (x *AttrAttribute) GetUnitId() int64 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *AttrAttribute) GetIsMultiple() bool {
	if x != nil {
		return x.IsMultiple
	}
	return false
}

func (x *AttrAttribute) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

type AttrListOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeId int64 `protobuf:"varint,1,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
}

func (x *AttrListOptionsRequest) Reset() {
	*x = AttrListOptionsRequest{}
	mi := &file_spec_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrListOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrListOptionsRequest) ProtoMessage() {}

func (x *AttrListOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrListOptionsRequest.ProtoReflect.Descriptor instead.
func (*AttrListOptionsRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{5}
}

func (x *AttrListOptionsRequest) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

type AttrListOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AttrListOption `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AttrListOptionsResponse) Reset() {
	*x = AttrListOptionsResponse{}
	mi := &file_spec_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrListOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrListOptionsResponse) ProtoMessage() {}

func (x *AttrListOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrListOptionsResponse.ProtoReflect.Descriptor instead.
func (*AttrListOptionsResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{6}
}

func (x *AttrListOptionsResponse) GetItems() []*AttrListOption {
	if x != nil {
		return x.Items
	}
	return nil
}

type AttrListOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AttributeId int64  `protobuf:"varint,3,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	ParentId    int64  `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *AttrListOption) Reset() {
	*x = AttrListOption{}
	mi := &file_spec_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrListOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrListOption) ProtoMessage() {}

func (x *AttrListOption) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrListOption.ProtoReflect.Descriptor instead.
func (*AttrListOption) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{7}
}

func (x *AttrListOption) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AttrListOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttrListOption) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *AttrListOption) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type AttrZoneAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId int64 `protobuf:"varint,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
}

func (x *AttrZoneAttributesRequest) Reset() {
	*x = AttrZoneAttributesRequest{}
	mi := &file_spec_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrZoneAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrZoneAttributesRequest) ProtoMessage() {}

func (x *AttrZoneAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrZoneAttributesRequest.ProtoReflect.Descriptor instead.
func (*AttrZoneAttributesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{8}
}

func (x *AttrZoneAttributesRequest) GetZoneId() int64 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

type AttrZoneAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AttrZoneAttribute `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AttrZoneAttributesResponse) Reset() {
	*x = AttrZoneAttributesResponse{}
	mi := &file_spec_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrZoneAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrZoneAttributesResponse) ProtoMessage() {}

func (x *AttrZoneAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrZoneAttributesResponse.ProtoReflect.Descriptor instead.
func (*AttrZoneAttributesResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{9}
}

func (x *AttrZoneAttributesResponse) GetItems() []*AttrZoneAttribute {
	if x != nil {
		return x.Items
	}
	return nil
}

type AttrZoneAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId      int64 `protobuf:"varint,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	AttributeId int64 `protobuf:"varint,2,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
}

func (x *AttrZoneAttribute) Reset() {
	*x = AttrZoneAttribute{}
	mi := &file_spec_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrZoneAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrZoneAttribute) ProtoMessage() {}

func (x *AttrZoneAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrZoneAttribute.ProtoReflect.Descriptor instead.
func (*AttrZoneAttribute) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{10}
}

func (x *AttrZoneAttribute) GetZoneId() int64 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

func (x *AttrZoneAttribute) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

type AttrAttributeTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AttrAttributeType `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AttrAttributeTypesResponse) Reset() {
	*x = AttrAttributeTypesResponse{}
	mi := &file_spec_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrAttributeTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrAttributeTypesResponse) ProtoMessage() {}

func (x *AttrAttributeTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrAttributeTypesResponse.ProtoReflect.Descriptor instead.
func (*AttrAttributeTypesResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{11}
}

func (x *AttrAttributeTypesResponse) GetItems() []*AttrAttributeType {
	if x != nil {
		return x.Items
	}
	return nil
}

type AttrAttributeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   AttrAttributeType_ID `protobuf:"varint,1,opt,name=id,proto3,enum=goautowp.AttrAttributeType_ID" json:"id,omitempty"`
	Name string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AttrAttributeType) Reset() {
	*x = AttrAttributeType{}
	mi := &file_spec_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrAttributeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrAttributeType) ProtoMessage() {}

func (x *AttrAttributeType) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrAttributeType.ProtoReflect.Descriptor instead.
func (*AttrAttributeType) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{12}
}

func (x *AttrAttributeType) GetId() AttrAttributeType_ID {
	if x != nil {
		return x.Id
	}
	return AttrAttributeType_UNKNOWN
}

func (x *AttrAttributeType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AttrUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AttrUnit `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AttrUnitsResponse) Reset() {
	*x = AttrUnitsResponse{}
	mi := &file_spec_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrUnitsResponse) ProtoMessage() {}

func (x *AttrUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrUnitsResponse.ProtoReflect.Descriptor instead.
func (*AttrUnitsResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{13}
}

func (x *AttrUnitsResponse) GetItems() []*AttrUnit {
	if x != nil {
		return x.Items
	}
	return nil
}

type AttrUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Abbr string `protobuf:"bytes,3,opt,name=abbr,proto3" json:"abbr,omitempty"`
}

func (x *AttrUnit) Reset() {
	*x = AttrUnit{}
	mi := &file_spec_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrUnit) ProtoMessage() {}

func (x *AttrUnit) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrUnit.ProtoReflect.Descriptor instead.
func (*AttrUnit) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{14}
}

func (x *AttrUnit) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AttrUnit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttrUnit) GetAbbr() string {
	if x != nil {
		return x.Abbr
	}
	return ""
}

type AttrZonesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AttrZone `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AttrZonesResponse) Reset() {
	*x = AttrZonesResponse{}
	mi := &file_spec_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrZonesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrZonesResponse) ProtoMessage() {}

func (x *AttrZonesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrZonesResponse.ProtoReflect.Descriptor instead.
func (*AttrZonesResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{15}
}

func (x *AttrZonesResponse) GetItems() []*AttrZone {
	if x != nil {
		return x.Items
	}
	return nil
}

type AttrZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AttrZone) Reset() {
	*x = AttrZone{}
	mi := &file_spec_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrZone) ProtoMessage() {}

func (x *AttrZone) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrZone.ProtoReflect.Descriptor instead.
func (*AttrZone) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{16}
}

func (x *AttrZone) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AttrZone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MoveAttrUserValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcItemId  int64 `protobuf:"varint,1,opt,name=src_item_id,json=srcItemId,proto3" json:"src_item_id,omitempty"`
	DestItemId int64 `protobuf:"varint,2,opt,name=dest_item_id,json=destItemId,proto3" json:"dest_item_id,omitempty"`
}

func (x *MoveAttrUserValuesRequest) Reset() {
	*x = MoveAttrUserValuesRequest{}
	mi := &file_spec_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveAttrUserValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveAttrUserValuesRequest) ProtoMessage() {}

func (x *MoveAttrUserValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveAttrUserValuesRequest.ProtoReflect.Descriptor instead.
func (*MoveAttrUserValuesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{17}
}

func (x *MoveAttrUserValuesRequest) GetSrcItemId() int64 {
	if x != nil {
		return x.SrcItemId
	}
	return 0
}

func (x *MoveAttrUserValuesRequest) GetDestItemId() int64 {
	if x != nil {
		return x.DestItemId
	}
	return 0
}

type DeleteAttrUserValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeId int64 `protobuf:"varint,1,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	ItemId      int64 `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	UserId      int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeleteAttrUserValuesRequest) Reset() {
	*x = DeleteAttrUserValuesRequest{}
	mi := &file_spec_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAttrUserValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAttrUserValuesRequest) ProtoMessage() {}

func (x *DeleteAttrUserValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAttrUserValuesRequest.ProtoReflect.Descriptor instead.
func (*DeleteAttrUserValuesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteAttrUserValuesRequest) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *DeleteAttrUserValuesRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *DeleteAttrUserValuesRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type AttrUserValuesFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueText bool `protobuf:"varint,1,opt,name=value_text,json=valueText,proto3" json:"value_text,omitempty"`
}

func (x *AttrUserValuesFields) Reset() {
	*x = AttrUserValuesFields{}
	mi := &file_spec_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrUserValuesFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrUserValuesFields) ProtoMessage() {}

func (x *AttrUserValuesFields) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrUserValuesFields.ProtoReflect.Descriptor instead.
func (*AttrUserValuesFields) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{19}
}

func (x *AttrUserValuesFields) GetValueText() bool {
	if x != nil {
		return x.ValueText
	}
	return false
}

type AttrUserValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId        int64                 `protobuf:"varint,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	UserId        int64                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExcludeUserId int64                 `protobuf:"varint,3,opt,name=exclude_user_id,json=excludeUserId,proto3" json:"exclude_user_id,omitempty"`
	ItemId        int64                 `protobuf:"varint,4,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Language      string                `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
	Fields        *AttrUserValuesFields `protobuf:"bytes,6,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *AttrUserValuesRequest) Reset() {
	*x = AttrUserValuesRequest{}
	mi := &file_spec_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrUserValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrUserValuesRequest) ProtoMessage() {}

func (x *AttrUserValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrUserValuesRequest.ProtoReflect.Descriptor instead.
func (*AttrUserValuesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{20}
}

func (x *AttrUserValuesRequest) GetZoneId() int64 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

func (x *AttrUserValuesRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AttrUserValuesRequest) GetExcludeUserId() int64 {
	if x != nil {
		return x.ExcludeUserId
	}
	return 0
}

func (x *AttrUserValuesRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *AttrUserValuesRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *AttrUserValuesRequest) GetFields() *AttrUserValuesFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

type AttrSetUserValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AttrUserValue `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AttrSetUserValuesRequest) Reset() {
	*x = AttrSetUserValuesRequest{}
	mi := &file_spec_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrSetUserValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrSetUserValuesRequest) ProtoMessage() {}

func (x *AttrSetUserValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrSetUserValuesRequest.ProtoReflect.Descriptor instead.
func (*AttrSetUserValuesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{21}
}

func (x *AttrSetUserValuesRequest) GetItems() []*AttrUserValue {
	if x != nil {
		return x.Items
	}
	return nil
}

type AttrConflictsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter   AttrConflictsRequest_Filter `protobuf:"varint,1,opt,name=filter,proto3,enum=goautowp.AttrConflictsRequest_Filter" json:"filter,omitempty"`
	Page     int32                       `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Language string                      `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *AttrConflictsRequest) Reset() {
	*x = AttrConflictsRequest{}
	mi := &file_spec_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrConflictsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrConflictsRequest) ProtoMessage() {}

func (x *AttrConflictsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrConflictsRequest.ProtoReflect.Descriptor instead.
func (*AttrConflictsRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{22}
}

func (x *AttrConflictsRequest) GetFilter() AttrConflictsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return AttrConflictsRequest_ALL
}

func (x *AttrConflictsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AttrConflictsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type AttrConflictValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ValueIsEmpty bool   `protobuf:"varint,2,opt,name=value_is_empty,json=valueIsEmpty,proto3" json:"value_is_empty,omitempty"`
	UserId       int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AttrConflictValue) Reset() {
	*x = AttrConflictValue{}
	mi := &file_spec_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrConflictValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrConflictValue) ProtoMessage() {}

func (x *AttrConflictValue) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrConflictValue.ProtoReflect.Descriptor instead.
func (*AttrConflictValue) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{23}
}

func (x *AttrConflictValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AttrConflictValue) GetValueIsEmpty() bool {
	if x != nil {
		return x.ValueIsEmpty
	}
	return false
}

func (x *AttrConflictValue) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type AttrConflict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId      int64                `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	AttributeId int64                `protobuf:"varint,2,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	Values      []*AttrConflictValue `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *AttrConflict) Reset() {
	*x = AttrConflict{}
	mi := &file_spec_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrConflict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrConflict) ProtoMessage() {}

func (x *AttrConflict) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrConflict.ProtoReflect.Descriptor instead.
func (*AttrConflict) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{24}
}

func (x *AttrConflict) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *AttrConflict) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *AttrConflict) GetValues() []*AttrConflictValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type AttrConflictsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items     []*AttrConflict `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Paginator *Pages          `protobuf:"bytes,2,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (x *AttrConflictsResponse) Reset() {
	*x = AttrConflictsResponse{}
	mi := &file_spec_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrConflictsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrConflictsResponse) ProtoMessage() {}

func (x *AttrConflictsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrConflictsResponse.ProtoReflect.Descriptor instead.
func (*AttrConflictsResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{25}
}

func (x *AttrConflictsResponse) GetItems() []*AttrConflict {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AttrConflictsResponse) GetPaginator() *Pages {
	if x != nil {
		return x.Paginator
	}
	return nil
}

type AttrUserValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeId int64                  `protobuf:"varint,1,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	ItemId      int64                  `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	UserId      int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Value       *AttrValueValue        `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	ValueText   string                 `protobuf:"bytes,5,opt,name=value_text,json=valueText,proto3" json:"value_text,omitempty"`
	UpdateDate  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
}

func (x *AttrUserValue) Reset() {
	*x = AttrUserValue{}
	mi := &file_spec_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrUserValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrUserValue) ProtoMessage() {}

func (x *AttrUserValue) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrUserValue.ProtoReflect.Descriptor instead.
func (*AttrUserValue) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{26}
}

func (x *AttrUserValue) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *AttrUserValue) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *AttrUserValue) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AttrUserValue) GetValue() *AttrValueValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AttrUserValue) GetValueText() string {
	if x != nil {
		return x.ValueText
	}
	return ""
}

func (x *AttrUserValue) GetUpdateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

type AttrUserValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AttrUserValue `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AttrUserValuesResponse) Reset() {
	*x = AttrUserValuesResponse{}
	mi := &file_spec_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrUserValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrUserValuesResponse) ProtoMessage() {}

func (x *AttrUserValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrUserValuesResponse.ProtoReflect.Descriptor instead.
func (*AttrUserValuesResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{27}
}

func (x *AttrUserValuesResponse) GetItems() []*AttrUserValue {
	if x != nil {
		return x.Items
	}
	return nil
}

type AttrValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId   int64  `protobuf:"varint,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	ItemId   int64  `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Language string `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *AttrValuesRequest) Reset() {
	*x = AttrValuesRequest{}
	mi := &file_spec_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrValuesRequest) ProtoMessage() {}

func (x *AttrValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrValuesRequest.ProtoReflect.Descriptor instead.
func (*AttrValuesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{28}
}

func (x *AttrValuesRequest) GetZoneId() int64 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

func (x *AttrValuesRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *AttrValuesRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type AttrValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AttrValue `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AttrValuesResponse) Reset() {
	*x = AttrValuesResponse{}
	mi := &file_spec_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrValuesResponse) ProtoMessage() {}

func (x *AttrValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrValuesResponse.ProtoReflect.Descriptor instead.
func (*AttrValuesResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{29}
}

func (x *AttrValuesResponse) GetItems() []*AttrValue {
	if x != nil {
		return x.Items
	}
	return nil
}

type AttrValueValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid       bool                 `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	IntValue    int32                `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3" json:"int_value,omitempty"`
	FloatValue  float64              `protobuf:"fixed64,3,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	StringValue string               `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BoolValue   bool                 `protobuf:"varint,5,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	ListValue   []int64              `protobuf:"varint,6,rep,packed,name=list_value,json=listValue,proto3" json:"list_value,omitempty"`
	Type        AttrAttributeType_ID `protobuf:"varint,7,opt,name=type,proto3,enum=goautowp.AttrAttributeType_ID" json:"type,omitempty"`
	IsEmpty     bool                 `protobuf:"varint,8,opt,name=is_empty,json=isEmpty,proto3" json:"is_empty,omitempty"`
}

func (x *AttrValueValue) Reset() {
	*x = AttrValueValue{}
	mi := &file_spec_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrValueValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrValueValue) ProtoMessage() {}

func (x *AttrValueValue) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrValueValue.ProtoReflect.Descriptor instead.
func (*AttrValueValue) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{30}
}

func (x *AttrValueValue) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *AttrValueValue) GetIntValue() int32 {
	if x != nil {
		return x.IntValue
	}
	return 0
}

func (x *AttrValueValue) GetFloatValue() float64 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *AttrValueValue) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *AttrValueValue) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *AttrValueValue) GetListValue() []int64 {
	if x != nil {
		return x.ListValue
	}
	return nil
}

func (x *AttrValueValue) GetType() AttrAttributeType_ID {
	if x != nil {
		return x.Type
	}
	return AttrAttributeType_UNKNOWN
}

func (x *AttrValueValue) GetIsEmpty() bool {
	if x != nil {
		return x.IsEmpty
	}
	return false
}

type AttrValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeId int64           `protobuf:"varint,1,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	ItemId      int64           `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Value       *AttrValueValue `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ValueText   string          `protobuf:"bytes,4,opt,name=value_text,json=valueText,proto3" json:"value_text,omitempty"`
}

func (x *AttrValue) Reset() {
	*x = AttrValue{}
	mi := &file_spec_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrValue) ProtoMessage() {}

func (x *AttrValue) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrValue.ProtoReflect.Descriptor instead.
func (*AttrValue) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{31}
}

func (x *AttrValue) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *AttrValue) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *AttrValue) GetValue() *AttrValueValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AttrValue) GetValueText() string {
	if x != nil {
		return x.ValueText
	}
	return ""
}

type PulseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period PulseRequest_Period `protobuf:"varint,1,opt,name=period,proto3,enum=goautowp.PulseRequest_Period" json:"period,omitempty"`
}

func (x *PulseRequest) Reset() {
	*x = PulseRequest{}
	mi := &file_spec_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PulseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulseRequest) ProtoMessage() {}

func (x *PulseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulseRequest.ProtoReflect.Descriptor instead.
func (*PulseRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{32}
}

func (x *PulseRequest) GetPeriod() PulseRequest_Period {
	if x != nil {
		return x.Period
	}
	return PulseRequest_DEFAULT
}

type PulseGrid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line   []float32 `protobuf:"fixed32,1,rep,packed,name=line,proto3" json:"line,omitempty"`
	Color  string    `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	UserId int64     `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *PulseGrid) Reset() {
	*x = PulseGrid{}
	mi := &file_spec_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PulseGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulseGrid) ProtoMessage() {}

func (x *PulseGrid) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulseGrid.ProtoReflect.Descriptor instead.
func (*PulseGrid) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{33}
}

func (x *PulseGrid) GetLine() []float32 {
	if x != nil {
		return x.Line
	}
	return nil
}

func (x *PulseGrid) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *PulseGrid) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type PulseLegend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Color  string `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *PulseLegend) Reset() {
	*x = PulseLegend{}
	mi := &file_spec_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PulseLegend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulseLegend) ProtoMessage() {}

func (x *PulseLegend) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulseLegend.ProtoReflect.Descriptor instead.
func (*PulseLegend) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{34}
}

func (x *PulseLegend) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PulseLegend) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type PulseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grid   []*PulseGrid   `protobuf:"bytes,1,rep,name=grid,proto3" json:"grid,omitempty"`
	Legend []*PulseLegend `protobuf:"bytes,2,rep,name=legend,proto3" json:"legend,omitempty"`
	Labels []string       `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *PulseResponse) Reset() {
	*x = PulseResponse{}
	mi := &file_spec_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PulseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulseResponse) ProtoMessage() {}

func (x *PulseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulseResponse.ProtoReflect.Descriptor instead.
func (*PulseResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{35}
}

func (x *PulseResponse) GetGrid() []*PulseGrid {
	if x != nil {
		return x.Grid
	}
	return nil
}

func (x *PulseResponse) GetLegend() []*PulseLegend {
	if x != nil {
		return x.Legend
	}
	return nil
}

func (x *PulseResponse) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ShortName string  `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Childs    []*Spec `protobuf:"bytes,4,rep,name=childs,proto3" json:"childs,omitempty"`
}

func (x *Spec) Reset() {
	*x = Spec{}
	mi := &file_spec_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec) ProtoMessage() {}

func (x *Spec) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec.ProtoReflect.Descriptor instead.
func (*Spec) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{36}
}

func (x *Spec) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Spec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Spec) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Spec) GetChilds() []*Spec {
	if x != nil {
		return x.Childs
	}
	return nil
}

type SpecsItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Spec `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SpecsItems) Reset() {
	*x = SpecsItems{}
	mi := &file_spec_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecsItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecsItems) ProtoMessage() {}

func (x *SpecsItems) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecsItems.ProtoReflect.Descriptor instead.
func (*SpecsItems) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{37}
}

func (x *SpecsItems) GetItems() []*Spec {
	if x != nil {
		return x.Items
	}
	return nil
}

type Perspective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Perspective) Reset() {
	*x = Perspective{}
	mi := &file_spec_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Perspective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Perspective) ProtoMessage() {}

func (x *Perspective) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Perspective.ProtoReflect.Descriptor instead.
func (*Perspective) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{38}
}

func (x *Perspective) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Perspective) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PerspectivesItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Perspective `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PerspectivesItems) Reset() {
	*x = PerspectivesItems{}
	mi := &file_spec_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerspectivesItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerspectivesItems) ProtoMessage() {}

func (x *PerspectivesItems) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerspectivesItems.ProtoReflect.Descriptor instead.
func (*PerspectivesItems) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{39}
}

func (x *PerspectivesItems) GetItems() []*Perspective {
	if x != nil {
		return x.Items
	}
	return nil
}

type PerspectiveGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Perspectives []*Perspective `protobuf:"bytes,3,rep,name=perspectives,proto3" json:"perspectives,omitempty"`
}

func (x *PerspectiveGroup) Reset() {
	*x = PerspectiveGroup{}
	mi := &file_spec_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerspectiveGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerspectiveGroup) ProtoMessage() {}

func (x *PerspectiveGroup) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerspectiveGroup.ProtoReflect.Descriptor instead.
func (*PerspectiveGroup) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{40}
}

func (x *PerspectiveGroup) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PerspectiveGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PerspectiveGroup) GetPerspectives() []*Perspective {
	if x != nil {
		return x.Perspectives
	}
	return nil
}

type PerspectivePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Groups []*PerspectiveGroup `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *PerspectivePage) Reset() {
	*x = PerspectivePage{}
	mi := &file_spec_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerspectivePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerspectivePage) ProtoMessage() {}

func (x *PerspectivePage) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerspectivePage.ProtoReflect.Descriptor instead.
func (*PerspectivePage) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{41}
}

func (x *PerspectivePage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PerspectivePage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PerspectivePage) GetGroups() []*PerspectiveGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type PerspectivePagesItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PerspectivePage `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PerspectivePagesItems) Reset() {
	*x = PerspectivePagesItems{}
	mi := &file_spec_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerspectivePagesItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerspectivePagesItems) ProtoMessage() {}

func (x *PerspectivePagesItems) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerspectivePagesItems.ProtoReflect.Descriptor instead.
func (*PerspectivePagesItems) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{42}
}

func (x *PerspectivePagesItems) GetItems() []*PerspectivePage {
	if x != nil {
		return x.Items
	}
	return nil
}

type ReCaptchaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *ReCaptchaConfig) Reset() {
	*x = ReCaptchaConfig{}
	mi := &file_spec_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReCaptchaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReCaptchaConfig) ProtoMessage() {}

func (x *ReCaptchaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReCaptchaConfig.ProtoReflect.Descriptor instead.
func (*ReCaptchaConfig) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{43}
}

func (x *ReCaptchaConfig) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type BrandIcons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Css   string `protobuf:"bytes,2,opt,name=css,proto3" json:"css,omitempty"`
}

func (x *BrandIcons) Reset() {
	*x = BrandIcons{}
	mi := &file_spec_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BrandIcons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandIcons) ProtoMessage() {}

func (x *BrandIcons) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandIcons.ProtoReflect.Descriptor instead.
func (*BrandIcons) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{44}
}

func (x *BrandIcons) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BrandIcons) GetCss() string {
	if x != nil {
		return x.Css
	}
	return ""
}

type AclEnforceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource  string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Privilege string `protobuf:"bytes,2,opt,name=privilege,proto3" json:"privilege,omitempty"`
}

func (x *AclEnforceRequest) Reset() {
	*x = AclEnforceRequest{}
	mi := &file_spec_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AclEnforceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclEnforceRequest) ProtoMessage() {}

func (x *AclEnforceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclEnforceRequest.ProtoReflect.Descriptor instead.
func (*AclEnforceRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{45}
}

func (x *AclEnforceRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *AclEnforceRequest) GetPrivilege() string {
	if x != nil {
		return x.Privilege
	}
	return ""
}

type AclEnforceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AclEnforceResult) Reset() {
	*x = AclEnforceResult{}
	mi := &file_spec_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AclEnforceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclEnforceResult) ProtoMessage() {}

func (x *AclEnforceResult) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclEnforceResult.ProtoReflect.Descriptor instead.
func (*AclEnforceResult) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{46}
}

func (x *AclEnforceResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type VehicleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Childs []*VehicleType `protobuf:"bytes,4,rep,name=childs,proto3" json:"childs,omitempty"`
}

func (x *VehicleType) Reset() {
	*x = VehicleType{}
	mi := &file_spec_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleType) ProtoMessage() {}

func (x *VehicleType) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleType.ProtoReflect.Descriptor instead.
func (*VehicleType) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{47}
}

func (x *VehicleType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VehicleType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VehicleType) GetChilds() []*VehicleType {
	if x != nil {
		return x.Childs
	}
	return nil
}

type VehicleTypeItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*VehicleType `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *VehicleTypeItems) Reset() {
	*x = VehicleTypeItems{}
	mi := &file_spec_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleTypeItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleTypeItems) ProtoMessage() {}

func (x *VehicleTypeItems) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleTypeItems.ProtoReflect.Descriptor instead.
func (*VehicleTypeItems) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{48}
}

func (x *VehicleTypeItems) GetItems() []*VehicleType {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetBrandVehicleTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrandId int32 `protobuf:"varint,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
}

func (x *GetBrandVehicleTypesRequest) Reset() {
	*x = GetBrandVehicleTypesRequest{}
	mi := &file_spec_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBrandVehicleTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrandVehicleTypesRequest) ProtoMessage() {}

func (x *GetBrandVehicleTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrandVehicleTypesRequest.ProtoReflect.Descriptor instead.
func (*GetBrandVehicleTypesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{49}
}

func (x *GetBrandVehicleTypesRequest) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

type BrandVehicleTypeItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*BrandVehicleType `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *BrandVehicleTypeItems) Reset() {
	*x = BrandVehicleTypeItems{}
	mi := &file_spec_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BrandVehicleTypeItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandVehicleTypeItems) ProtoMessage() {}

func (x *BrandVehicleTypeItems) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandVehicleTypeItems.ProtoReflect.Descriptor instead.
func (*BrandVehicleTypeItems) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{50}
}

func (x *BrandVehicleTypeItems) GetItems() []*BrandVehicleType {
	if x != nil {
		return x.Items
	}
	return nil
}

type BrandVehicleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Catname    string `protobuf:"bytes,3,opt,name=catname,proto3" json:"catname,omitempty"`
	ItemsCount string `protobuf:"bytes,4,opt,name=items_count,json=itemsCount,proto3" json:"items_count,omitempty"`
}

func (x *BrandVehicleType) Reset() {
	*x = BrandVehicleType{}
	mi := &file_spec_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BrandVehicleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandVehicleType) ProtoMessage() {}

func (x *BrandVehicleType) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandVehicleType.ProtoReflect.Descriptor instead.
func (*BrandVehicleType) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{51}
}

func (x *BrandVehicleType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BrandVehicleType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrandVehicleType) GetCatname() string {
	if x != nil {
		return x.Catname
	}
	return ""
}

func (x *BrandVehicleType) GetItemsCount() string {
	if x != nil {
		return x.ItemsCount
	}
	return ""
}

type CreateContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CreateContactRequest) Reset() {
	*x = CreateContactRequest{}
	mi := &file_spec_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContactRequest) ProtoMessage() {}

func (x *CreateContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContactRequest.ProtoReflect.Descriptor instead.
func (*CreateContactRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{52}
}

func (x *CreateContactRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type DeleteContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeleteContactRequest) Reset() {
	*x = DeleteContactRequest{}
	mi := &file_spec_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContactRequest) ProtoMessage() {}

func (x *DeleteContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContactRequest.ProtoReflect.Descriptor instead.
func (*DeleteContactRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteContactRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetContactRequest) Reset() {
	*x = GetContactRequest{}
	mi := &file_spec_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactRequest) ProtoMessage() {}

func (x *GetContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactRequest.ProtoReflect.Descriptor instead.
func (*GetContactRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{54}
}

func (x *GetContactRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type APIImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Src      string `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Width    int32  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height   int32  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Filesize int32  `protobuf:"varint,5,opt,name=filesize,proto3" json:"filesize,omitempty"`
}

func (x *APIImage) Reset() {
	*x = APIImage{}
	mi := &file_spec_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIImage) ProtoMessage() {}

func (x *APIImage) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIImage.ProtoReflect.Descriptor instead.
func (*APIImage) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{55}
}

func (x *APIImage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APIImage) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *APIImage) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *APIImage) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *APIImage) GetFilesize() int32 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

type APIUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Deleted               bool                   `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
	LongAway              bool                   `protobuf:"varint,4,opt,name=long_away,json=longAway,proto3" json:"long_away,omitempty"`
	Green                 bool                   `protobuf:"varint,5,opt,name=green,proto3" json:"green,omitempty"`
	Route                 []string               `protobuf:"bytes,6,rep,name=route,proto3" json:"route,omitempty"`
	Identity              string                 `protobuf:"bytes,7,opt,name=identity,proto3" json:"identity,omitempty"`
	Avatar                *APIImage              `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Gravatar              string                 `protobuf:"bytes,9,opt,name=gravatar,proto3" json:"gravatar,omitempty"`
	LastOnline            *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_online,json=lastOnline,proto3" json:"last_online,omitempty"`
	SpecsWeight           float64                `protobuf:"fixed64,11,opt,name=specs_weight,json=specsWeight,proto3" json:"specs_weight,omitempty"`
	Email                 string                 `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	Timezone              string                 `protobuf:"bytes,13,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Language              string                 `protobuf:"bytes,14,opt,name=language,proto3" json:"language,omitempty"`
	VotesPerDay           int64                  `protobuf:"varint,15,opt,name=votes_per_day,json=votesPerDay,proto3" json:"votes_per_day,omitempty"`
	VotesLeft             int64                  `protobuf:"varint,16,opt,name=votes_left,json=votesLeft,proto3" json:"votes_left,omitempty"`
	Img                   *APIImage              `protobuf:"bytes,17,opt,name=img,proto3" json:"img,omitempty"`
	GravatarLarge         string                 `protobuf:"bytes,18,opt,name=gravatar_large,json=gravatarLarge,proto3" json:"gravatar_large,omitempty"`
	Photo                 *APIImage              `protobuf:"bytes,19,opt,name=photo,proto3" json:"photo,omitempty"`
	IsModer               bool                   `protobuf:"varint,20,opt,name=is_moder,json=isModer,proto3" json:"is_moder,omitempty"`
	RegDate               *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=reg_date,json=regDate,proto3" json:"reg_date,omitempty"`
	PicturesAdded         int32                  `protobuf:"varint,23,opt,name=pictures_added,json=picturesAdded,proto3" json:"pictures_added,omitempty"`
	PicturesAcceptedCount int32                  `protobuf:"varint,24,opt,name=pictures_accepted_count,json=picturesAcceptedCount,proto3" json:"pictures_accepted_count,omitempty"`
	LastIp                string                 `protobuf:"bytes,25,opt,name=last_ip,json=lastIp,proto3" json:"last_ip,omitempty"`
	Login                 string                 `protobuf:"bytes,26,opt,name=login,proto3" json:"login,omitempty"`
}

func (x *APIUser) Reset() {
	*x = APIUser{}
	mi := &file_spec_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIUser) ProtoMessage() {}

func (x *APIUser) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIUser.ProtoReflect.Descriptor instead.
func (*APIUser) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{56}
}

func (x *APIUser) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APIUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIUser) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *APIUser) GetLongAway() bool {
	if x != nil {
		return x.LongAway
	}
	return false
}

func (x *APIUser) GetGreen() bool {
	if x != nil {
		return x.Green
	}
	return false
}

func (x *APIUser) GetRoute() []string {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *APIUser) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *APIUser) GetAvatar() *APIImage {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *APIUser) GetGravatar() string {
	if x != nil {
		return x.Gravatar
	}
	return ""
}

func (x *APIUser) GetLastOnline() *timestamppb.Timestamp {
	if x != nil {
		return x.LastOnline
	}
	return nil
}

func (x *APIUser) GetSpecsWeight() float64 {
	if x != nil {
		return x.SpecsWeight
	}
	return 0
}

func (x *APIUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *APIUser) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *APIUser) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *APIUser) GetVotesPerDay() int64 {
	if x != nil {
		return x.VotesPerDay
	}
	return 0
}

func (x *APIUser) GetVotesLeft() int64 {
	if x != nil {
		return x.VotesLeft
	}
	return 0
}

func (x *APIUser) GetImg() *APIImage {
	if x != nil {
		return x.Img
	}
	return nil
}

func (x *APIUser) GetGravatarLarge() string {
	if x != nil {
		return x.GravatarLarge
	}
	return ""
}

func (x *APIUser) GetPhoto() *APIImage {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *APIUser) GetIsModer() bool {
	if x != nil {
		return x.IsModer
	}
	return false
}

func (x *APIUser) GetRegDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RegDate
	}
	return nil
}

func (x *APIUser) GetPicturesAdded() int32 {
	if x != nil {
		return x.PicturesAdded
	}
	return 0
}

func (x *APIUser) GetPicturesAcceptedCount() int32 {
	if x != nil {
		return x.PicturesAcceptedCount
	}
	return 0
}

func (x *APIUser) GetLastIp() string {
	if x != nil {
		return x.LastIp
	}
	return ""
}

func (x *APIUser) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactUserId int64    `protobuf:"varint,1,opt,name=contact_user_id,json=contactUserId,proto3" json:"contact_user_id,omitempty"`
	User          *APIUser `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	mi := &file_spec_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{57}
}

func (x *Contact) GetContactUserId() int64 {
	if x != nil {
		return x.ContactUserId
	}
	return 0
}

func (x *Contact) GetUser() *APIUser {
	if x != nil {
		return x.User
	}
	return nil
}

type ContactItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Contact `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ContactItems) Reset() {
	*x = ContactItems{}
	mi := &file_spec_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactItems) ProtoMessage() {}

func (x *ContactItems) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactItems.ProtoReflect.Descriptor instead.
func (*ContactItems) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{58}
}

func (x *ContactItems) GetItems() []*Contact {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetContactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetContactsRequest) Reset() {
	*x = GetContactsRequest{}
	mi := &file_spec_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsRequest) ProtoMessage() {}

func (x *GetContactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsRequest.ProtoReflect.Descriptor instead.
func (*GetContactsRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{59}
}

type CommentVoteItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*CommentVote `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CommentVoteItems) Reset() {
	*x = CommentVoteItems{}
	mi := &file_spec_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentVoteItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentVoteItems) ProtoMessage() {}

func (x *CommentVoteItems) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentVoteItems.ProtoReflect.Descriptor instead.
func (*CommentVoteItems) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{60}
}

func (x *CommentVoteItems) GetItems() []*CommentVote {
	if x != nil {
		return x.Items
	}
	return nil
}

type CommentVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value CommentVote_VoteValue `protobuf:"varint,1,opt,name=value,proto3,enum=goautowp.CommentVote_VoteValue" json:"value,omitempty"`
	User  *APIUser              `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *CommentVote) Reset() {
	*x = CommentVote{}
	mi := &file_spec_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentVote) ProtoMessage() {}

func (x *CommentVote) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentVote.ProtoReflect.Descriptor instead.
func (*CommentVote) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{61}
}

func (x *CommentVote) GetValue() CommentVote_VoteValue {
	if x != nil {
		return x.Value
	}
	return CommentVote_UNKNOWN
}

func (x *CommentVote) GetUser() *APIUser {
	if x != nil {
		return x.User
	}
	return nil
}

type APIBanItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Until    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=until,proto3" json:"until,omitempty"`
	ByUserId int64                  `protobuf:"varint,2,opt,name=by_user_id,json=byUserId,proto3" json:"by_user_id,omitempty"`
	ByUser   *APIUser               `protobuf:"bytes,3,opt,name=by_user,json=byUser,proto3" json:"by_user,omitempty"`
	Reason   string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *APIBanItem) Reset() {
	*x = APIBanItem{}
	mi := &file_spec_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIBanItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIBanItem) ProtoMessage() {}

func (x *APIBanItem) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIBanItem.ProtoReflect.Descriptor instead.
func (*APIBanItem) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{62}
}

func (x *APIBanItem) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *APIBanItem) GetByUserId() int64 {
	if x != nil {
		return x.ByUserId
	}
	return 0
}

func (x *APIBanItem) GetByUser() *APIUser {
	if x != nil {
		return x.ByUser
	}
	return nil
}

func (x *APIBanItem) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type APITrafficTopItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip          string      `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Count       int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Ban         *APIBanItem `protobuf:"bytes,3,opt,name=ban,proto3" json:"ban,omitempty"`
	InWhitelist bool        `protobuf:"varint,4,opt,name=in_whitelist,json=inWhitelist,proto3" json:"in_whitelist,omitempty"`
	WhoisUrl    string      `protobuf:"bytes,5,opt,name=whois_url,json=whoisUrl,proto3" json:"whois_url,omitempty"`
}

func (x *APITrafficTopItem) Reset() {
	*x = APITrafficTopItem{}
	mi := &file_spec_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITrafficTopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITrafficTopItem) ProtoMessage() {}

func (x *APITrafficTopItem) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITrafficTopItem.ProtoReflect.Descriptor instead.
func (*APITrafficTopItem) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{63}
}

func (x *APITrafficTopItem) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *APITrafficTopItem) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *APITrafficTopItem) GetBan() *APIBanItem {
	if x != nil {
		return x.Ban
	}
	return nil
}

func (x *APITrafficTopItem) GetInWhitelist() bool {
	if x != nil {
		return x.InWhitelist
	}
	return false
}

func (x *APITrafficTopItem) GetWhoisUrl() string {
	if x != nil {
		return x.WhoisUrl
	}
	return ""
}

type APITrafficTopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*APITrafficTopItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *APITrafficTopResponse) Reset() {
	*x = APITrafficTopResponse{}
	mi := &file_spec_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITrafficTopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITrafficTopResponse) ProtoMessage() {}

func (x *APITrafficTopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITrafficTopResponse.ProtoReflect.Descriptor instead.
func (*APITrafficTopResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{64}
}

func (x *APITrafficTopResponse) GetItems() []*APITrafficTopItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type APIGetIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip     string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *APIGetIPRequest) Reset() {
	*x = APIGetIPRequest{}
	mi := &file_spec_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIGetIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGetIPRequest) ProtoMessage() {}

func (x *APIGetIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGetIPRequest.ProtoReflect.Descriptor instead.
func (*APIGetIPRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{65}
}

func (x *APIGetIPRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *APIGetIPRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type APIIPRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddToBlacklist      bool `protobuf:"varint,1,opt,name=add_to_blacklist,json=addToBlacklist,proto3" json:"add_to_blacklist,omitempty"`
	RemoveFromBlacklist bool `protobuf:"varint,2,opt,name=remove_from_blacklist,json=removeFromBlacklist,proto3" json:"remove_from_blacklist,omitempty"`
}

func (x *APIIPRights) Reset() {
	*x = APIIPRights{}
	mi := &file_spec_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIIPRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIIPRights) ProtoMessage() {}

func (x *APIIPRights) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIIPRights.ProtoReflect.Descriptor instead.
func (*APIIPRights) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{66}
}

func (x *APIIPRights) GetAddToBlacklist() bool {
	if x != nil {
		return x.AddToBlacklist
	}
	return false
}

func (x *APIIPRights) GetRemoveFromBlacklist() bool {
	if x != nil {
		return x.RemoveFromBlacklist
	}
	return false
}

type APIIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Hostname  string       `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Blacklist *APIBanItem  `protobuf:"bytes,3,opt,name=blacklist,proto3" json:"blacklist,omitempty"`
	Rights    *APIIPRights `protobuf:"bytes,4,opt,name=rights,proto3" json:"rights,omitempty"`
}

func (x *APIIP) Reset() {
	*x = APIIP{}
	mi := &file_spec_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIIP) ProtoMessage() {}

func (x *APIIP) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIIP.ProtoReflect.Descriptor instead.
func (*APIIP) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{67}
}

func (x *APIIP) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *APIIP) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *APIIP) GetBlacklist() *APIBanItem {
	if x != nil {
		return x.Blacklist
	}
	return nil
}

func (x *APIIP) GetRights() *APIIPRights {
	if x != nil {
		return x.Rights
	}
	return nil
}

type APICreateFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email   string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Captcha string `protobuf:"bytes,4,opt,name=captcha,proto3" json:"captcha,omitempty"`
}

func (x *APICreateFeedbackRequest) Reset() {
	*x = APICreateFeedbackRequest{}
	mi := &file_spec_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APICreateFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APICreateFeedbackRequest) ProtoMessage() {}

func (x *APICreateFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APICreateFeedbackRequest.ProtoReflect.Descriptor instead.
func (*APICreateFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{68}
}

func (x *APICreateFeedbackRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APICreateFeedbackRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *APICreateFeedbackRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *APICreateFeedbackRequest) GetCaptcha() string {
	if x != nil {
		return x.Captcha
	}
	return ""
}

type DeleteFromTrafficWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *DeleteFromTrafficWhitelistRequest) Reset() {
	*x = DeleteFromTrafficWhitelistRequest{}
	mi := &file_spec_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFromTrafficWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFromTrafficWhitelistRequest) ProtoMessage() {}

func (x *DeleteFromTrafficWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFromTrafficWhitelistRequest.ProtoReflect.Descriptor instead.
func (*DeleteFromTrafficWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{69}
}

func (x *DeleteFromTrafficWhitelistRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type DeleteFromTrafficBlacklistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *DeleteFromTrafficBlacklistRequest) Reset() {
	*x = DeleteFromTrafficBlacklistRequest{}
	mi := &file_spec_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFromTrafficBlacklistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFromTrafficBlacklistRequest) ProtoMessage() {}

func (x *DeleteFromTrafficBlacklistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFromTrafficBlacklistRequest.ProtoReflect.Descriptor instead.
func (*DeleteFromTrafficBlacklistRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{70}
}

func (x *DeleteFromTrafficBlacklistRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type AddToTrafficBlacklistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip     string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Period int32  `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *AddToTrafficBlacklistRequest) Reset() {
	*x = AddToTrafficBlacklistRequest{}
	mi := &file_spec_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddToTrafficBlacklistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToTrafficBlacklistRequest) ProtoMessage() {}

func (x *AddToTrafficBlacklistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToTrafficBlacklistRequest.ProtoReflect.Descriptor instead.
func (*AddToTrafficBlacklistRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{71}
}

func (x *AddToTrafficBlacklistRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AddToTrafficBlacklistRequest) GetPeriod() int32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *AddToTrafficBlacklistRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type AddToTrafficWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *AddToTrafficWhitelistRequest) Reset() {
	*x = AddToTrafficWhitelistRequest{}
	mi := &file_spec_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddToTrafficWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToTrafficWhitelistRequest) ProtoMessage() {}

func (x *AddToTrafficWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToTrafficWhitelistRequest.ProtoReflect.Descriptor instead.
func (*AddToTrafficWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{72}
}

func (x *AddToTrafficWhitelistRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type APITrafficWhitelistItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip          string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *APITrafficWhitelistItem) Reset() {
	*x = APITrafficWhitelistItem{}
	mi := &file_spec_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITrafficWhitelistItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITrafficWhitelistItem) ProtoMessage() {}

func (x *APITrafficWhitelistItem) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITrafficWhitelistItem.ProtoReflect.Descriptor instead.
func (*APITrafficWhitelistItem) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{73}
}

func (x *APITrafficWhitelistItem) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *APITrafficWhitelistItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type APITrafficWhitelistItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*APITrafficWhitelistItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *APITrafficWhitelistItems) Reset() {
	*x = APITrafficWhitelistItems{}
	mi := &file_spec_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITrafficWhitelistItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITrafficWhitelistItems) ProtoMessage() {}

func (x *APITrafficWhitelistItems) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITrafficWhitelistItems.ProtoReflect.Descriptor instead.
func (*APITrafficWhitelistItems) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{74}
}

func (x *APITrafficWhitelistItems) GetItems() []*APITrafficWhitelistItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type APIForumsUserSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionsCount int32 `protobuf:"varint,1,opt,name=subscriptionsCount,proto3" json:"subscriptionsCount,omitempty"`
}

func (x *APIForumsUserSummary) Reset() {
	*x = APIForumsUserSummary{}
	mi := &file_spec_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIForumsUserSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIForumsUserSummary) ProtoMessage() {}

func (x *APIForumsUserSummary) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIForumsUserSummary.ProtoReflect.Descriptor instead.
func (*APIForumsUserSummary) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{75}
}

func (x *APIForumsUserSummary) GetSubscriptionsCount() int32 {
	if x != nil {
		return x.SubscriptionsCount
	}
	return 0
}

type APIGetForumsThemeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *APIGetForumsThemeRequest) Reset() {
	*x = APIGetForumsThemeRequest{}
	mi := &file_spec_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIGetForumsThemeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGetForumsThemeRequest) ProtoMessage() {}

func (x *APIGetForumsThemeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGetForumsThemeRequest.ProtoReflect.Descriptor instead.
func (*APIGetForumsThemeRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{76}
}

func (x *APIGetForumsThemeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type APIGetForumsTopicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeId      int64 `protobuf:"varint,1,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`
	Page         int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Subscription bool  `protobuf:"varint,3,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *APIGetForumsTopicsRequest) Reset() {
	*x = APIGetForumsTopicsRequest{}
	mi := &file_spec_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIGetForumsTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGetForumsTopicsRequest) ProtoMessage() {}

func (x *APIGetForumsTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGetForumsTopicsRequest.ProtoReflect.Descriptor instead.
func (*APIGetForumsTopicsRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{77}
}

func (x *APIGetForumsTopicsRequest) GetThemeId() int64 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

func (x *APIGetForumsTopicsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *APIGetForumsTopicsRequest) GetSubscription() bool {
	if x != nil {
		return x.Subscription
	}
	return false
}

type APIGetForumsTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *APIGetForumsTopicRequest) Reset() {
	*x = APIGetForumsTopicRequest{}
	mi := &file_spec_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIGetForumsTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGetForumsTopicRequest) ProtoMessage() {}

func (x *APIGetForumsTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGetForumsTopicRequest.ProtoReflect.Descriptor instead.
func (*APIGetForumsTopicRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{78}
}

func (x *APIGetForumsTopicRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type APIGetForumsThemesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeId int64 `protobuf:"varint,1,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`
}

func (x *APIGetForumsThemesRequest) Reset() {
	*x = APIGetForumsThemesRequest{}
	mi := &file_spec_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIGetForumsThemesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGetForumsThemesRequest) ProtoMessage() {}

func (x *APIGetForumsThemesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGetForumsThemesRequest.ProtoReflect.Descriptor instead.
func (*APIGetForumsThemesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{79}
}

func (x *APIGetForumsThemesRequest) GetThemeId() int64 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

type APIForumsTheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TopicsCount   int32  `protobuf:"varint,3,opt,name=topics_count,json=topicsCount,proto3" json:"topics_count,omitempty"`
	MessagesCount int32  `protobuf:"varint,4,opt,name=messages_count,json=messagesCount,proto3" json:"messages_count,omitempty"`
	DisableTopics bool   `protobuf:"varint,5,opt,name=disable_topics,json=disableTopics,proto3" json:"disable_topics,omitempty"`
	Description   string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *APIForumsTheme) Reset() {
	*x = APIForumsTheme{}
	mi := &file_spec_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIForumsTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIForumsTheme) ProtoMessage() {}

func (x *APIForumsTheme) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIForumsTheme.ProtoReflect.Descriptor instead.
func (*APIForumsTheme) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{80}
}

func (x *APIForumsTheme) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APIForumsTheme) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIForumsTheme) GetTopicsCount() int32 {
	if x != nil {
		return x.TopicsCount
	}
	return 0
}

func (x *APIForumsTheme) GetMessagesCount() int32 {
	if x != nil {
		return x.MessagesCount
	}
	return 0
}

func (x *APIForumsTheme) GetDisableTopics() bool {
	if x != nil {
		return x.DisableTopics
	}
	return false
}

func (x *APIForumsTheme) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type APIForumsThemes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*APIForumsTheme `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *APIForumsThemes) Reset() {
	*x = APIForumsThemes{}
	mi := &file_spec_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIForumsThemes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIForumsThemes) ProtoMessage() {}

func (x *APIForumsThemes) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIForumsThemes.ProtoReflect.Descriptor instead.
func (*APIForumsThemes) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{81}
}

func (x *APIForumsThemes) GetItems() []*APIForumsTheme {
	if x != nil {
		return x.Items
	}
	return nil
}

type APIForumsTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status       string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	OldMessages  int32                  `protobuf:"varint,4,opt,name=old_messages,json=oldMessages,proto3" json:"old_messages,omitempty"`
	NewMessages  int32                  `protobuf:"varint,5,opt,name=new_messages,json=newMessages,proto3" json:"new_messages,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UserId       int64                  `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ThemeId      int64                  `protobuf:"varint,8,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`
	Subscription bool                   `protobuf:"varint,9,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *APIForumsTopic) Reset() {
	*x = APIForumsTopic{}
	mi := &file_spec_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIForumsTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIForumsTopic) ProtoMessage() {}

func (x *APIForumsTopic) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIForumsTopic.ProtoReflect.Descriptor instead.
func (*APIForumsTopic) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{82}
}

func (x *APIForumsTopic) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APIForumsTopic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIForumsTopic) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *APIForumsTopic) GetOldMessages() int32 {
	if x != nil {
		return x.OldMessages
	}
	return 0
}

func (x *APIForumsTopic) GetNewMessages() int32 {
	if x != nil {
		return x.NewMessages
	}
	return 0
}

func (x *APIForumsTopic) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *APIForumsTopic) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *APIForumsTopic) GetThemeId() int64 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

func (x *APIForumsTopic) GetSubscription() bool {
	if x != nil {
		return x.Subscription
	}
	return false
}

type APIForumsTopics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items     []*APIForumsTopic `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Paginator *Pages            `protobuf:"bytes,2,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (x *APIForumsTopics) Reset() {
	*x = APIForumsTopics{}
	mi := &file_spec_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIForumsTopics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIForumsTopics) ProtoMessage() {}

func (x *APIForumsTopics) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIForumsTopics.ProtoReflect.Descriptor instead.
func (*APIForumsTopics) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{83}
}

func (x *APIForumsTopics) GetItems() []*APIForumsTopic {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *APIForumsTopics) GetPaginator() *Pages {
	if x != nil {
		return x.Paginator
	}
	return nil
}

type APICommentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UserId    int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *APICommentMessage) Reset() {
	*x = APICommentMessage{}
	mi := &file_spec_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APICommentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APICommentMessage) ProtoMessage() {}

func (x *APICommentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APICommentMessage.ProtoReflect.Descriptor instead.
func (*APICommentMessage) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{84}
}

func (x *APICommentMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APICommentMessage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *APICommentMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type APICreateTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeId            int64  `protobuf:"varint,1,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Message            string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ModeratorAttention bool   `protobuf:"varint,4,opt,name=moderator_attention,json=moderatorAttention,proto3" json:"moderator_attention,omitempty"`
	Subscription       bool   `protobuf:"varint,5,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *APICreateTopicRequest) Reset() {
	*x = APICreateTopicRequest{}
	mi := &file_spec_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APICreateTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APICreateTopicRequest) ProtoMessage() {}

func (x *APICreateTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APICreateTopicRequest.ProtoReflect.Descriptor instead.
func (*APICreateTopicRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{85}
}

func (x *APICreateTopicRequest) GetThemeId() int64 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

func (x *APICreateTopicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APICreateTopicRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *APICreateTopicRequest) GetModeratorAttention() bool {
	if x != nil {
		return x.ModeratorAttention
	}
	return false
}

func (x *APICreateTopicRequest) GetSubscription() bool {
	if x != nil {
		return x.Subscription
	}
	return false
}

type APICreateTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *APICreateTopicResponse) Reset() {
	*x = APICreateTopicResponse{}
	mi := &file_spec_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APICreateTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APICreateTopicResponse) ProtoMessage() {}

func (x *APICreateTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APICreateTopicResponse.ProtoReflect.Descriptor instead.
func (*APICreateTopicResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{86}
}

func (x *APICreateTopicResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type APISetTopicStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *APISetTopicStatusRequest) Reset() {
	*x = APISetTopicStatusRequest{}
	mi := &file_spec_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APISetTopicStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APISetTopicStatusRequest) ProtoMessage() {}

func (x *APISetTopicStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APISetTopicStatusRequest.ProtoReflect.Descriptor instead.
func (*APISetTopicStatusRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{87}
}

func (x *APISetTopicStatusRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type APIMoveTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ThemeId int64 `protobuf:"varint,2,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`
}

func (x *APIMoveTopicRequest) Reset() {
	*x = APIMoveTopicRequest{}
	mi := &file_spec_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIMoveTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIMoveTopicRequest) ProtoMessage() {}

func (x *APIMoveTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIMoveTopicRequest.ProtoReflect.Descriptor instead.
func (*APIMoveTopicRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{88}
}

func (x *APIMoveTopicRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APIMoveTopicRequest) GetThemeId() int64 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

type APIMessageNewCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *APIMessageNewCount) Reset() {
	*x = APIMessageNewCount{}
	mi := &file_spec_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIMessageNewCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIMessageNewCount) ProtoMessage() {}

func (x *APIMessageNewCount) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIMessageNewCount.ProtoReflect.Descriptor instead.
func (*APIMessageNewCount) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{89}
}

func (x *APIMessageNewCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type APIMessageSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InboxCount     int32 `protobuf:"varint,1,opt,name=inbox_count,json=inboxCount,proto3" json:"inbox_count,omitempty"`
	InboxNewCount  int32 `protobuf:"varint,2,opt,name=inbox_new_count,json=inboxNewCount,proto3" json:"inbox_new_count,omitempty"`
	SentCount      int32 `protobuf:"varint,3,opt,name=sent_count,json=sentCount,proto3" json:"sent_count,omitempty"`
	SystemCount    int32 `protobuf:"varint,4,opt,name=system_count,json=systemCount,proto3" json:"system_count,omitempty"`
	SystemNewCount int32 `protobuf:"varint,5,opt,name=system_new_count,json=systemNewCount,proto3" json:"system_new_count,omitempty"`
}

func (x *APIMessageSummary) Reset() {
	*x = APIMessageSummary{}
	mi := &file_spec_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIMessageSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIMessageSummary) ProtoMessage() {}

func (x *APIMessageSummary) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIMessageSummary.ProtoReflect.Descriptor instead.
func (*APIMessageSummary) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{90}
}

func (x *APIMessageSummary) GetInboxCount() int32 {
	if x != nil {
		return x.InboxCount
	}
	return 0
}

func (x *APIMessageSummary) GetInboxNewCount() int32 {
	if x != nil {
		return x.InboxNewCount
	}
	return 0
}

func (x *APIMessageSummary) GetSentCount() int32 {
	if x != nil {
		return x.SentCount
	}
	return 0
}

func (x *APIMessageSummary) GetSystemCount() int32 {
	if x != nil {
		return x.SystemCount
	}
	return 0
}

func (x *APIMessageSummary) GetSystemNewCount() int32 {
	if x != nil {
		return x.SystemNewCount
	}
	return 0
}

type APIDeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *APIDeleteUserRequest) Reset() {
	*x = APIDeleteUserRequest{}
	mi := &file_spec_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIDeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIDeleteUserRequest) ProtoMessage() {}

func (x *APIDeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIDeleteUserRequest.ProtoReflect.Descriptor instead.
func (*APIDeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{91}
}

func (x *APIDeleteUserRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *APIDeleteUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type APIMeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields *UserFields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *APIMeRequest) Reset() {
	*x = APIMeRequest{}
	mi := &file_spec_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIMeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIMeRequest) ProtoMessage() {}

func (x *APIMeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIMeRequest.ProtoReflect.Descriptor instead.
func (*APIMeRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{92}
}

func (x *APIMeRequest) GetFields() *UserFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

type APIGetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64       `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Identity string      `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	Fields   *UserFields `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *APIGetUserRequest) Reset() {
	*x = APIGetUserRequest{}
	mi := &file_spec_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIGetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGetUserRequest) ProtoMessage() {}

func (x *APIGetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGetUserRequest.ProtoReflect.Descriptor instead.
func (*APIGetUserRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{93}
}

func (x *APIGetUserRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *APIGetUserRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *APIGetUserRequest) GetFields() *UserFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

type UserFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email                 bool `protobuf:"varint,1,opt,name=email,proto3" json:"email,omitempty"`
	Timezone              bool `protobuf:"varint,3,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Language              bool `protobuf:"varint,4,opt,name=language,proto3" json:"language,omitempty"`
	VotesPerDay           bool `protobuf:"varint,5,opt,name=votes_per_day,json=votesPerDay,proto3" json:"votes_per_day,omitempty"`
	VotesLeft             bool `protobuf:"varint,6,opt,name=votes_left,json=votesLeft,proto3" json:"votes_left,omitempty"`
	Img                   bool `protobuf:"varint,7,opt,name=img,proto3" json:"img,omitempty"`
	GravatarLarge         bool `protobuf:"varint,8,opt,name=gravatar_large,json=gravatarLarge,proto3" json:"gravatar_large,omitempty"`
	Photo                 bool `protobuf:"varint,9,opt,name=photo,proto3" json:"photo,omitempty"`
	IsModer               bool `protobuf:"varint,10,opt,name=is_moder,json=isModer,proto3" json:"is_moder,omitempty"`
	RegDate               bool `protobuf:"varint,11,opt,name=reg_date,json=regDate,proto3" json:"reg_date,omitempty"`
	PicturesAdded         bool `protobuf:"varint,14,opt,name=pictures_added,json=picturesAdded,proto3" json:"pictures_added,omitempty"`
	PicturesAcceptedCount bool `protobuf:"varint,15,opt,name=pictures_accepted_count,json=picturesAcceptedCount,proto3" json:"pictures_accepted_count,omitempty"`
	LastIp                bool `protobuf:"varint,16,opt,name=last_ip,json=lastIp,proto3" json:"last_ip,omitempty"`
	LastOnline            bool `protobuf:"varint,17,opt,name=last_online,json=lastOnline,proto3" json:"last_online,omitempty"`
	Login                 bool `protobuf:"varint,18,opt,name=login,proto3" json:"login,omitempty"`
}

func (x *UserFields) Reset() {
	*x = UserFields{}
	mi := &file_spec_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFields) ProtoMessage() {}

func (x *UserFields) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFields.ProtoReflect.Descriptor instead.
func (*UserFields) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{94}
}

func (x *UserFields) GetEmail() bool {
	if x != nil {
		return x.Email
	}
	return false
}

func (x *UserFields) GetTimezone() bool {
	if x != nil {
		return x.Timezone
	}
	return false
}

func (x *UserFields) GetLanguage() bool {
	if x != nil {
		return x.Language
	}
	return false
}

func (x *UserFields) GetVotesPerDay() bool {
	if x != nil {
		return x.VotesPerDay
	}
	return false
}

func (x *UserFields) GetVotesLeft() bool {
	if x != nil {
		return x.VotesLeft
	}
	return false
}

func (x *UserFields) GetImg() bool {
	if x != nil {
		return x.Img
	}
	return false
}

func (x *UserFields) GetGravatarLarge() bool {
	if x != nil {
		return x.GravatarLarge
	}
	return false
}

func (x *UserFields) GetPhoto() bool {
	if x != nil {
		return x.Photo
	}
	return false
}

func (x *UserFields) GetIsModer() bool {
	if x != nil {
		return x.IsModer
	}
	return false
}

func (x *UserFields) GetRegDate() bool {
	if x != nil {
		return x.RegDate
	}
	return false
}

func (x *UserFields) GetPicturesAdded() bool {
	if x != nil {
		return x.PicturesAdded
	}
	return false
}

func (x *UserFields) GetPicturesAcceptedCount() bool {
	if x != nil {
		return x.PicturesAcceptedCount
	}
	return false
}

func (x *UserFields) GetLastIp() bool {
	if x != nil {
		return x.LastIp
	}
	return false
}

func (x *UserFields) GetLastOnline() bool {
	if x != nil {
		return x.LastOnline
	}
	return false
}

func (x *UserFields) GetLogin() bool {
	if x != nil {
		return x.Login
	}
	return false
}

type APIBrandSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RouterLink []string           `protobuf:"bytes,3,rep,name=routerLink,proto3" json:"routerLink,omitempty"`
	Count      int32              `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Groups     []*APIBrandSection `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *APIBrandSection) Reset() {
	*x = APIBrandSection{}
	mi := &file_spec_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIBrandSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIBrandSection) ProtoMessage() {}

func (x *APIBrandSection) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIBrandSection.ProtoReflect.Descriptor instead.
func (*APIBrandSection) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{95}
}

func (x *APIBrandSection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIBrandSection) GetRouterLink() []string {
	if x != nil {
		return x.RouterLink
	}
	return nil
}

func (x *APIBrandSection) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *APIBrandSection) GetGroups() []*APIBrandSection {
	if x != nil {
		return x.Groups
	}
	return nil
}

type APIBrandSections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sections []*APIBrandSection `protobuf:"bytes,1,rep,name=sections,proto3" json:"sections,omitempty"`
}

func (x *APIBrandSections) Reset() {
	*x = APIBrandSections{}
	mi := &file_spec_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIBrandSections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIBrandSections) ProtoMessage() {}

func (x *APIBrandSections) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIBrandSections.ProtoReflect.Descriptor instead.
func (*APIBrandSections) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{96}
}

func (x *APIBrandSections) GetSections() []*APIBrandSection {
	if x != nil {
		return x.Sections
	}
	return nil
}

type GetBrandSectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   int64  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetBrandSectionsRequest) Reset() {
	*x = GetBrandSectionsRequest{}
	mi := &file_spec_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBrandSectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrandSectionsRequest) ProtoMessage() {}

func (x *GetBrandSectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrandSectionsRequest.ProtoReflect.Descriptor instead.
func (*GetBrandSectionsRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{97}
}

func (x *GetBrandSectionsRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *GetBrandSectionsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetTopBrandsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetTopBrandsListRequest) Reset() {
	*x = GetTopBrandsListRequest{}
	mi := &file_spec_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopBrandsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopBrandsListRequest) ProtoMessage() {}

func (x *GetTopBrandsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopBrandsListRequest.ProtoReflect.Descriptor instead.
func (*GetTopBrandsListRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{98}
}

func (x *GetTopBrandsListRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetBrandsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetBrandsRequest) Reset() {
	*x = GetBrandsRequest{}
	mi := &file_spec_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBrandsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrandsRequest) ProtoMessage() {}

func (x *GetBrandsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrandsRequest.ProtoReflect.Descriptor instead.
func (*GetBrandsRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{99}
}

func (x *GetBrandsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type APIBrandsListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Catname               string `protobuf:"bytes,2,opt,name=catname,proto3" json:"catname,omitempty"`
	Name                  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ItemsCount            int32  `protobuf:"varint,4,opt,name=items_count,json=itemsCount,proto3" json:"items_count,omitempty"`
	NewItemsCount         int32  `protobuf:"varint,5,opt,name=new_items_count,json=newItemsCount,proto3" json:"new_items_count,omitempty"`
	AcceptedPicturesCount int32  `protobuf:"varint,6,opt,name=accepted_pictures_count,json=acceptedPicturesCount,proto3" json:"accepted_pictures_count,omitempty"`
}

func (x *APIBrandsListItem) Reset() {
	*x = APIBrandsListItem{}
	mi := &file_spec_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIBrandsListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIBrandsListItem) ProtoMessage() {}

func (x *APIBrandsListItem) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIBrandsListItem.ProtoReflect.Descriptor instead.
func (*APIBrandsListItem) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{100}
}

func (x *APIBrandsListItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APIBrandsListItem) GetCatname() string {
	if x != nil {
		return x.Catname
	}
	return ""
}

func (x *APIBrandsListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIBrandsListItem) GetItemsCount() int32 {
	if x != nil {
		return x.ItemsCount
	}
	return 0
}

func (x *APIBrandsListItem) GetNewItemsCount() int32 {
	if x != nil {
		return x.NewItemsCount
	}
	return 0
}

func (x *APIBrandsListItem) GetAcceptedPicturesCount() int32 {
	if x != nil {
		return x.AcceptedPicturesCount
	}
	return 0
}

type APIBrandsListCharacter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Character string               `protobuf:"bytes,1,opt,name=character,proto3" json:"character,omitempty"`
	Id        string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Items     []*APIBrandsListItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *APIBrandsListCharacter) Reset() {
	*x = APIBrandsListCharacter{}
	mi := &file_spec_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIBrandsListCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIBrandsListCharacter) ProtoMessage() {}

func (x *APIBrandsListCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIBrandsListCharacter.ProtoReflect.Descriptor instead.
func (*APIBrandsListCharacter) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{101}
}

func (x *APIBrandsListCharacter) GetCharacter() string {
	if x != nil {
		return x.Character
	}
	return ""
}

func (x *APIBrandsListCharacter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *APIBrandsListCharacter) GetItems() []*APIBrandsListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type APIBrandsListLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category   APIBrandsListLine_Category `protobuf:"varint,1,opt,name=category,proto3,enum=goautowp.APIBrandsListLine_Category" json:"category,omitempty"`
	Characters []*APIBrandsListCharacter  `protobuf:"bytes,2,rep,name=characters,proto3" json:"characters,omitempty"`
}

func (x *APIBrandsListLine) Reset() {
	*x = APIBrandsListLine{}
	mi := &file_spec_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIBrandsListLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIBrandsListLine) ProtoMessage() {}

func (x *APIBrandsListLine) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIBrandsListLine.ProtoReflect.Descriptor instead.
func (*APIBrandsListLine) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{102}
}

func (x *APIBrandsListLine) GetCategory() APIBrandsListLine_Category {
	if x != nil {
		return x.Category
	}
	return APIBrandsListLine_DEFAULT
}

func (x *APIBrandsListLine) GetCharacters() []*APIBrandsListCharacter {
	if x != nil {
		return x.Characters
	}
	return nil
}

type APIBrandsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lines []*APIBrandsListLine `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *APIBrandsList) Reset() {
	*x = APIBrandsList{}
	mi := &file_spec_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIBrandsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIBrandsList) ProtoMessage() {}

func (x *APIBrandsList) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIBrandsList.ProtoReflect.Descriptor instead.
func (*APIBrandsList) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{103}
}

func (x *APIBrandsList) GetLines() []*APIBrandsListLine {
	if x != nil {
		return x.Lines
	}
	return nil
}

type APITopBrandsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brands []*APITopBrandsListItem `protobuf:"bytes,1,rep,name=brands,proto3" json:"brands,omitempty"`
	Total  int32                   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *APITopBrandsList) Reset() {
	*x = APITopBrandsList{}
	mi := &file_spec_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITopBrandsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITopBrandsList) ProtoMessage() {}

func (x *APITopBrandsList) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITopBrandsList.ProtoReflect.Descriptor instead.
func (*APITopBrandsList) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{104}
}

func (x *APITopBrandsList) GetBrands() []*APITopBrandsListItem {
	if x != nil {
		return x.Brands
	}
	return nil
}

func (x *APITopBrandsList) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type APITopBrandsListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Catname       string `protobuf:"bytes,2,opt,name=catname,proto3" json:"catname,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ItemsCount    int32  `protobuf:"varint,4,opt,name=items_count,json=itemsCount,proto3" json:"items_count,omitempty"`
	NewItemsCount int32  `protobuf:"varint,5,opt,name=new_items_count,json=newItemsCount,proto3" json:"new_items_count,omitempty"`
}

func (x *APITopBrandsListItem) Reset() {
	*x = APITopBrandsListItem{}
	mi := &file_spec_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITopBrandsListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITopBrandsListItem) ProtoMessage() {}

func (x *APITopBrandsListItem) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITopBrandsListItem.ProtoReflect.Descriptor instead.
func (*APITopBrandsListItem) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{105}
}

func (x *APITopBrandsListItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APITopBrandsListItem) GetCatname() string {
	if x != nil {
		return x.Catname
	}
	return ""
}

func (x *APITopBrandsListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APITopBrandsListItem) GetItemsCount() int32 {
	if x != nil {
		return x.ItemsCount
	}
	return 0
}

func (x *APITopBrandsListItem) GetNewItemsCount() int32 {
	if x != nil {
		return x.NewItemsCount
	}
	return 0
}

type GetTopPersonsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language        string          `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	PictureItemType PictureItemType `protobuf:"varint,2,opt,name=picture_item_type,json=pictureItemType,proto3,enum=goautowp.PictureItemType" json:"picture_item_type,omitempty"`
}

func (x *GetTopPersonsListRequest) Reset() {
	*x = GetTopPersonsListRequest{}
	mi := &file_spec_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopPersonsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopPersonsListRequest) ProtoMessage() {}

func (x *GetTopPersonsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopPersonsListRequest.ProtoReflect.Descriptor instead.
func (*GetTopPersonsListRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{106}
}

func (x *GetTopPersonsListRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GetTopPersonsListRequest) GetPictureItemType() PictureItemType {
	if x != nil {
		return x.PictureItemType
	}
	return PictureItemType_PICTURE_ITEM_UNKNOWN
}

type GetTwinsBrandsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetTwinsBrandsListRequest) Reset() {
	*x = GetTwinsBrandsListRequest{}
	mi := &file_spec_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTwinsBrandsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTwinsBrandsListRequest) ProtoMessage() {}

func (x *GetTwinsBrandsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTwinsBrandsListRequest.ProtoReflect.Descriptor instead.
func (*GetTwinsBrandsListRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{107}
}

func (x *GetTwinsBrandsListRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetTopTwinsBrandsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetTopTwinsBrandsListRequest) Reset() {
	*x = GetTopTwinsBrandsListRequest{}
	mi := &file_spec_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopTwinsBrandsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopTwinsBrandsListRequest) ProtoMessage() {}

func (x *GetTopTwinsBrandsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopTwinsBrandsListRequest.ProtoReflect.Descriptor instead.
func (*GetTopTwinsBrandsListRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{108}
}

func (x *GetTopTwinsBrandsListRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetTopCategoriesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetTopCategoriesListRequest) Reset() {
	*x = GetTopCategoriesListRequest{}
	mi := &file_spec_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopCategoriesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopCategoriesListRequest) ProtoMessage() {}

func (x *GetTopCategoriesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopCategoriesListRequest.ProtoReflect.Descriptor instead.
func (*GetTopCategoriesListRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{109}
}

func (x *GetTopCategoriesListRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetTopFactoriesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetTopFactoriesListRequest) Reset() {
	*x = GetTopFactoriesListRequest{}
	mi := &file_spec_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopFactoriesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopFactoriesListRequest) ProtoMessage() {}

func (x *GetTopFactoriesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopFactoriesListRequest.ProtoReflect.Descriptor instead.
func (*GetTopFactoriesListRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{110}
}

func (x *GetTopFactoriesListRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type APITopPersonsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*APITopPersonsListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *APITopPersonsList) Reset() {
	*x = APITopPersonsList{}
	mi := &file_spec_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITopPersonsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITopPersonsList) ProtoMessage() {}

func (x *APITopPersonsList) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITopPersonsList.ProtoReflect.Descriptor instead.
func (*APITopPersonsList) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{111}
}

func (x *APITopPersonsList) GetItems() []*APITopPersonsListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type APITopPersonsListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *APITopPersonsListItem) Reset() {
	*x = APITopPersonsListItem{}
	mi := &file_spec_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITopPersonsListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITopPersonsListItem) ProtoMessage() {}

func (x *APITopPersonsListItem) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITopPersonsListItem.ProtoReflect.Descriptor instead.
func (*APITopPersonsListItem) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{112}
}

func (x *APITopPersonsListItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APITopPersonsListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type APITwinsBrandsListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Catname  string `protobuf:"bytes,3,opt,name=catname,proto3" json:"catname,omitempty"`
	Count    int32  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	NewCount int32  `protobuf:"varint,5,opt,name=new_count,json=newCount,proto3" json:"new_count,omitempty"`
}

func (x *APITwinsBrandsListItem) Reset() {
	*x = APITwinsBrandsListItem{}
	mi := &file_spec_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITwinsBrandsListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITwinsBrandsListItem) ProtoMessage() {}

func (x *APITwinsBrandsListItem) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITwinsBrandsListItem.ProtoReflect.Descriptor instead.
func (*APITwinsBrandsListItem) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{113}
}

func (x *APITwinsBrandsListItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APITwinsBrandsListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APITwinsBrandsListItem) GetCatname() string {
	if x != nil {
		return x.Catname
	}
	return ""
}

func (x *APITwinsBrandsListItem) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *APITwinsBrandsListItem) GetNewCount() int32 {
	if x != nil {
		return x.NewCount
	}
	return 0
}

type APITwinsBrandsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*APITwinsBrandsListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *APITwinsBrandsList) Reset() {
	*x = APITwinsBrandsList{}
	mi := &file_spec_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITwinsBrandsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITwinsBrandsList) ProtoMessage() {}

func (x *APITwinsBrandsList) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITwinsBrandsList.ProtoReflect.Descriptor instead.
func (*APITwinsBrandsList) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{114}
}

func (x *APITwinsBrandsList) GetItems() []*APITwinsBrandsListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type APITopTwinsBrandsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*APITwinsBrandsListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Count int32                     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *APITopTwinsBrandsList) Reset() {
	*x = APITopTwinsBrandsList{}
	mi := &file_spec_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITopTwinsBrandsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITopTwinsBrandsList) ProtoMessage() {}

func (x *APITopTwinsBrandsList) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITopTwinsBrandsList.ProtoReflect.Descriptor instead.
func (*APITopTwinsBrandsList) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{115}
}

func (x *APITopTwinsBrandsList) GetItems() []*APITwinsBrandsListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *APITopTwinsBrandsList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type APITopCategoriesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*APITopCategoriesListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *APITopCategoriesList) Reset() {
	*x = APITopCategoriesList{}
	mi := &file_spec_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITopCategoriesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITopCategoriesList) ProtoMessage() {}

func (x *APITopCategoriesList) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITopCategoriesList.ProtoReflect.Descriptor instead.
func (*APITopCategoriesList) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{116}
}

func (x *APITopCategoriesList) GetItems() []*APITopCategoriesListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type APITopCategoriesListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Catname  string `protobuf:"bytes,3,opt,name=catname,proto3" json:"catname,omitempty"`
	Count    int32  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	NewCount int32  `protobuf:"varint,5,opt,name=new_count,json=newCount,proto3" json:"new_count,omitempty"`
}

func (x *APITopCategoriesListItem) Reset() {
	*x = APITopCategoriesListItem{}
	mi := &file_spec_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITopCategoriesListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITopCategoriesListItem) ProtoMessage() {}

func (x *APITopCategoriesListItem) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITopCategoriesListItem.ProtoReflect.Descriptor instead.
func (*APITopCategoriesListItem) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{117}
}

func (x *APITopCategoriesListItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APITopCategoriesListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APITopCategoriesListItem) GetCatname() string {
	if x != nil {
		return x.Catname
	}
	return ""
}

func (x *APITopCategoriesListItem) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *APITopCategoriesListItem) GetNewCount() int32 {
	if x != nil {
		return x.NewCount
	}
	return 0
}

type APITopFactoriesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*APITopFactoriesListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *APITopFactoriesList) Reset() {
	*x = APITopFactoriesList{}
	mi := &file_spec_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITopFactoriesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITopFactoriesList) ProtoMessage() {}

func (x *APITopFactoriesList) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITopFactoriesList.ProtoReflect.Descriptor instead.
func (*APITopFactoriesList) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{118}
}

func (x *APITopFactoriesList) GetItems() []*APITopFactoriesListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type APITopFactoriesListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Count    int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	NewCount int32  `protobuf:"varint,4,opt,name=new_count,json=newCount,proto3" json:"new_count,omitempty"`
}

func (x *APITopFactoriesListItem) Reset() {
	*x = APITopFactoriesListItem{}
	mi := &file_spec_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITopFactoriesListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITopFactoriesListItem) ProtoMessage() {}

func (x *APITopFactoriesListItem) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITopFactoriesListItem.ProtoReflect.Descriptor instead.
func (*APITopFactoriesListItem) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{119}
}

func (x *APITopFactoriesListItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APITopFactoriesListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APITopFactoriesListItem) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *APITopFactoriesListItem) GetNewCount() int32 {
	if x != nil {
		return x.NewCount
	}
	return 0
}

type PicturesOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      PictureStatus       `protobuf:"varint,1,opt,name=status,proto3,enum=goautowp.PictureStatus" json:"status,omitempty"`
	PictureItem *PictureItemOptions `protobuf:"bytes,2,opt,name=picture_item,json=pictureItem,proto3" json:"picture_item,omitempty"`
	OwnerId     int64               `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *PicturesOptions) Reset() {
	*x = PicturesOptions{}
	mi := &file_spec_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PicturesOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PicturesOptions) ProtoMessage() {}

func (x *PicturesOptions) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PicturesOptions.ProtoReflect.Descriptor instead.
func (*PicturesOptions) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{120}
}

func (x *PicturesOptions) GetStatus() PictureStatus {
	if x != nil {
		return x.Status
	}
	return PictureStatus_PICTURE_STATUS_UNKNOWN
}

func (x *PicturesOptions) GetPictureItem() *PictureItemOptions {
	if x != nil {
		return x.PictureItem
	}
	return nil
}

func (x *PicturesOptions) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

type PictureFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameText bool `protobuf:"varint,1,opt,name=name_text,json=nameText,proto3" json:"name_text,omitempty"`
}

func (x *PictureFields) Reset() {
	*x = PictureFields{}
	mi := &file_spec_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PictureFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureFields) ProtoMessage() {}

func (x *PictureFields) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureFields.ProtoReflect.Descriptor instead.
func (*PictureFields) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{121}
}

func (x *PictureFields) GetNameText() bool {
	if x != nil {
		return x.NameText
	}
	return false
}

type PreviewPicturesFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route   bool           `protobuf:"varint,1,opt,name=route,proto3" json:"route,omitempty"`
	Picture *PictureFields `protobuf:"bytes,2,opt,name=picture,proto3" json:"picture,omitempty"`
}

func (x *PreviewPicturesFields) Reset() {
	*x = PreviewPicturesFields{}
	mi := &file_spec_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviewPicturesFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewPicturesFields) ProtoMessage() {}

func (x *PreviewPicturesFields) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewPicturesFields.ProtoReflect.Descriptor instead.
func (*PreviewPicturesFields) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{122}
}

func (x *PreviewPicturesFields) GetRoute() bool {
	if x != nil {
		return x.Route
	}
	return false
}

func (x *PreviewPicturesFields) GetPicture() *PictureFields {
	if x != nil {
		return x.Picture
	}
	return nil
}

type ItemFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameOnly                   bool                   `protobuf:"varint,1,opt,name=name_only,json=nameOnly,proto3" json:"name_only,omitempty"`
	NameDefault                bool                   `protobuf:"varint,2,opt,name=name_default,json=nameDefault,proto3" json:"name_default,omitempty"`
	NameHtml                   bool                   `protobuf:"varint,3,opt,name=name_html,json=nameHtml,proto3" json:"name_html,omitempty"`
	NameText                   bool                   `protobuf:"varint,4,opt,name=name_text,json=nameText,proto3" json:"name_text,omitempty"`
	Description                bool                   `protobuf:"varint,5,opt,name=description,proto3" json:"description,omitempty"`
	HasText                    bool                   `protobuf:"varint,6,opt,name=has_text,json=hasText,proto3" json:"has_text,omitempty"`
	PreviewPictures            *PreviewPicturesFields `protobuf:"bytes,7,opt,name=preview_pictures,json=previewPictures,proto3" json:"preview_pictures,omitempty"`
	TotalPictures              bool                   `protobuf:"varint,8,opt,name=total_pictures,json=totalPictures,proto3" json:"total_pictures,omitempty"`
	DescendantsCount           bool                   `protobuf:"varint,9,opt,name=descendants_count,json=descendantsCount,proto3" json:"descendants_count,omitempty"`
	DescendantPicturesCount    bool                   `protobuf:"varint,10,opt,name=descendant_pictures_count,json=descendantPicturesCount,proto3" json:"descendant_pictures_count,omitempty"`
	ChildsCount                bool                   `protobuf:"varint,11,opt,name=childs_count,json=childsCount,proto3" json:"childs_count,omitempty"`
	DescendantTwinsGroupsCount bool                   `protobuf:"varint,12,opt,name=descendant_twins_groups_count,json=descendantTwinsGroupsCount,proto3" json:"descendant_twins_groups_count,omitempty"`
	InboxPicturesCount         bool                   `protobuf:"varint,13,opt,name=inbox_pictures_count,json=inboxPicturesCount,proto3" json:"inbox_pictures_count,omitempty"`
	FullName                   bool                   `protobuf:"varint,14,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Logo120                    bool                   `protobuf:"varint,15,opt,name=logo120,proto3" json:"logo120,omitempty"`
	MostsActive                bool                   `protobuf:"varint,16,opt,name=mosts_active,json=mostsActive,proto3" json:"mosts_active,omitempty"`
	CommentsAttentionsCount    bool                   `protobuf:"varint,17,opt,name=comments_attentions_count,json=commentsAttentionsCount,proto3" json:"comments_attentions_count,omitempty"`
	IsCompilesItemOfDay        bool                   `protobuf:"varint,18,opt,name=is_compiles_item_of_day,json=isCompilesItemOfDay,proto3" json:"is_compiles_item_of_day,omitempty"`
	Brandicon                  bool                   `protobuf:"varint,19,opt,name=brandicon,proto3" json:"brandicon,omitempty"`
	AttrZoneId                 bool                   `protobuf:"varint,20,opt,name=attr_zone_id,json=attrZoneId,proto3" json:"attr_zone_id,omitempty"`
	Location                   bool                   `protobuf:"varint,21,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ItemFields) Reset() {
	*x = ItemFields{}
	mi := &file_spec_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemFields) ProtoMessage() {}

func (x *ItemFields) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemFields.ProtoReflect.Descriptor instead.
func (*ItemFields) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{123}
}

func (x *ItemFields) GetNameOnly() bool {
	if x != nil {
		return x.NameOnly
	}
	return false
}

func (x *ItemFields) GetNameDefault() bool {
	if x != nil {
		return x.NameDefault
	}
	return false
}

func (x *ItemFields) GetNameHtml() bool {
	if x != nil {
		return x.NameHtml
	}
	return false
}

func (x *ItemFields) GetNameText() bool {
	if x != nil {
		return x.NameText
	}
	return false
}

func (x *ItemFields) GetDescription() bool {
	if x != nil {
		return x.Description
	}
	return false
}

func (x *ItemFields) GetHasText() bool {
	if x != nil {
		return x.HasText
	}
	return false
}

func (x *ItemFields) GetPreviewPictures() *PreviewPicturesFields {
	if x != nil {
		return x.PreviewPictures
	}
	return nil
}

func (x *ItemFields) GetTotalPictures() bool {
	if x != nil {
		return x.TotalPictures
	}
	return false
}

func (x *ItemFields) GetDescendantsCount() bool {
	if x != nil {
		return x.DescendantsCount
	}
	return false
}

func (x *ItemFields) GetDescendantPicturesCount() bool {
	if x != nil {
		return x.DescendantPicturesCount
	}
	return false
}

func (x *ItemFields) GetChildsCount() bool {
	if x != nil {
		return x.ChildsCount
	}
	return false
}

func (x *ItemFields) GetDescendantTwinsGroupsCount() bool {
	if x != nil {
		return x.DescendantTwinsGroupsCount
	}
	return false
}

func (x *ItemFields) GetInboxPicturesCount() bool {
	if x != nil {
		return x.InboxPicturesCount
	}
	return false
}

func (x *ItemFields) GetFullName() bool {
	if x != nil {
		return x.FullName
	}
	return false
}

func (x *ItemFields) GetLogo120() bool {
	if x != nil {
		return x.Logo120
	}
	return false
}

func (x *ItemFields) GetMostsActive() bool {
	if x != nil {
		return x.MostsActive
	}
	return false
}

func (x *ItemFields) GetCommentsAttentionsCount() bool {
	if x != nil {
		return x.CommentsAttentionsCount
	}
	return false
}

func (x *ItemFields) GetIsCompilesItemOfDay() bool {
	if x != nil {
		return x.IsCompilesItemOfDay
	}
	return false
}

func (x *ItemFields) GetBrandicon() bool {
	if x != nil {
		return x.Brandicon
	}
	return false
}

func (x *ItemFields) GetAttrZoneId() bool {
	if x != nil {
		return x.AttrZoneId
	}
	return false
}

func (x *ItemFields) GetLocation() bool {
	if x != nil {
		return x.Location
	}
	return false
}

type ItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string      `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Id       int64       `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Fields   *ItemFields `protobuf:"bytes,3,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ItemRequest) Reset() {
	*x = ItemRequest{}
	mi := &file_spec_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemRequest) ProtoMessage() {}

func (x *ItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemRequest.ProtoReflect.Descriptor instead.
func (*ItemRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{124}
}

func (x *ItemRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ItemRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemRequest) GetFields() *ItemFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string                 `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Fields   *ItemFields            `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	Options  *ItemListOptions       `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	Limit    uint32                 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Order    ListItemsRequest_Order `protobuf:"varint,9,opt,name=order,proto3,enum=goautowp.ListItemsRequest_Order" json:"order,omitempty"`
	Page     uint32                 `protobuf:"varint,11,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListItemsRequest) Reset() {
	*x = ListItemsRequest{}
	mi := &file_spec_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListItemsRequest) ProtoMessage() {}

func (x *ListItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListItemsRequest.ProtoReflect.Descriptor instead.
func (*ListItemsRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{125}
}

func (x *ListItemsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ListItemsRequest) GetFields() *ItemFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ListItemsRequest) GetOptions() *ItemListOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ListItemsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListItemsRequest) GetOrder() ListItemsRequest_Order {
	if x != nil {
		return x.Order
	}
	return ListItemsRequest_DEFAULT
}

func (x *ListItemsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type PictureItemOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId        PictureItemType  `protobuf:"varint,1,opt,name=type_id,json=typeId,proto3,enum=goautowp.PictureItemType" json:"type_id,omitempty"`
	Pictures      *PicturesOptions `protobuf:"bytes,2,opt,name=pictures,proto3" json:"pictures,omitempty"`
	PerspectiveId int32            `protobuf:"varint,3,opt,name=perspective_id,json=perspectiveId,proto3" json:"perspective_id,omitempty"`
}

func (x *PictureItemOptions) Reset() {
	*x = PictureItemOptions{}
	mi := &file_spec_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PictureItemOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureItemOptions) ProtoMessage() {}

func (x *PictureItemOptions) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureItemOptions.ProtoReflect.Descriptor instead.
func (*PictureItemOptions) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{126}
}

func (x *PictureItemOptions) GetTypeId() PictureItemType {
	if x != nil {
		return x.TypeId
	}
	return PictureItemType_PICTURE_ITEM_UNKNOWN
}

func (x *PictureItemOptions) GetPictures() *PicturesOptions {
	if x != nil {
		return x.Pictures
	}
	return nil
}

func (x *PictureItemOptions) GetPerspectiveId() int32 {
	if x != nil {
		return x.PerspectiveId
	}
	return 0
}

type ItemParentListOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentId int64            `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Parent   *ItemListOptions `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ItemParentListOptions) Reset() {
	*x = ItemParentListOptions{}
	mi := &file_spec_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemParentListOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemParentListOptions) ProtoMessage() {}

func (x *ItemParentListOptions) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemParentListOptions.ProtoReflect.Descriptor instead.
func (*ItemParentListOptions) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{127}
}

func (x *ItemParentListOptions) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ItemParentListOptions) GetParent() *ItemListOptions {
	if x != nil {
		return x.Parent
	}
	return nil
}

type ItemParentCacheListOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId               int64                  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ParentId             int64                  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	ItemsByItemId        *ItemListOptions       `protobuf:"bytes,3,opt,name=items_by_item_id,json=itemsByItemId,proto3" json:"items_by_item_id,omitempty"`
	PictureItemsByItemId *PictureItemOptions    `protobuf:"bytes,4,opt,name=picture_items_by_item_id,json=pictureItemsByItemId,proto3" json:"picture_items_by_item_id,omitempty"`
	ItemParentByItemId   *ItemParentListOptions `protobuf:"bytes,5,opt,name=item_parent_by_item_id,json=itemParentByItemId,proto3" json:"item_parent_by_item_id,omitempty"`
}

func (x *ItemParentCacheListOptions) Reset() {
	*x = ItemParentCacheListOptions{}
	mi := &file_spec_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemParentCacheListOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemParentCacheListOptions) ProtoMessage() {}

func (x *ItemParentCacheListOptions) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemParentCacheListOptions.ProtoReflect.Descriptor instead.
func (*ItemParentCacheListOptions) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{128}
}

func (x *ItemParentCacheListOptions) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemParentCacheListOptions) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ItemParentCacheListOptions) GetItemsByItemId() *ItemListOptions {
	if x != nil {
		return x.ItemsByItemId
	}
	return nil
}

func (x *ItemParentCacheListOptions) GetPictureItemsByItemId() *PictureItemOptions {
	if x != nil {
		return x.PictureItemsByItemId
	}
	return nil
}

func (x *ItemParentCacheListOptions) GetItemParentByItemId() *ItemParentListOptions {
	if x != nil {
		return x.ItemParentByItemId
	}
	return nil
}

type ItemListOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId          ItemType                    `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3,enum=goautowp.ItemType" json:"type_id,omitempty"`
	PreviewPictures *PictureItemOptions         `protobuf:"bytes,5,opt,name=preview_pictures,json=previewPictures,proto3" json:"preview_pictures,omitempty"`
	NoParent        bool                        `protobuf:"varint,7,opt,name=no_parent,json=noParent,proto3" json:"no_parent,omitempty"`
	Catname         string                      `protobuf:"bytes,8,opt,name=catname,proto3" json:"catname,omitempty"`
	Name            string                      `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Id              int64                       `protobuf:"varint,12,opt,name=id,proto3" json:"id,omitempty"`
	IsConcept       bool                        `protobuf:"varint,14,opt,name=is_concept,json=isConcept,proto3" json:"is_concept,omitempty"`
	Descendant      *ItemParentCacheListOptions `protobuf:"bytes,15,opt,name=descendant,proto3" json:"descendant,omitempty"`
	Ancestor        *ItemParentCacheListOptions `protobuf:"bytes,13,opt,name=ancestor,proto3" json:"ancestor,omitempty"`
	Parent          *ItemParentListOptions      `protobuf:"bytes,16,opt,name=parent,proto3" json:"parent,omitempty"`
	EngineId        int64                       `protobuf:"varint,17,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
}

func (x *ItemListOptions) Reset() {
	*x = ItemListOptions{}
	mi := &file_spec_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemListOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemListOptions) ProtoMessage() {}

func (x *ItemListOptions) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemListOptions.ProtoReflect.Descriptor instead.
func (*ItemListOptions) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{129}
}

func (x *ItemListOptions) GetTypeId() ItemType {
	if x != nil {
		return x.TypeId
	}
	return ItemType_ITEM_TYPE_UNKNOWN
}

func (x *ItemListOptions) GetPreviewPictures() *PictureItemOptions {
	if x != nil {
		return x.PreviewPictures
	}
	return nil
}

func (x *ItemListOptions) GetNoParent() bool {
	if x != nil {
		return x.NoParent
	}
	return false
}

func (x *ItemListOptions) GetCatname() string {
	if x != nil {
		return x.Catname
	}
	return ""
}

func (x *ItemListOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemListOptions) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemListOptions) GetIsConcept() bool {
	if x != nil {
		return x.IsConcept
	}
	return false
}

func (x *ItemListOptions) GetDescendant() *ItemParentCacheListOptions {
	if x != nil {
		return x.Descendant
	}
	return nil
}

func (x *ItemListOptions) GetAncestor() *ItemParentCacheListOptions {
	if x != nil {
		return x.Ancestor
	}
	return nil
}

func (x *ItemListOptions) GetParent() *ItemParentListOptions {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ItemListOptions) GetEngineId() int64 {
	if x != nil {
		return x.EngineId
	}
	return 0
}

type GetTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTreeRequest) Reset() {
	*x = GetTreeRequest{}
	mi := &file_spec_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreeRequest) ProtoMessage() {}

func (x *GetTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreeRequest.ProtoReflect.Descriptor instead.
func (*GetTreeRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{130}
}

func (x *GetTreeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type APITreeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Childs []*APITreeItem `protobuf:"bytes,3,rep,name=childs,proto3" json:"childs,omitempty"`
	Type   int32          `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *APITreeItem) Reset() {
	*x = APITreeItem{}
	mi := &file_spec_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APITreeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITreeItem) ProtoMessage() {}

func (x *APITreeItem) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITreeItem.ProtoReflect.Descriptor instead.
func (*APITreeItem) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{131}
}

func (x *APITreeItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *APITreeItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APITreeItem) GetChilds() []*APITreeItem {
	if x != nil {
		return x.Childs
	}
	return nil
}

func (x *APITreeItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type APIItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Catname                    string         `protobuf:"bytes,2,opt,name=catname,proto3" json:"catname,omitempty"`
	NameOnly                   string         `protobuf:"bytes,3,opt,name=name_only,json=nameOnly,proto3" json:"name_only,omitempty"`
	NameText                   string         `protobuf:"bytes,4,opt,name=name_text,json=nameText,proto3" json:"name_text,omitempty"`
	NameHtml                   string         `protobuf:"bytes,5,opt,name=name_html,json=nameHtml,proto3" json:"name_html,omitempty"`
	DescendantsCount           int32          `protobuf:"varint,6,opt,name=descendants_count,json=descendantsCount,proto3" json:"descendants_count,omitempty"`
	EngineItemId               int64          `protobuf:"varint,7,opt,name=engine_item_id,json=engineItemId,proto3" json:"engine_item_id,omitempty"`
	ItemTypeId                 ItemType       `protobuf:"varint,8,opt,name=item_type_id,json=itemTypeId,proto3,enum=goautowp.ItemType" json:"item_type_id,omitempty"`
	Description                string         `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	IsConcept                  bool           `protobuf:"varint,10,opt,name=is_concept,json=isConcept,proto3" json:"is_concept,omitempty"`
	IsConceptInherit           bool           `protobuf:"varint,11,opt,name=is_concept_inherit,json=isConceptInherit,proto3" json:"is_concept_inherit,omitempty"`
	SpecId                     int64          `protobuf:"varint,12,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`
	FullText                   string         `protobuf:"bytes,13,opt,name=full_text,json=fullText,proto3" json:"full_text,omitempty"`
	DescendantPicturesCount    int32          `protobuf:"varint,14,opt,name=descendant_pictures_count,json=descendantPicturesCount,proto3" json:"descendant_pictures_count,omitempty"`
	ChildsCount                int32          `protobuf:"varint,15,opt,name=childs_count,json=childsCount,proto3" json:"childs_count,omitempty"`
	DescendantTwinsGroupsCount int32          `protobuf:"varint,16,opt,name=descendant_twins_groups_count,json=descendantTwinsGroupsCount,proto3" json:"descendant_twins_groups_count,omitempty"`
	InboxPicturesCount         int32          `protobuf:"varint,17,opt,name=inbox_pictures_count,json=inboxPicturesCount,proto3" json:"inbox_pictures_count,omitempty"`
	FullName                   string         `protobuf:"bytes,18,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Logo120                    *APIImage      `protobuf:"bytes,19,opt,name=logo120,proto3" json:"logo120,omitempty"`
	MostsActive                bool           `protobuf:"varint,20,opt,name=mosts_active,json=mostsActive,proto3" json:"mosts_active,omitempty"`
	CommentsAttentionsCount    int32          `protobuf:"varint,21,opt,name=comments_attentions_count,json=commentsAttentionsCount,proto3" json:"comments_attentions_count,omitempty"`
	IsCompilesItemOfDay        bool           `protobuf:"varint,22,opt,name=is_compiles_item_of_day,json=isCompilesItemOfDay,proto3" json:"is_compiles_item_of_day,omitempty"`
	Brandicon                  *APIImage      `protobuf:"bytes,23,opt,name=brandicon,proto3" json:"brandicon,omitempty"`
	AttrZoneId                 int64          `protobuf:"varint,24,opt,name=attr_zone_id,json=attrZoneId,proto3" json:"attr_zone_id,omitempty"`
	EngineInherit              bool           `protobuf:"varint,25,opt,name=engine_inherit,json=engineInherit,proto3" json:"engine_inherit,omitempty"`
	Location                   *latlng.LatLng `protobuf:"bytes,26,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *APIItem) Reset() {
	*x = APIItem{}
	mi := &file_spec_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIItem) ProtoMessage() {}

func (x *APIItem) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIItem.ProtoReflect.Descriptor instead.
func (*APIItem) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{132}
}

func (x *APIItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APIItem) GetCatname() string {
	if x != nil {
		return x.Catname
	}
	return ""
}

func (x *APIItem) GetNameOnly() string {
	if x != nil {
		return x.NameOnly
	}
	return ""
}

func (x *APIItem) GetNameText() string {
	if x != nil {
		return x.NameText
	}
	return ""
}

func (x *APIItem) GetNameHtml() string {
	if x != nil {
		return x.NameHtml
	}
	return ""
}

func (x *APIItem) GetDescendantsCount() int32 {
	if x != nil {
		return x.DescendantsCount
	}
	return 0
}

func (x *APIItem) GetEngineItemId() int64 {
	if x != nil {
		return x.EngineItemId
	}
	return 0
}

func (x *APIItem) GetItemTypeId() ItemType {
	if x != nil {
		return x.ItemTypeId
	}
	return ItemType_ITEM_TYPE_UNKNOWN
}

func (x *APIItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *APIItem) GetIsConcept() bool {
	if x != nil {
		return x.IsConcept
	}
	return false
}

func (x *APIItem) GetIsConceptInherit() bool {
	if x != nil {
		return x.IsConceptInherit
	}
	return false
}

func (x *APIItem) GetSpecId() int64 {
	if x != nil {
		return x.SpecId
	}
	return 0
}

func (x *APIItem) GetFullText() string {
	if x != nil {
		return x.FullText
	}
	return ""
}

func (x *APIItem) GetDescendantPicturesCount() int32 {
	if x != nil {
		return x.DescendantPicturesCount
	}
	return 0
}

func (x *APIItem) GetChildsCount() int32 {
	if x != nil {
		return x.ChildsCount
	}
	return 0
}

func (x *APIItem) GetDescendantTwinsGroupsCount() int32 {
	if x != nil {
		return x.DescendantTwinsGroupsCount
	}
	return 0
}

func (x *APIItem) GetInboxPicturesCount() int32 {
	if x != nil {
		return x.InboxPicturesCount
	}
	return 0
}

func (x *APIItem) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *APIItem) GetLogo120() *APIImage {
	if x != nil {
		return x.Logo120
	}
	return nil
}

func (x *APIItem) GetMostsActive() bool {
	if x != nil {
		return x.MostsActive
	}
	return false
}

func (x *APIItem) GetCommentsAttentionsCount() int32 {
	if x != nil {
		return x.CommentsAttentionsCount
	}
	return 0
}

func (x *APIItem) GetIsCompilesItemOfDay() bool {
	if x != nil {
		return x.IsCompilesItemOfDay
	}
	return false
}

func (x *APIItem) GetBrandicon() *APIImage {
	if x != nil {
		return x.Brandicon
	}
	return nil
}

func (x *APIItem) GetAttrZoneId() int64 {
	if x != nil {
		return x.AttrZoneId
	}
	return 0
}

func (x *APIItem) GetEngineInherit() bool {
	if x != nil {
		return x.EngineInherit
	}
	return false
}

func (x *APIItem) GetLocation() *latlng.LatLng {
	if x != nil {
		return x.Location
	}
	return nil
}

type APIItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items     []*APIItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Paginator *Pages     `protobuf:"bytes,2,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (x *APIItemList) Reset() {
	*x = APIItemList{}
	mi := &file_spec_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIItemList) ProtoMessage() {}

func (x *APIItemList) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIItemList.ProtoReflect.Descriptor instead.
func (*APIItemList) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{133}
}

func (x *APIItemList) GetItems() []*APIItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *APIItemList) GetPaginator() *Pages {
	if x != nil {
		return x.Paginator
	}
	return nil
}

type CommentsSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int64        `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	TypeId CommentsType `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3,enum=goautowp.CommentsType" json:"type_id,omitempty"`
}

func (x *CommentsSubscribeRequest) Reset() {
	*x = CommentsSubscribeRequest{}
	mi := &file_spec_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentsSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentsSubscribeRequest) ProtoMessage() {}

func (x *CommentsSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentsSubscribeRequest.ProtoReflect.Descriptor instead.
func (*CommentsSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{134}
}

func (x *CommentsSubscribeRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CommentsSubscribeRequest) GetTypeId() CommentsType {
	if x != nil {
		return x.TypeId
	}
	return CommentsType_UNKNOWN
}

type CommentsUnSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int64        `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	TypeId CommentsType `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3,enum=goautowp.CommentsType" json:"type_id,omitempty"`
}

func (x *CommentsUnSubscribeRequest) Reset() {
	*x = CommentsUnSubscribeRequest{}
	mi := &file_spec_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentsUnSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentsUnSubscribeRequest) ProtoMessage() {}

func (x *CommentsUnSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentsUnSubscribeRequest.ProtoReflect.Descriptor instead.
func (*CommentsUnSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{135}
}

func (x *CommentsUnSubscribeRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CommentsUnSubscribeRequest) GetTypeId() CommentsType {
	if x != nil {
		return x.TypeId
	}
	return CommentsType_UNKNOWN
}

type GetCommentVotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId int64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (x *GetCommentVotesRequest) Reset() {
	*x = GetCommentVotesRequest{}
	mi := &file_spec_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentVotesRequest) ProtoMessage() {}

func (x *GetCommentVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentVotesRequest.ProtoReflect.Descriptor instead.
func (*GetCommentVotesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{136}
}

func (x *GetCommentVotesRequest) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

type CommentsViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int64        `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	TypeId CommentsType `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3,enum=goautowp.CommentsType" json:"type_id,omitempty"`
}

func (x *CommentsViewRequest) Reset() {
	*x = CommentsViewRequest{}
	mi := &file_spec_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentsViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentsViewRequest) ProtoMessage() {}

func (x *CommentsViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentsViewRequest.ProtoReflect.Descriptor instead.
func (*CommentsViewRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{137}
}

func (x *CommentsViewRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CommentsViewRequest) GetTypeId() CommentsType {
	if x != nil {
		return x.TypeId
	}
	return CommentsType_UNKNOWN
}

type CommentsSetDeletedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId int64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Deleted   bool  `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *CommentsSetDeletedRequest) Reset() {
	*x = CommentsSetDeletedRequest{}
	mi := &file_spec_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentsSetDeletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentsSetDeletedRequest) ProtoMessage() {}

func (x *CommentsSetDeletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentsSetDeletedRequest.ProtoReflect.Descriptor instead.
func (*CommentsSetDeletedRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{138}
}

func (x *CommentsSetDeletedRequest) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *CommentsSetDeletedRequest) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type CommentsMoveCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId int64        `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	ItemId    int64        `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	TypeId    CommentsType `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3,enum=goautowp.CommentsType" json:"type_id,omitempty"`
}

func (x *CommentsMoveCommentRequest) Reset() {
	*x = CommentsMoveCommentRequest{}
	mi := &file_spec_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentsMoveCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentsMoveCommentRequest) ProtoMessage() {}

func (x *CommentsMoveCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentsMoveCommentRequest.ProtoReflect.Descriptor instead.
func (*CommentsMoveCommentRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{139}
}

func (x *CommentsMoveCommentRequest) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *CommentsMoveCommentRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CommentsMoveCommentRequest) GetTypeId() CommentsType {
	if x != nil {
		return x.TypeId
	}
	return CommentsType_UNKNOWN
}

type CommentsVoteCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId int64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Vote      int32 `protobuf:"varint,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *CommentsVoteCommentRequest) Reset() {
	*x = CommentsVoteCommentRequest{}
	mi := &file_spec_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentsVoteCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentsVoteCommentRequest) ProtoMessage() {}

func (x *CommentsVoteCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentsVoteCommentRequest.ProtoReflect.Descriptor instead.
func (*CommentsVoteCommentRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{140}
}

func (x *CommentsVoteCommentRequest) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *CommentsVoteCommentRequest) GetVote() int32 {
	if x != nil {
		return x.Vote
	}
	return 0
}

type CommentsVoteCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Votes int32 `protobuf:"varint,1,opt,name=votes,proto3" json:"votes,omitempty"`
}

func (x *CommentsVoteCommentResponse) Reset() {
	*x = CommentsVoteCommentResponse{}
	mi := &file_spec_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentsVoteCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentsVoteCommentResponse) ProtoMessage() {}

func (x *CommentsVoteCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentsVoteCommentResponse.ProtoReflect.Descriptor instead.
func (*CommentsVoteCommentResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{141}
}

func (x *CommentsVoteCommentResponse) GetVotes() int32 {
	if x != nil {
		return x.Votes
	}
	return 0
}

type LogEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId int64  `protobuf:"varint,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	ItemId    int64  `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	PictureId int64  `protobuf:"varint,3,opt,name=picture_id,json=pictureId,proto3" json:"picture_id,omitempty"`
	UserId    int64  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page      uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *LogEventsRequest) Reset() {
	*x = LogEventsRequest{}
	mi := &file_spec_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEventsRequest) ProtoMessage() {}

func (x *LogEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEventsRequest.ProtoReflect.Descriptor instead.
func (*LogEventsRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{142}
}

func (x *LogEventsRequest) GetArticleId() int64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

func (x *LogEventsRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *LogEventsRequest) GetPictureId() int64 {
	if x != nil {
		return x.PictureId
	}
	return 0
}

func (x *LogEventsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LogEventsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type LogEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items     []*LogEvent `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Paginator *Pages      `protobuf:"bytes,2,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (x *LogEvents) Reset() {
	*x = LogEvents{}
	mi := &file_spec_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEvents) ProtoMessage() {}

func (x *LogEvents) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEvents.ProtoReflect.Descriptor instead.
func (*LogEvents) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{143}
}

func (x *LogEvents) GetItems() []*LogEvent {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *LogEvents) GetPaginator() *Pages {
	if x != nil {
		return x.Paginator
	}
	return nil
}

type LogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	UserId      int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Pictures    []int64                `protobuf:"varint,4,rep,packed,name=pictures,proto3" json:"pictures,omitempty"`
	Items       []int64                `protobuf:"varint,5,rep,packed,name=items,proto3" json:"items,omitempty"`
}

func (x *LogEvent) Reset() {
	*x = LogEvent{}
	mi := &file_spec_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEvent) ProtoMessage() {}

func (x *LogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEvent.ProtoReflect.Descriptor instead.
func (*LogEvent) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{144}
}

func (x *LogEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LogEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LogEvent) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LogEvent) GetPictures() []int64 {
	if x != nil {
		return x.Pictures
	}
	return nil
}

func (x *LogEvent) GetItems() []int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

type MapGetPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointsOnly bool   `protobuf:"varint,1,opt,name=PointsOnly,proto3" json:"PointsOnly,omitempty"`
	Bounds     string `protobuf:"bytes,2,opt,name=bounds,proto3" json:"bounds,omitempty"`
	Language   string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *MapGetPointsRequest) Reset() {
	*x = MapGetPointsRequest{}
	mi := &file_spec_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapGetPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapGetPointsRequest) ProtoMessage() {}

func (x *MapGetPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapGetPointsRequest.ProtoReflect.Descriptor instead.
func (*MapGetPointsRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{145}
}

func (x *MapGetPointsRequest) GetPointsOnly() bool {
	if x != nil {
		return x.PointsOnly
	}
	return false
}

func (x *MapGetPointsRequest) GetBounds() string {
	if x != nil {
		return x.Bounds
	}
	return ""
}

func (x *MapGetPointsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type MapPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*MapPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *MapPoints) Reset() {
	*x = MapPoints{}
	mi := &file_spec_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapPoints) ProtoMessage() {}

func (x *MapPoints) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapPoints.ProtoReflect.Descriptor instead.
func (*MapPoints) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{146}
}

func (x *MapPoints) GetPoints() []*MapPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

type MapPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *latlng.LatLng `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Id       string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name     string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Url      []string       `protobuf:"bytes,4,rep,name=url,proto3" json:"url,omitempty"`
	Image    *APIImage      `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *MapPoint) Reset() {
	*x = MapPoint{}
	mi := &file_spec_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapPoint) ProtoMessage() {}

func (x *MapPoint) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapPoint.ProtoReflect.Descriptor instead.
func (*MapPoint) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{147}
}

func (x *MapPoint) GetLocation() *latlng.LatLng {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *MapPoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MapPoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MapPoint) GetUrl() []string {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *MapPoint) GetImage() *APIImage {
	if x != nil {
		return x.Image
	}
	return nil
}

type PicturesViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PictureId int64 `protobuf:"varint,1,opt,name=picture_id,json=pictureId,proto3" json:"picture_id,omitempty"`
}

func (x *PicturesViewRequest) Reset() {
	*x = PicturesViewRequest{}
	mi := &file_spec_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PicturesViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PicturesViewRequest) ProtoMessage() {}

func (x *PicturesViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PicturesViewRequest.ProtoReflect.Descriptor instead.
func (*PicturesViewRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{148}
}

func (x *PicturesViewRequest) GetPictureId() int64 {
	if x != nil {
		return x.PictureId
	}
	return 0
}

type PicturesVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PictureId int64 `protobuf:"varint,1,opt,name=picture_id,json=pictureId,proto3" json:"picture_id,omitempty"`
	Value     int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PicturesVoteRequest) Reset() {
	*x = PicturesVoteRequest{}
	mi := &file_spec_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PicturesVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PicturesVoteRequest) ProtoMessage() {}

func (x *PicturesVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PicturesVoteRequest.ProtoReflect.Descriptor instead.
func (*PicturesVoteRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{149}
}

func (x *PicturesVoteRequest) GetPictureId() int64 {
	if x != nil {
		return x.PictureId
	}
	return 0
}

func (x *PicturesVoteRequest) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PicturesVoteSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Positive int32 `protobuf:"varint,2,opt,name=positive,proto3" json:"positive,omitempty"`
	Negative int32 `protobuf:"varint,3,opt,name=negative,proto3" json:"negative,omitempty"`
}

func (x *PicturesVoteSummary) Reset() {
	*x = PicturesVoteSummary{}
	mi := &file_spec_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PicturesVoteSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PicturesVoteSummary) ProtoMessage() {}

func (x *PicturesVoteSummary) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PicturesVoteSummary.ProtoReflect.Descriptor instead.
func (*PicturesVoteSummary) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{150}
}

func (x *PicturesVoteSummary) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PicturesVoteSummary) GetPositive() int32 {
	if x != nil {
		return x.Positive
	}
	return 0
}

func (x *PicturesVoteSummary) GetNegative() int32 {
	if x != nil {
		return x.Negative
	}
	return 0
}

type ModerVoteTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId  int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Vote    int32  `protobuf:"varint,4,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *ModerVoteTemplate) Reset() {
	*x = ModerVoteTemplate{}
	mi := &file_spec_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModerVoteTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModerVoteTemplate) ProtoMessage() {}

func (x *ModerVoteTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModerVoteTemplate.ProtoReflect.Descriptor instead.
func (*ModerVoteTemplate) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{151}
}

func (x *ModerVoteTemplate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModerVoteTemplate) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ModerVoteTemplate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModerVoteTemplate) GetVote() int32 {
	if x != nil {
		return x.Vote
	}
	return 0
}

type ModerVoteTemplates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ModerVoteTemplate `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ModerVoteTemplates) Reset() {
	*x = ModerVoteTemplates{}
	mi := &file_spec_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModerVoteTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModerVoteTemplates) ProtoMessage() {}

func (x *ModerVoteTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModerVoteTemplates.ProtoReflect.Descriptor instead.
func (*ModerVoteTemplates) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{152}
}

func (x *ModerVoteTemplates) GetItems() []*ModerVoteTemplate {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeleteModerVoteTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteModerVoteTemplateRequest) Reset() {
	*x = DeleteModerVoteTemplateRequest{}
	mi := &file_spec_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteModerVoteTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModerVoteTemplateRequest) ProtoMessage() {}

func (x *DeleteModerVoteTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModerVoteTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteModerVoteTemplateRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{153}
}

func (x *DeleteModerVoteTemplateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateModerVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PictureId int64  `protobuf:"varint,1,opt,name=picture_id,json=pictureId,proto3" json:"picture_id,omitempty"`
	Reason    string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Vote      int32  `protobuf:"varint,3,opt,name=vote,proto3" json:"vote,omitempty"`
	Save      bool   `protobuf:"varint,4,opt,name=save,proto3" json:"save,omitempty"`
}

func (x *UpdateModerVoteRequest) Reset() {
	*x = UpdateModerVoteRequest{}
	mi := &file_spec_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateModerVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModerVoteRequest) ProtoMessage() {}

func (x *UpdateModerVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModerVoteRequest.ProtoReflect.Descriptor instead.
func (*UpdateModerVoteRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{154}
}

func (x *UpdateModerVoteRequest) GetPictureId() int64 {
	if x != nil {
		return x.PictureId
	}
	return 0
}

func (x *UpdateModerVoteRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UpdateModerVoteRequest) GetVote() int32 {
	if x != nil {
		return x.Vote
	}
	return 0
}

func (x *UpdateModerVoteRequest) GetSave() bool {
	if x != nil {
		return x.Save
	}
	return false
}

type PicturesUserSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InboxCount    int32 `protobuf:"varint,1,opt,name=inbox_count,json=inboxCount,proto3" json:"inbox_count,omitempty"`
	AcceptedCount int32 `protobuf:"varint,2,opt,name=accepted_count,json=acceptedCount,proto3" json:"accepted_count,omitempty"`
}

func (x *PicturesUserSummary) Reset() {
	*x = PicturesUserSummary{}
	mi := &file_spec_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PicturesUserSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PicturesUserSummary) ProtoMessage() {}

func (x *PicturesUserSummary) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PicturesUserSummary.ProtoReflect.Descriptor instead.
func (*PicturesUserSummary) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{155}
}

func (x *PicturesUserSummary) GetInboxCount() int32 {
	if x != nil {
		return x.InboxCount
	}
	return 0
}

func (x *PicturesUserSummary) GetAcceptedCount() int32 {
	if x != nil {
		return x.AcceptedCount
	}
	return 0
}

type PictureIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PictureIDRequest) Reset() {
	*x = PictureIDRequest{}
	mi := &file_spec_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PictureIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureIDRequest) ProtoMessage() {}

func (x *PictureIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureIDRequest.ProtoReflect.Descriptor instead.
func (*PictureIDRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{156}
}

func (x *PictureIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SetPictureItemAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PictureId  int64           `protobuf:"varint,1,opt,name=picture_id,json=pictureId,proto3" json:"picture_id,omitempty"`
	ItemId     int64           `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Type       PictureItemType `protobuf:"varint,3,opt,name=type,proto3,enum=goautowp.PictureItemType" json:"type,omitempty"`
	CropLeft   uint32          `protobuf:"varint,4,opt,name=crop_left,json=cropLeft,proto3" json:"crop_left,omitempty"`
	CropTop    uint32          `protobuf:"varint,5,opt,name=crop_top,json=cropTop,proto3" json:"crop_top,omitempty"`
	CropWidth  uint32          `protobuf:"varint,6,opt,name=crop_width,json=cropWidth,proto3" json:"crop_width,omitempty"`
	CropHeight uint32          `protobuf:"varint,7,opt,name=crop_height,json=cropHeight,proto3" json:"crop_height,omitempty"`
}

func (x *SetPictureItemAreaRequest) Reset() {
	*x = SetPictureItemAreaRequest{}
	mi := &file_spec_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPictureItemAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPictureItemAreaRequest) ProtoMessage() {}

func (x *SetPictureItemAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPictureItemAreaRequest.ProtoReflect.Descriptor instead.
func (*SetPictureItemAreaRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{157}
}

func (x *SetPictureItemAreaRequest) GetPictureId() int64 {
	if x != nil {
		return x.PictureId
	}
	return 0
}

func (x *SetPictureItemAreaRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SetPictureItemAreaRequest) GetType() PictureItemType {
	if x != nil {
		return x.Type
	}
	return PictureItemType_PICTURE_ITEM_UNKNOWN
}

func (x *SetPictureItemAreaRequest) GetCropLeft() uint32 {
	if x != nil {
		return x.CropLeft
	}
	return 0
}

func (x *SetPictureItemAreaRequest) GetCropTop() uint32 {
	if x != nil {
		return x.CropTop
	}
	return 0
}

func (x *SetPictureItemAreaRequest) GetCropWidth() uint32 {
	if x != nil {
		return x.CropWidth
	}
	return 0
}

func (x *SetPictureItemAreaRequest) GetCropHeight() uint32 {
	if x != nil {
		return x.CropHeight
	}
	return 0
}

type SetPictureItemPerspectiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PictureId     int64           `protobuf:"varint,1,opt,name=picture_id,json=pictureId,proto3" json:"picture_id,omitempty"`
	ItemId        int64           `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Type          PictureItemType `protobuf:"varint,3,opt,name=type,proto3,enum=goautowp.PictureItemType" json:"type,omitempty"`
	PerspectiveId int32           `protobuf:"varint,4,opt,name=perspective_id,json=perspectiveId,proto3" json:"perspective_id,omitempty"`
}

func (x *SetPictureItemPerspectiveRequest) Reset() {
	*x = SetPictureItemPerspectiveRequest{}
	mi := &file_spec_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPictureItemPerspectiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPictureItemPerspectiveRequest) ProtoMessage() {}

func (x *SetPictureItemPerspectiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPictureItemPerspectiveRequest.ProtoReflect.Descriptor instead.
func (*SetPictureItemPerspectiveRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{158}
}

func (x *SetPictureItemPerspectiveRequest) GetPictureId() int64 {
	if x != nil {
		return x.PictureId
	}
	return 0
}

func (x *SetPictureItemPerspectiveRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SetPictureItemPerspectiveRequest) GetType() PictureItemType {
	if x != nil {
		return x.Type
	}
	return PictureItemType_PICTURE_ITEM_UNKNOWN
}

func (x *SetPictureItemPerspectiveRequest) GetPerspectiveId() int32 {
	if x != nil {
		return x.PerspectiveId
	}
	return 0
}

type SetPictureItemItemIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PictureId int64           `protobuf:"varint,1,opt,name=picture_id,json=pictureId,proto3" json:"picture_id,omitempty"`
	ItemId    int64           `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Type      PictureItemType `protobuf:"varint,3,opt,name=type,proto3,enum=goautowp.PictureItemType" json:"type,omitempty"`
	NewItemId int64           `protobuf:"varint,4,opt,name=new_item_id,json=newItemId,proto3" json:"new_item_id,omitempty"`
}

func (x *SetPictureItemItemIDRequest) Reset() {
	*x = SetPictureItemItemIDRequest{}
	mi := &file_spec_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPictureItemItemIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPictureItemItemIDRequest) ProtoMessage() {}

func (x *SetPictureItemItemIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPictureItemItemIDRequest.ProtoReflect.Descriptor instead.
func (*SetPictureItemItemIDRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{159}
}

func (x *SetPictureItemItemIDRequest) GetPictureId() int64 {
	if x != nil {
		return x.PictureId
	}
	return 0
}

func (x *SetPictureItemItemIDRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SetPictureItemItemIDRequest) GetType() PictureItemType {
	if x != nil {
		return x.Type
	}
	return PictureItemType_PICTURE_ITEM_UNKNOWN
}

func (x *SetPictureItemItemIDRequest) GetNewItemId() int64 {
	if x != nil {
		return x.NewItemId
	}
	return 0
}

type DeletePictureItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PictureId int64           `protobuf:"varint,1,opt,name=picture_id,json=pictureId,proto3" json:"picture_id,omitempty"`
	ItemId    int64           `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Type      PictureItemType `protobuf:"varint,3,opt,name=type,proto3,enum=goautowp.PictureItemType" json:"type,omitempty"`
}

func (x *DeletePictureItemRequest) Reset() {
	*x = DeletePictureItemRequest{}
	mi := &file_spec_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePictureItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePictureItemRequest) ProtoMessage() {}

func (x *DeletePictureItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePictureItemRequest.ProtoReflect.Descriptor instead.
func (*DeletePictureItemRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{160}
}

func (x *DeletePictureItemRequest) GetPictureId() int64 {
	if x != nil {
		return x.PictureId
	}
	return 0
}

func (x *DeletePictureItemRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *DeletePictureItemRequest) GetType() PictureItemType {
	if x != nil {
		return x.Type
	}
	return PictureItemType_PICTURE_ITEM_UNKNOWN
}

type CreatePictureItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PictureId     int64           `protobuf:"varint,1,opt,name=picture_id,json=pictureId,proto3" json:"picture_id,omitempty"`
	ItemId        int64           `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Type          PictureItemType `protobuf:"varint,3,opt,name=type,proto3,enum=goautowp.PictureItemType" json:"type,omitempty"`
	PerspectiveId int32           `protobuf:"varint,4,opt,name=perspective_id,json=perspectiveId,proto3" json:"perspective_id,omitempty"`
}

func (x *CreatePictureItemRequest) Reset() {
	*x = CreatePictureItemRequest{}
	mi := &file_spec_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePictureItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePictureItemRequest) ProtoMessage() {}

func (x *CreatePictureItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePictureItemRequest.ProtoReflect.Descriptor instead.
func (*CreatePictureItemRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{161}
}

func (x *CreatePictureItemRequest) GetPictureId() int64 {
	if x != nil {
		return x.PictureId
	}
	return 0
}

func (x *CreatePictureItemRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CreatePictureItemRequest) GetType() PictureItemType {
	if x != nil {
		return x.Type
	}
	return PictureItemType_PICTURE_ITEM_UNKNOWN
}

func (x *CreatePictureItemRequest) GetPerspectiveId() int32 {
	if x != nil {
		return x.PerspectiveId
	}
	return 0
}

type SetPictureCropRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PictureId  int64  `protobuf:"varint,1,opt,name=picture_id,json=pictureId,proto3" json:"picture_id,omitempty"`
	CropLeft   uint32 `protobuf:"varint,4,opt,name=crop_left,json=cropLeft,proto3" json:"crop_left,omitempty"`
	CropTop    uint32 `protobuf:"varint,5,opt,name=crop_top,json=cropTop,proto3" json:"crop_top,omitempty"`
	CropWidth  uint32 `protobuf:"varint,6,opt,name=crop_width,json=cropWidth,proto3" json:"crop_width,omitempty"`
	CropHeight uint32 `protobuf:"varint,7,opt,name=crop_height,json=cropHeight,proto3" json:"crop_height,omitempty"`
}

func (x *SetPictureCropRequest) Reset() {
	*x = SetPictureCropRequest{}
	mi := &file_spec_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPictureCropRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPictureCropRequest) ProtoMessage() {}

func (x *SetPictureCropRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPictureCropRequest.ProtoReflect.Descriptor instead.
func (*SetPictureCropRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{162}
}

func (x *SetPictureCropRequest) GetPictureId() int64 {
	if x != nil {
		return x.PictureId
	}
	return 0
}

func (x *SetPictureCropRequest) GetCropLeft() uint32 {
	if x != nil {
		return x.CropLeft
	}
	return 0
}

func (x *SetPictureCropRequest) GetCropTop() uint32 {
	if x != nil {
		return x.CropTop
	}
	return 0
}

func (x *SetPictureCropRequest) GetCropWidth() uint32 {
	if x != nil {
		return x.CropWidth
	}
	return 0
}

func (x *SetPictureCropRequest) GetCropHeight() uint32 {
	if x != nil {
		return x.CropHeight
	}
	return 0
}

type SetPicturePointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PictureId int64          `protobuf:"varint,1,opt,name=picture_id,json=pictureId,proto3" json:"picture_id,omitempty"`
	Point     *latlng.LatLng `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *SetPicturePointRequest) Reset() {
	*x = SetPicturePointRequest{}
	mi := &file_spec_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPicturePointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPicturePointRequest) ProtoMessage() {}

func (x *SetPicturePointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPicturePointRequest.ProtoReflect.Descriptor instead.
func (*SetPicturePointRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{163}
}

func (x *SetPicturePointRequest) GetPictureId() int64 {
	if x != nil {
		return x.PictureId
	}
	return 0
}

func (x *SetPicturePointRequest) GetPoint() *latlng.LatLng {
	if x != nil {
		return x.Point
	}
	return nil
}

type UpdatePictureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TakenDate *date.Date `protobuf:"bytes,2,opt,name=taken_date,json=takenDate,proto3" json:"taken_date,omitempty"`
	Name      string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdatePictureRequest) Reset() {
	*x = UpdatePictureRequest{}
	mi := &file_spec_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePictureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePictureRequest) ProtoMessage() {}

func (x *UpdatePictureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePictureRequest.ProtoReflect.Descriptor instead.
func (*UpdatePictureRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{164}
}

func (x *UpdatePictureRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePictureRequest) GetTakenDate() *date.Date {
	if x != nil {
		return x.TakenDate
	}
	return nil
}

func (x *UpdatePictureRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SetPictureCopyrightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Copyrights string `protobuf:"bytes,2,opt,name=copyrights,proto3" json:"copyrights,omitempty"`
}

func (x *SetPictureCopyrightsRequest) Reset() {
	*x = SetPictureCopyrightsRequest{}
	mi := &file_spec_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPictureCopyrightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPictureCopyrightsRequest) ProtoMessage() {}

func (x *SetPictureCopyrightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPictureCopyrightsRequest.ProtoReflect.Descriptor instead.
func (*SetPictureCopyrightsRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{165}
}

func (x *SetPictureCopyrightsRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetPictureCopyrightsRequest) GetCopyrights() string {
	if x != nil {
		return x.Copyrights
	}
	return ""
}

type SetPictureStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status PictureStatus `protobuf:"varint,2,opt,name=status,proto3,enum=goautowp.PictureStatus" json:"status,omitempty"`
}

func (x *SetPictureStatusRequest) Reset() {
	*x = SetPictureStatusRequest{}
	mi := &file_spec_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPictureStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPictureStatusRequest) ProtoMessage() {}

func (x *SetPictureStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPictureStatusRequest.ProtoReflect.Descriptor instead.
func (*SetPictureStatusRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{166}
}

func (x *SetPictureStatusRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetPictureStatusRequest) GetStatus() PictureStatus {
	if x != nil {
		return x.Status
	}
	return PictureStatus_PICTURE_STATUS_UNKNOWN
}

type DeleteSimilarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SimilarPictureId int64 `protobuf:"varint,2,opt,name=similar_picture_id,json=similarPictureId,proto3" json:"similar_picture_id,omitempty"`
}

func (x *DeleteSimilarRequest) Reset() {
	*x = DeleteSimilarRequest{}
	mi := &file_spec_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSimilarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSimilarRequest) ProtoMessage() {}

func (x *DeleteSimilarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSimilarRequest.ProtoReflect.Descriptor instead.
func (*DeleteSimilarRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{167}
}

func (x *DeleteSimilarRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteSimilarRequest) GetSimilarPictureId() int64 {
	if x != nil {
		return x.SimilarPictureId
	}
	return 0
}

type DeleteModerVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PictureId int64 `protobuf:"varint,1,opt,name=picture_id,json=pictureId,proto3" json:"picture_id,omitempty"`
}

func (x *DeleteModerVoteRequest) Reset() {
	*x = DeleteModerVoteRequest{}
	mi := &file_spec_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteModerVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModerVoteRequest) ProtoMessage() {}

func (x *DeleteModerVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModerVoteRequest.ProtoReflect.Descriptor instead.
func (*DeleteModerVoteRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{168}
}

func (x *DeleteModerVoteRequest) GetPictureId() int64 {
	if x != nil {
		return x.PictureId
	}
	return 0
}

type MessagingDeleteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId int64 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *MessagingDeleteMessage) Reset() {
	*x = MessagingDeleteMessage{}
	mi := &file_spec_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagingDeleteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingDeleteMessage) ProtoMessage() {}

func (x *MessagingDeleteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingDeleteMessage.ProtoReflect.Descriptor instead.
func (*MessagingDeleteMessage) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{169}
}

func (x *MessagingDeleteMessage) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type MessagingClearFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Folder string `protobuf:"bytes,1,opt,name=folder,proto3" json:"folder,omitempty"`
}

func (x *MessagingClearFolder) Reset() {
	*x = MessagingClearFolder{}
	mi := &file_spec_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagingClearFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingClearFolder) ProtoMessage() {}

func (x *MessagingClearFolder) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingClearFolder.ProtoReflect.Descriptor instead.
func (*MessagingClearFolder) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{170}
}

func (x *MessagingClearFolder) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

type MessagingCreateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MessagingCreateMessage) Reset() {
	*x = MessagingCreateMessage{}
	mi := &file_spec_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagingCreateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingCreateMessage) ProtoMessage() {}

func (x *MessagingCreateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingCreateMessage.ProtoReflect.Descriptor instead.
func (*MessagingCreateMessage) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{171}
}

func (x *MessagingCreateMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessagingCreateMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type APIMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text             string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	IsNew            bool                   `protobuf:"varint,3,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
	CanDelete        bool                   `protobuf:"varint,4,opt,name=can_delete,json=canDelete,proto3" json:"can_delete,omitempty"`
	CanReply         bool                   `protobuf:"varint,5,opt,name=can_reply,json=canReply,proto3" json:"can_reply,omitempty"`
	Date             *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	AllMessagesLink  bool                   `protobuf:"varint,7,opt,name=all_messages_link,json=allMessagesLink,proto3" json:"all_messages_link,omitempty"`
	DialogCount      int32                  `protobuf:"varint,8,opt,name=dialog_count,json=dialogCount,proto3" json:"dialog_count,omitempty"`
	AuthorId         int64                  `protobuf:"varint,9,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	ToUserId         int64                  `protobuf:"varint,10,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id,omitempty"`
	DialogWithUserId int64                  `protobuf:"varint,11,opt,name=dialog_with_user_id,json=dialogWithUserId,proto3" json:"dialog_with_user_id,omitempty"`
}

func (x *APIMessage) Reset() {
	*x = APIMessage{}
	mi := &file_spec_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIMessage) ProtoMessage() {}

func (x *APIMessage) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIMessage.ProtoReflect.Descriptor instead.
func (*APIMessage) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{172}
}

func (x *APIMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APIMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *APIMessage) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *APIMessage) GetCanDelete() bool {
	if x != nil {
		return x.CanDelete
	}
	return false
}

func (x *APIMessage) GetCanReply() bool {
	if x != nil {
		return x.CanReply
	}
	return false
}

func (x *APIMessage) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *APIMessage) GetAllMessagesLink() bool {
	if x != nil {
		return x.AllMessagesLink
	}
	return false
}

func (x *APIMessage) GetDialogCount() int32 {
	if x != nil {
		return x.DialogCount
	}
	return 0
}

func (x *APIMessage) GetAuthorId() int64 {
	if x != nil {
		return x.AuthorId
	}
	return 0
}

func (x *APIMessage) GetToUserId() int64 {
	if x != nil {
		return x.ToUserId
	}
	return 0
}

func (x *APIMessage) GetDialogWithUserId() int64 {
	if x != nil {
		return x.DialogWithUserId
	}
	return 0
}

type MessagingGetMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Folder string `protobuf:"bytes,2,opt,name=folder,proto3" json:"folder,omitempty"`
	Page   int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *MessagingGetMessagesRequest) Reset() {
	*x = MessagingGetMessagesRequest{}
	mi := &file_spec_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagingGetMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingGetMessagesRequest) ProtoMessage() {}

func (x *MessagingGetMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingGetMessagesRequest.ProtoReflect.Descriptor instead.
func (*MessagingGetMessagesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{173}
}

func (x *MessagingGetMessagesRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessagingGetMessagesRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *MessagingGetMessagesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type MessagingGetMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items     []*APIMessage `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Paginator *Pages        `protobuf:"bytes,2,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (x *MessagingGetMessagesResponse) Reset() {
	*x = MessagingGetMessagesResponse{}
	mi := &file_spec_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagingGetMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingGetMessagesResponse) ProtoMessage() {}

func (x *MessagingGetMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingGetMessagesResponse.ProtoReflect.Descriptor instead.
func (*MessagingGetMessagesResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{174}
}

func (x *MessagingGetMessagesResponse) GetItems() []*APIMessage {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MessagingGetMessagesResponse) GetPaginator() *Pages {
	if x != nil {
		return x.Paginator
	}
	return nil
}

type Pages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageCount        int32   `protobuf:"varint,1,opt,name=pageCount,proto3" json:"pageCount,omitempty"`
	First            int32   `protobuf:"varint,2,opt,name=first,proto3" json:"first,omitempty"`
	Current          int32   `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	Next             int32   `protobuf:"varint,5,opt,name=next,proto3" json:"next,omitempty"`
	Previous         int32   `protobuf:"varint,6,opt,name=previous,proto3" json:"previous,omitempty"`
	FirstPageInRange int32   `protobuf:"varint,7,opt,name=firstPageInRange,proto3" json:"firstPageInRange,omitempty"`
	LastPageInRange  int32   `protobuf:"varint,8,opt,name=lastPageInRange,proto3" json:"lastPageInRange,omitempty"`
	PagesInRange     []int32 `protobuf:"varint,9,rep,packed,name=pagesInRange,proto3" json:"pagesInRange,omitempty"`
	TotalItemCount   int32   `protobuf:"varint,10,opt,name=totalItemCount,proto3" json:"totalItemCount,omitempty"`
	Last             int32   `protobuf:"varint,11,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *Pages) Reset() {
	*x = Pages{}
	mi := &file_spec_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pages) ProtoMessage() {}

func (x *Pages) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pages.ProtoReflect.Descriptor instead.
func (*Pages) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{175}
}

func (x *Pages) GetPageCount() int32 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

func (x *Pages) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *Pages) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Pages) GetNext() int32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *Pages) GetPrevious() int32 {
	if x != nil {
		return x.Previous
	}
	return 0
}

func (x *Pages) GetFirstPageInRange() int32 {
	if x != nil {
		return x.FirstPageInRange
	}
	return 0
}

func (x *Pages) GetLastPageInRange() int32 {
	if x != nil {
		return x.LastPageInRange
	}
	return 0
}

func (x *Pages) GetPagesInRange() []int32 {
	if x != nil {
		return x.PagesInRange
	}
	return nil
}

func (x *Pages) GetTotalItemCount() int32 {
	if x != nil {
		return x.TotalItemCount
	}
	return 0
}

func (x *Pages) GetLast() int32 {
	if x != nil {
		return x.Last
	}
	return 0
}

type DonationsTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sum         int32                  `protobuf:"varint,1,opt,name=sum,proto3" json:"sum,omitempty"`
	Currency    string                 `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Date        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Contributor string                 `protobuf:"bytes,4,opt,name=contributor,proto3" json:"contributor,omitempty"`
	Purpose     string                 `protobuf:"bytes,5,opt,name=purpose,proto3" json:"purpose,omitempty"`
	UserId      int64                  `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DonationsTransaction) Reset() {
	*x = DonationsTransaction{}
	mi := &file_spec_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DonationsTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonationsTransaction) ProtoMessage() {}

func (x *DonationsTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonationsTransaction.ProtoReflect.Descriptor instead.
func (*DonationsTransaction) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{176}
}

func (x *DonationsTransaction) GetSum() int32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *DonationsTransaction) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DonationsTransaction) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DonationsTransaction) GetContributor() string {
	if x != nil {
		return x.Contributor
	}
	return ""
}

func (x *DonationsTransaction) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *DonationsTransaction) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type DonationsTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*DonationsTransaction `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *DonationsTransactionsResponse) Reset() {
	*x = DonationsTransactionsResponse{}
	mi := &file_spec_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DonationsTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonationsTransactionsResponse) ProtoMessage() {}

func (x *DonationsTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonationsTransactionsResponse.ProtoReflect.Descriptor instead.
func (*DonationsTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{177}
}

func (x *DonationsTransactionsResponse) GetItems() []*DonationsTransaction {
	if x != nil {
		return x.Items
	}
	return nil
}

type VODDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dates []*VODDataDate `protobuf:"bytes,1,rep,name=dates,proto3" json:"dates,omitempty"`
	Sum   int32          `protobuf:"varint,2,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *VODDataResponse) Reset() {
	*x = VODDataResponse{}
	mi := &file_spec_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VODDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VODDataResponse) ProtoMessage() {}

func (x *VODDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VODDataResponse.ProtoReflect.Descriptor instead.
func (*VODDataResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{178}
}

func (x *VODDataResponse) GetDates() []*VODDataDate {
	if x != nil {
		return x.Dates
	}
	return nil
}

func (x *VODDataResponse) GetSum() int32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type VODDataDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Free bool                   `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
}

func (x *VODDataDate) Reset() {
	*x = VODDataDate{}
	mi := &file_spec_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VODDataDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VODDataDate) ProtoMessage() {}

func (x *VODDataDate) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VODDataDate.ProtoReflect.Descriptor instead.
func (*VODDataDate) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{179}
}

func (x *VODDataDate) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *VODDataDate) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

type AboutDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Developer      string   `protobuf:"bytes,1,opt,name=developer,proto3" json:"developer,omitempty"`
	FrTranslator   string   `protobuf:"bytes,2,opt,name=fr_translator,json=frTranslator,proto3" json:"fr_translator,omitempty"`
	ZhTranslator   string   `protobuf:"bytes,3,opt,name=zh_translator,json=zhTranslator,proto3" json:"zh_translator,omitempty"`
	BeTranslator   string   `protobuf:"bytes,4,opt,name=be_translator,json=beTranslator,proto3" json:"be_translator,omitempty"`
	PtBrTranslator string   `protobuf:"bytes,5,opt,name=pt_br_translator,json=ptBrTranslator,proto3" json:"pt_br_translator,omitempty"`
	Contributors   []string `protobuf:"bytes,6,rep,name=contributors,proto3" json:"contributors,omitempty"`
	TotalPictures  int32    `protobuf:"varint,7,opt,name=total_pictures,json=totalPictures,proto3" json:"total_pictures,omitempty"`
	PicturesSize   int32    `protobuf:"varint,8,opt,name=pictures_size,json=picturesSize,proto3" json:"pictures_size,omitempty"`
	TotalUsers     int32    `protobuf:"varint,9,opt,name=total_users,json=totalUsers,proto3" json:"total_users,omitempty"`
	TotalItems     int32    `protobuf:"varint,10,opt,name=total_items,json=totalItems,proto3" json:"total_items,omitempty"`
	TotalComments  int32    `protobuf:"varint,11,opt,name=total_comments,json=totalComments,proto3" json:"total_comments,omitempty"`
}

func (x *AboutDataResponse) Reset() {
	*x = AboutDataResponse{}
	mi := &file_spec_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AboutDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AboutDataResponse) ProtoMessage() {}

func (x *AboutDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AboutDataResponse.ProtoReflect.Descriptor instead.
func (*AboutDataResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{180}
}

func (x *AboutDataResponse) GetDeveloper() string {
	if x != nil {
		return x.Developer
	}
	return ""
}

func (x *AboutDataResponse) GetFrTranslator() string {
	if x != nil {
		return x.FrTranslator
	}
	return ""
}

func (x *AboutDataResponse) GetZhTranslator() string {
	if x != nil {
		return x.ZhTranslator
	}
	return ""
}

func (x *AboutDataResponse) GetBeTranslator() string {
	if x != nil {
		return x.BeTranslator
	}
	return ""
}

func (x *AboutDataResponse) GetPtBrTranslator() string {
	if x != nil {
		return x.PtBrTranslator
	}
	return ""
}

func (x *AboutDataResponse) GetContributors() []string {
	if x != nil {
		return x.Contributors
	}
	return nil
}

func (x *AboutDataResponse) GetTotalPictures() int32 {
	if x != nil {
		return x.TotalPictures
	}
	return 0
}

func (x *AboutDataResponse) GetPicturesSize() int32 {
	if x != nil {
		return x.PicturesSize
	}
	return 0
}

func (x *AboutDataResponse) GetTotalUsers() int32 {
	if x != nil {
		return x.TotalUsers
	}
	return 0
}

func (x *AboutDataResponse) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

func (x *AboutDataResponse) GetTotalComments() int32 {
	if x != nil {
		return x.TotalComments
	}
	return 0
}

type APIUserPreferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *APIUserPreferencesRequest) Reset() {
	*x = APIUserPreferencesRequest{}
	mi := &file_spec_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIUserPreferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIUserPreferencesRequest) ProtoMessage() {}

func (x *APIUserPreferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIUserPreferencesRequest.ProtoReflect.Descriptor instead.
func (*APIUserPreferencesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{181}
}

func (x *APIUserPreferencesRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type APIUserPreferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisableCommentsNotifications bool `protobuf:"varint,1,opt,name=disable_comments_notifications,json=disableCommentsNotifications,proto3" json:"disable_comments_notifications,omitempty"`
}

func (x *APIUserPreferencesResponse) Reset() {
	*x = APIUserPreferencesResponse{}
	mi := &file_spec_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIUserPreferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIUserPreferencesResponse) ProtoMessage() {}

func (x *APIUserPreferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIUserPreferencesResponse.ProtoReflect.Descriptor instead.
func (*APIUserPreferencesResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{182}
}

func (x *APIUserPreferencesResponse) GetDisableCommentsNotifications() bool {
	if x != nil {
		return x.DisableCommentsNotifications
	}
	return false
}

type APIUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOnline bool        `protobuf:"varint,2,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	Limit    uint64      `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page     uint64      `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Fields   *UserFields `protobuf:"bytes,5,opt,name=fields,proto3" json:"fields,omitempty"`
	Search   string      `protobuf:"bytes,6,opt,name=search,proto3" json:"search,omitempty"`
	Id       []int64     `protobuf:"varint,7,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *APIUsersRequest) Reset() {
	*x = APIUsersRequest{}
	mi := &file_spec_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIUsersRequest) ProtoMessage() {}

func (x *APIUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIUsersRequest.ProtoReflect.Descriptor instead.
func (*APIUsersRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{183}
}

func (x *APIUsersRequest) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *APIUsersRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *APIUsersRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *APIUsersRequest) GetFields() *UserFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *APIUsersRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *APIUsersRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

type APIUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items     []*APIUser `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Paginator *Pages     `protobuf:"bytes,2,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (x *APIUsersResponse) Reset() {
	*x = APIUsersResponse{}
	mi := &file_spec_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIUsersResponse) ProtoMessage() {}

func (x *APIUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIUsersResponse.ProtoReflect.Descriptor instead.
func (*APIUsersResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{184}
}

func (x *APIUsersResponse) GetItems() []*APIUser {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *APIUsersResponse) GetPaginator() *Pages {
	if x != nil {
		return x.Paginator
	}
	return nil
}

type APIUsersRatingUserBrand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Route  []string `protobuf:"bytes,2,rep,name=route,proto3" json:"route,omitempty"`
	Volume int64    `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *APIUsersRatingUserBrand) Reset() {
	*x = APIUsersRatingUserBrand{}
	mi := &file_spec_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIUsersRatingUserBrand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIUsersRatingUserBrand) ProtoMessage() {}

func (x *APIUsersRatingUserBrand) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIUsersRatingUserBrand.ProtoReflect.Descriptor instead.
func (*APIUsersRatingUserBrand) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{185}
}

func (x *APIUsersRatingUserBrand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIUsersRatingUserBrand) GetRoute() []string {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *APIUsersRatingUserBrand) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type APIUsersRatingUserFan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Volume int64 `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *APIUsersRatingUserFan) Reset() {
	*x = APIUsersRatingUserFan{}
	mi := &file_spec_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIUsersRatingUserFan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIUsersRatingUserFan) ProtoMessage() {}

func (x *APIUsersRatingUserFan) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIUsersRatingUserFan.ProtoReflect.Descriptor instead.
func (*APIUsersRatingUserFan) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{186}
}

func (x *APIUsersRatingUserFan) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *APIUsersRatingUserFan) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type APIUsersRatingUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Volume int64   `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
	Weight float64 `protobuf:"fixed64,3,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *APIUsersRatingUser) Reset() {
	*x = APIUsersRatingUser{}
	mi := &file_spec_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIUsersRatingUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIUsersRatingUser) ProtoMessage() {}

func (x *APIUsersRatingUser) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIUsersRatingUser.ProtoReflect.Descriptor instead.
func (*APIUsersRatingUser) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{187}
}

func (x *APIUsersRatingUser) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *APIUsersRatingUser) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *APIUsersRatingUser) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type APIUsersRatingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*APIUsersRatingUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *APIUsersRatingResponse) Reset() {
	*x = APIUsersRatingResponse{}
	mi := &file_spec_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIUsersRatingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIUsersRatingResponse) ProtoMessage() {}

func (x *APIUsersRatingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIUsersRatingResponse.ProtoReflect.Descriptor instead.
func (*APIUsersRatingResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{188}
}

func (x *APIUsersRatingResponse) GetUsers() []*APIUsersRatingUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type UserRatingDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *UserRatingDetailsRequest) Reset() {
	*x = UserRatingDetailsRequest{}
	mi := &file_spec_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRatingDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRatingDetailsRequest) ProtoMessage() {}

func (x *UserRatingDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRatingDetailsRequest.ProtoReflect.Descriptor instead.
func (*UserRatingDetailsRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{189}
}

func (x *UserRatingDetailsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserRatingDetailsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type UserRatingBrandsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brands []*APIUsersRatingUserBrand `protobuf:"bytes,1,rep,name=brands,proto3" json:"brands,omitempty"`
}

func (x *UserRatingBrandsResponse) Reset() {
	*x = UserRatingBrandsResponse{}
	mi := &file_spec_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRatingBrandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRatingBrandsResponse) ProtoMessage() {}

func (x *UserRatingBrandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRatingBrandsResponse.ProtoReflect.Descriptor instead.
func (*UserRatingBrandsResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{190}
}

func (x *UserRatingBrandsResponse) GetBrands() []*APIUsersRatingUserBrand {
	if x != nil {
		return x.Brands
	}
	return nil
}

type GetUserRatingFansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fans []*APIUsersRatingUserFan `protobuf:"bytes,1,rep,name=fans,proto3" json:"fans,omitempty"`
}

func (x *GetUserRatingFansResponse) Reset() {
	*x = GetUserRatingFansResponse{}
	mi := &file_spec_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRatingFansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRatingFansResponse) ProtoMessage() {}

func (x *GetUserRatingFansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRatingFansResponse.ProtoReflect.Descriptor instead.
func (*GetUserRatingFansResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{191}
}

func (x *GetUserRatingFansResponse) GetFans() []*APIUsersRatingUserFan {
	if x != nil {
		return x.Fans
	}
	return nil
}

type ArticlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ArticlesRequest) Reset() {
	*x = ArticlesRequest{}
	mi := &file_spec_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticlesRequest) ProtoMessage() {}

func (x *ArticlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticlesRequest.ProtoReflect.Descriptor instead.
func (*ArticlesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{192}
}

func (x *ArticlesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ArticlesRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ArticlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items     []*Article `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Paginator *Pages     `protobuf:"bytes,2,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (x *ArticlesResponse) Reset() {
	*x = ArticlesResponse{}
	mi := &file_spec_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticlesResponse) ProtoMessage() {}

func (x *ArticlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticlesResponse.ProtoReflect.Descriptor instead.
func (*ArticlesResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{193}
}

func (x *ArticlesResponse) GetItems() []*Article {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ArticlesResponse) GetPaginator() *Pages {
	if x != nil {
		return x.Paginator
	}
	return nil
}

type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AuthorId    int64                  `protobuf:"varint,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Catname     string                 `protobuf:"bytes,4,opt,name=catname,proto3" json:"catname,omitempty"`
	Date        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	Html        string                 `protobuf:"bytes,6,opt,name=html,proto3" json:"html,omitempty"`
	PreviewUrl  string                 `protobuf:"bytes,7,opt,name=preview_url,json=previewUrl,proto3" json:"preview_url,omitempty"`
	Description string                 `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	mi := &file_spec_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{194}
}

func (x *Article) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Article) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Article) GetAuthorId() int64 {
	if x != nil {
		return x.AuthorId
	}
	return 0
}

func (x *Article) GetCatname() string {
	if x != nil {
		return x.Catname
	}
	return ""
}

func (x *Article) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Article) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

func (x *Article) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

func (x *Article) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ArticleByCatnameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catname string `protobuf:"bytes,1,opt,name=catname,proto3" json:"catname,omitempty"`
}

func (x *ArticleByCatnameRequest) Reset() {
	*x = ArticleByCatnameRequest{}
	mi := &file_spec_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleByCatnameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleByCatnameRequest) ProtoMessage() {}

func (x *ArticleByCatnameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleByCatnameRequest.ProtoReflect.Descriptor instead.
func (*ArticleByCatnameRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{195}
}

func (x *ArticleByCatnameRequest) GetCatname() string {
	if x != nil {
		return x.Catname
	}
	return ""
}

type APIContentLanguages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Languages []string `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty"`
}

func (x *APIContentLanguages) Reset() {
	*x = APIContentLanguages{}
	mi := &file_spec_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIContentLanguages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIContentLanguages) ProtoMessage() {}

func (x *APIContentLanguages) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIContentLanguages.ProtoReflect.Descriptor instead.
func (*APIContentLanguages) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{196}
}

func (x *APIContentLanguages) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

type APIItemLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *APIItemLinkRequest) Reset() {
	*x = APIItemLinkRequest{}
	mi := &file_spec_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIItemLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIItemLinkRequest) ProtoMessage() {}

func (x *APIItemLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIItemLinkRequest.ProtoReflect.Descriptor instead.
func (*APIItemLinkRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{197}
}

func (x *APIItemLinkRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type APIGetItemLinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *APIGetItemLinksRequest) Reset() {
	*x = APIGetItemLinksRequest{}
	mi := &file_spec_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIGetItemLinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGetItemLinksRequest) ProtoMessage() {}

func (x *APIGetItemLinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGetItemLinksRequest.ProtoReflect.Descriptor instead.
func (*APIGetItemLinksRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{198}
}

func (x *APIGetItemLinksRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type APIItemLinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*APIItemLink `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *APIItemLinksResponse) Reset() {
	*x = APIItemLinksResponse{}
	mi := &file_spec_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIItemLinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIItemLinksResponse) ProtoMessage() {}

func (x *APIItemLinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIItemLinksResponse.ProtoReflect.Descriptor instead.
func (*APIItemLinksResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{199}
}

func (x *APIItemLinksResponse) GetItems() []*APIItemLink {
	if x != nil {
		return x.Items
	}
	return nil
}

type APIItemLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url    string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Type   string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ItemId int64  `protobuf:"varint,5,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *APIItemLink) Reset() {
	*x = APIItemLink{}
	mi := &file_spec_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIItemLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIItemLink) ProtoMessage() {}

func (x *APIItemLink) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIItemLink.ProtoReflect.Descriptor instead.
func (*APIItemLink) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{200}
}

func (x *APIItemLink) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APIItemLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIItemLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *APIItemLink) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *APIItemLink) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type APICreateItemLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *APICreateItemLinkResponse) Reset() {
	*x = APICreateItemLinkResponse{}
	mi := &file_spec_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APICreateItemLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APICreateItemLinkResponse) ProtoMessage() {}

func (x *APICreateItemLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APICreateItemLinkResponse.ProtoReflect.Descriptor instead.
func (*APICreateItemLinkResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{201}
}

func (x *APICreateItemLinkResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type APIGetItemVehicleTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId        int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	VehicleTypeId int64 `protobuf:"varint,2,opt,name=vehicle_type_id,json=vehicleTypeId,proto3" json:"vehicle_type_id,omitempty"`
}

func (x *APIGetItemVehicleTypesRequest) Reset() {
	*x = APIGetItemVehicleTypesRequest{}
	mi := &file_spec_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIGetItemVehicleTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGetItemVehicleTypesRequest) ProtoMessage() {}

func (x *APIGetItemVehicleTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGetItemVehicleTypesRequest.ProtoReflect.Descriptor instead.
func (*APIGetItemVehicleTypesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{202}
}

func (x *APIGetItemVehicleTypesRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *APIGetItemVehicleTypesRequest) GetVehicleTypeId() int64 {
	if x != nil {
		return x.VehicleTypeId
	}
	return 0
}

type APIItemVehicleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId        int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	VehicleTypeId int64 `protobuf:"varint,2,opt,name=vehicle_type_id,json=vehicleTypeId,proto3" json:"vehicle_type_id,omitempty"`
}

func (x *APIItemVehicleType) Reset() {
	*x = APIItemVehicleType{}
	mi := &file_spec_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIItemVehicleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIItemVehicleType) ProtoMessage() {}

func (x *APIItemVehicleType) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIItemVehicleType.ProtoReflect.Descriptor instead.
func (*APIItemVehicleType) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{203}
}

func (x *APIItemVehicleType) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *APIItemVehicleType) GetVehicleTypeId() int64 {
	if x != nil {
		return x.VehicleTypeId
	}
	return 0
}

type APIGetItemVehicleTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*APIItemVehicleType `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *APIGetItemVehicleTypesResponse) Reset() {
	*x = APIGetItemVehicleTypesResponse{}
	mi := &file_spec_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIGetItemVehicleTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGetItemVehicleTypesResponse) ProtoMessage() {}

func (x *APIGetItemVehicleTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGetItemVehicleTypesResponse.ProtoReflect.Descriptor instead.
func (*APIGetItemVehicleTypesResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{204}
}

func (x *APIGetItemVehicleTypesResponse) GetItems() []*APIItemVehicleType {
	if x != nil {
		return x.Items
	}
	return nil
}

type APIItemVehicleTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId        int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	VehicleTypeId int64 `protobuf:"varint,2,opt,name=vehicle_type_id,json=vehicleTypeId,proto3" json:"vehicle_type_id,omitempty"`
}

func (x *APIItemVehicleTypeRequest) Reset() {
	*x = APIItemVehicleTypeRequest{}
	mi := &file_spec_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIItemVehicleTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIItemVehicleTypeRequest) ProtoMessage() {}

func (x *APIItemVehicleTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIItemVehicleTypeRequest.ProtoReflect.Descriptor instead.
func (*APIItemVehicleTypeRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{205}
}

func (x *APIItemVehicleTypeRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *APIItemVehicleTypeRequest) GetVehicleTypeId() int64 {
	if x != nil {
		return x.VehicleTypeId
	}
	return 0
}

type APIGetItemLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *APIGetItemLanguagesRequest) Reset() {
	*x = APIGetItemLanguagesRequest{}
	mi := &file_spec_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIGetItemLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGetItemLanguagesRequest) ProtoMessage() {}

func (x *APIGetItemLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGetItemLanguagesRequest.ProtoReflect.Descriptor instead.
func (*APIGetItemLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{206}
}

func (x *APIGetItemLanguagesRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type ItemLanguages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ItemLanguage `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ItemLanguages) Reset() {
	*x = ItemLanguages{}
	mi := &file_spec_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemLanguages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemLanguages) ProtoMessage() {}

func (x *ItemLanguages) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemLanguages.ProtoReflect.Descriptor instead.
func (*ItemLanguages) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{207}
}

func (x *ItemLanguages) GetItems() []*ItemLanguage {
	if x != nil {
		return x.Items
	}
	return nil
}

type ItemLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int64  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Language   string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TextId     int32  `protobuf:"varint,4,opt,name=text_id,json=textId,proto3" json:"text_id,omitempty"`
	Text       string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	FullTextId int32  `protobuf:"varint,6,opt,name=full_text_id,json=fullTextId,proto3" json:"full_text_id,omitempty"`
	FullText   string `protobuf:"bytes,7,opt,name=full_text,json=fullText,proto3" json:"full_text,omitempty"`
}

func (x *ItemLanguage) Reset() {
	*x = ItemLanguage{}
	mi := &file_spec_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemLanguage) ProtoMessage() {}

func (x *ItemLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemLanguage.ProtoReflect.Descriptor instead.
func (*ItemLanguage) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{208}
}

func (x *ItemLanguage) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemLanguage) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ItemLanguage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemLanguage) GetTextId() int32 {
	if x != nil {
		return x.TextId
	}
	return 0
}

func (x *ItemLanguage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ItemLanguage) GetFullTextId() int32 {
	if x != nil {
		return x.FullTextId
	}
	return 0
}

func (x *ItemLanguage) GetFullText() string {
	if x != nil {
		return x.FullText
	}
	return ""
}

type APIGetItemParentLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ParentId int64 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *APIGetItemParentLanguagesRequest) Reset() {
	*x = APIGetItemParentLanguagesRequest{}
	mi := &file_spec_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIGetItemParentLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGetItemParentLanguagesRequest) ProtoMessage() {}

func (x *APIGetItemParentLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGetItemParentLanguagesRequest.ProtoReflect.Descriptor instead.
func (*APIGetItemParentLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{209}
}

func (x *APIGetItemParentLanguagesRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *APIGetItemParentLanguagesRequest) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type ItemParentLanguages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ItemParentLanguage `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ItemParentLanguages) Reset() {
	*x = ItemParentLanguages{}
	mi := &file_spec_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemParentLanguages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemParentLanguages) ProtoMessage() {}

func (x *ItemParentLanguages) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemParentLanguages.ProtoReflect.Descriptor instead.
func (*ItemParentLanguages) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{210}
}

func (x *ItemParentLanguages) GetItems() []*ItemParentLanguage {
	if x != nil {
		return x.Items
	}
	return nil
}

type ItemParentLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   int64  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ParentId int64  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Language string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *ItemParentLanguage) Reset() {
	*x = ItemParentLanguage{}
	mi := &file_spec_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemParentLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemParentLanguage) ProtoMessage() {}

func (x *ItemParentLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemParentLanguage.ProtoReflect.Descriptor instead.
func (*ItemParentLanguage) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{211}
}

func (x *ItemParentLanguage) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemParentLanguage) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ItemParentLanguage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemParentLanguage) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type StatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*StatsValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StatsResponse) Reset() {
	*x = StatsResponse{}
	mi := &file_spec_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsResponse) ProtoMessage() {}

func (x *StatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsResponse.ProtoReflect.Descriptor instead.
func (*StatsResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{212}
}

func (x *StatsResponse) GetValues() []*StatsValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type StatsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Total int32  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Value int32  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StatsValue) Reset() {
	*x = StatsValue{}
	mi := &file_spec_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsValue) ProtoMessage() {}

func (x *StatsValue) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsValue.ProtoReflect.Descriptor instead.
func (*StatsValue) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{213}
}

func (x *StatsValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatsValue) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *StatsValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type NewItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   int64  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *NewItemsRequest) Reset() {
	*x = NewItemsRequest{}
	mi := &file_spec_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewItemsRequest) ProtoMessage() {}

func (x *NewItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewItemsRequest.ProtoReflect.Descriptor instead.
func (*NewItemsRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{214}
}

func (x *NewItemsRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *NewItemsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type NewItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brand *APIItem   `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand,omitempty"`
	Items []*APIItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *NewItemsResponse) Reset() {
	*x = NewItemsResponse{}
	mi := &file_spec_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewItemsResponse) ProtoMessage() {}

func (x *NewItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewItemsResponse.ProtoReflect.Descriptor instead.
func (*NewItemsResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{215}
}

func (x *NewItemsResponse) GetBrand() *APIItem {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *NewItemsResponse) GetItems() []*APIItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ItemParent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   int64          `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ParentId int64          `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Type     ItemParentType `protobuf:"varint,3,opt,name=type,proto3,enum=goautowp.ItemParentType" json:"type,omitempty"`
	Catname  string         `protobuf:"bytes,4,opt,name=catname,proto3" json:"catname,omitempty"`
}

func (x *ItemParent) Reset() {
	*x = ItemParent{}
	mi := &file_spec_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemParent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemParent) ProtoMessage() {}

func (x *ItemParent) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemParent.ProtoReflect.Descriptor instead.
func (*ItemParent) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{216}
}

func (x *ItemParent) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemParent) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ItemParent) GetType() ItemParentType {
	if x != nil {
		return x.Type
	}
	return ItemParentType_ITEM_TYPE_DEFAULT
}

func (x *ItemParent) GetCatname() string {
	if x != nil {
		return x.Catname
	}
	return ""
}

type DeleteItemParentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ParentId int64 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *DeleteItemParentRequest) Reset() {
	*x = DeleteItemParentRequest{}
	mi := &file_spec_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteItemParentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteItemParentRequest) ProtoMessage() {}

func (x *DeleteItemParentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteItemParentRequest.ProtoReflect.Descriptor instead.
func (*DeleteItemParentRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{217}
}

func (x *DeleteItemParentRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *DeleteItemParentRequest) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type MoveItemParentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId       int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ParentId     int64 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	DestParentId int64 `protobuf:"varint,3,opt,name=dest_parent_id,json=destParentId,proto3" json:"dest_parent_id,omitempty"`
}

func (x *MoveItemParentRequest) Reset() {
	*x = MoveItemParentRequest{}
	mi := &file_spec_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveItemParentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveItemParentRequest) ProtoMessage() {}

func (x *MoveItemParentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveItemParentRequest.ProtoReflect.Descriptor instead.
func (*MoveItemParentRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{218}
}

func (x *MoveItemParentRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *MoveItemParentRequest) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *MoveItemParentRequest) GetDestParentId() int64 {
	if x != nil {
		return x.DestParentId
	}
	return 0
}

type RefreshInheritanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *RefreshInheritanceRequest) Reset() {
	*x = RefreshInheritanceRequest{}
	mi := &file_spec_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshInheritanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshInheritanceRequest) ProtoMessage() {}

func (x *RefreshInheritanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshInheritanceRequest.ProtoReflect.Descriptor instead.
func (*RefreshInheritanceRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{219}
}

func (x *RefreshInheritanceRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type SetUserItemSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Subscribed bool  `protobuf:"varint,2,opt,name=subscribed,proto3" json:"subscribed,omitempty"`
}

func (x *SetUserItemSubscriptionRequest) Reset() {
	*x = SetUserItemSubscriptionRequest{}
	mi := &file_spec_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserItemSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserItemSubscriptionRequest) ProtoMessage() {}

func (x *SetUserItemSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserItemSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*SetUserItemSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{220}
}

func (x *SetUserItemSubscriptionRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SetUserItemSubscriptionRequest) GetSubscribed() bool {
	if x != nil {
		return x.Subscribed
	}
	return false
}

type SetItemEngineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId          int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	EngineItemId    int64 `protobuf:"varint,2,opt,name=engine_item_id,json=engineItemId,proto3" json:"engine_item_id,omitempty"`
	EngineInherited bool  `protobuf:"varint,3,opt,name=engine_inherited,json=engineInherited,proto3" json:"engine_inherited,omitempty"`
}

func (x *SetItemEngineRequest) Reset() {
	*x = SetItemEngineRequest{}
	mi := &file_spec_proto_msgTypes[221]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetItemEngineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetItemEngineRequest) ProtoMessage() {}

func (x *SetItemEngineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[221]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetItemEngineRequest.ProtoReflect.Descriptor instead.
func (*SetItemEngineRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{221}
}

func (x *SetItemEngineRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SetItemEngineRequest) GetEngineItemId() int64 {
	if x != nil {
		return x.EngineItemId
	}
	return 0
}

func (x *SetItemEngineRequest) GetEngineInherited() bool {
	if x != nil {
		return x.EngineInherited
	}
	return false
}

type AddCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId             int64        `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	TypeId             CommentsType `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3,enum=goautowp.CommentsType" json:"type_id,omitempty"`
	Message            string       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ModeratorAttention bool         `protobuf:"varint,4,opt,name=moderator_attention,json=moderatorAttention,proto3" json:"moderator_attention,omitempty"`
	ParentId           int64        `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Resolve            bool         `protobuf:"varint,6,opt,name=resolve,proto3" json:"resolve,omitempty"`
}

func (x *AddCommentRequest) Reset() {
	*x = AddCommentRequest{}
	mi := &file_spec_proto_msgTypes[222]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentRequest) ProtoMessage() {}

func (x *AddCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[222]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentRequest.ProtoReflect.Descriptor instead.
func (*AddCommentRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{222}
}

func (x *AddCommentRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *AddCommentRequest) GetTypeId() CommentsType {
	if x != nil {
		return x.TypeId
	}
	return CommentsType_UNKNOWN
}

func (x *AddCommentRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddCommentRequest) GetModeratorAttention() bool {
	if x != nil {
		return x.ModeratorAttention
	}
	return false
}

func (x *AddCommentRequest) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *AddCommentRequest) GetResolve() bool {
	if x != nil {
		return x.Resolve
	}
	return false
}

type GetMessagePageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId int64 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	PerPage   int32 `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *GetMessagePageRequest) Reset() {
	*x = GetMessagePageRequest{}
	mi := &file_spec_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessagePageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagePageRequest) ProtoMessage() {}

func (x *GetMessagePageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagePageRequest.ProtoReflect.Descriptor instead.
func (*GetMessagePageRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{223}
}

func (x *GetMessagePageRequest) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GetMessagePageRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type CommentMessageFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preview  bool `protobuf:"varint,1,opt,name=preview,proto3" json:"preview,omitempty"`
	Route    bool `protobuf:"varint,2,opt,name=route,proto3" json:"route,omitempty"`
	Text     bool `protobuf:"varint,3,opt,name=text,proto3" json:"text,omitempty"`
	Vote     bool `protobuf:"varint,4,opt,name=vote,proto3" json:"vote,omitempty"`
	UserVote bool `protobuf:"varint,5,opt,name=user_vote,json=userVote,proto3" json:"user_vote,omitempty"`
	Replies  bool `protobuf:"varint,6,opt,name=replies,proto3" json:"replies,omitempty"`
	Status   bool `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	IsNew    bool `protobuf:"varint,8,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
}

func (x *CommentMessageFields) Reset() {
	*x = CommentMessageFields{}
	mi := &file_spec_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentMessageFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentMessageFields) ProtoMessage() {}

func (x *CommentMessageFields) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentMessageFields.ProtoReflect.Descriptor instead.
func (*CommentMessageFields) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{224}
}

func (x *CommentMessageFields) GetPreview() bool {
	if x != nil {
		return x.Preview
	}
	return false
}

func (x *CommentMessageFields) GetRoute() bool {
	if x != nil {
		return x.Route
	}
	return false
}

func (x *CommentMessageFields) GetText() bool {
	if x != nil {
		return x.Text
	}
	return false
}

func (x *CommentMessageFields) GetVote() bool {
	if x != nil {
		return x.Vote
	}
	return false
}

func (x *CommentMessageFields) GetUserVote() bool {
	if x != nil {
		return x.UserVote
	}
	return false
}

func (x *CommentMessageFields) GetReplies() bool {
	if x != nil {
		return x.Replies
	}
	return false
}

func (x *CommentMessageFields) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CommentMessageFields) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

type GetMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields *CommentMessageFields `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetMessageRequest) Reset() {
	*x = GetMessageRequest{}
	mi := &file_spec_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageRequest) ProtoMessage() {}

func (x *GetMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageRequest.ProtoReflect.Descriptor instead.
func (*GetMessageRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{225}
}

func (x *GetMessageRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetMessageRequest) GetFields() *CommentMessageFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

type GetMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields             *CommentMessageFields    `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	ItemId             int64                    `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	TypeId             CommentsType             `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3,enum=goautowp.CommentsType" json:"type_id,omitempty"`
	ParentId           int64                    `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	NoParents          bool                     `protobuf:"varint,5,opt,name=no_parents,json=noParents,proto3" json:"no_parents,omitempty"`
	UserId             int64                    `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Order              GetMessagesRequest_Order `protobuf:"varint,7,opt,name=order,proto3,enum=goautowp.GetMessagesRequest_Order" json:"order,omitempty"`
	UserIdentity       string                   `protobuf:"bytes,8,opt,name=user_identity,json=userIdentity,proto3" json:"user_identity,omitempty"`
	ModeratorAttention ModeratorAttention       `protobuf:"varint,9,opt,name=moderator_attention,json=moderatorAttention,proto3,enum=goautowp.ModeratorAttention" json:"moderator_attention,omitempty"`
	PicturesOfItemId   int64                    `protobuf:"varint,10,opt,name=pictures_of_item_id,json=picturesOfItemId,proto3" json:"pictures_of_item_id,omitempty"`
	Limit              int32                    `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"`
	Page               int32                    `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetMessagesRequest) Reset() {
	*x = GetMessagesRequest{}
	mi := &file_spec_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesRequest) ProtoMessage() {}

func (x *GetMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesRequest.ProtoReflect.Descriptor instead.
func (*GetMessagesRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{226}
}

func (x *GetMessagesRequest) GetFields() *CommentMessageFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GetMessagesRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *GetMessagesRequest) GetTypeId() CommentsType {
	if x != nil {
		return x.TypeId
	}
	return CommentsType_UNKNOWN
}

func (x *GetMessagesRequest) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *GetMessagesRequest) GetNoParents() bool {
	if x != nil {
		return x.NoParents
	}
	return false
}

func (x *GetMessagesRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetMessagesRequest) GetOrder() GetMessagesRequest_Order {
	if x != nil {
		return x.Order
	}
	return GetMessagesRequest_DEFAULT
}

func (x *GetMessagesRequest) GetUserIdentity() string {
	if x != nil {
		return x.UserIdentity
	}
	return ""
}

func (x *GetMessagesRequest) GetModeratorAttention() ModeratorAttention {
	if x != nil {
		return x.ModeratorAttention
	}
	return ModeratorAttention_NONE
}

func (x *GetMessagesRequest) GetPicturesOfItemId() int64 {
	if x != nil {
		return x.PicturesOfItemId
	}
	return 0
}

func (x *GetMessagesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMessagesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type APICommentsMessagePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId CommentsType `protobuf:"varint,1,opt,name=type_id,json=typeId,proto3,enum=goautowp.CommentsType" json:"type_id,omitempty"`
	ItemId int64        `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Page   int32        `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *APICommentsMessagePage) Reset() {
	*x = APICommentsMessagePage{}
	mi := &file_spec_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APICommentsMessagePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APICommentsMessagePage) ProtoMessage() {}

func (x *APICommentsMessagePage) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APICommentsMessagePage.ProtoReflect.Descriptor instead.
func (*APICommentsMessagePage) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{227}
}

func (x *APICommentsMessagePage) GetTypeId() CommentsType {
	if x != nil {
		return x.TypeId
	}
	return CommentsType_UNKNOWN
}

func (x *APICommentsMessagePage) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *APICommentsMessagePage) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type APICommentsMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items     []*APICommentsMessage `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Paginator *Pages                `protobuf:"bytes,2,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (x *APICommentsMessages) Reset() {
	*x = APICommentsMessages{}
	mi := &file_spec_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APICommentsMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APICommentsMessages) ProtoMessage() {}

func (x *APICommentsMessages) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APICommentsMessages.ProtoReflect.Descriptor instead.
func (*APICommentsMessages) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{228}
}

func (x *APICommentsMessages) GetItems() []*APICommentsMessage {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *APICommentsMessages) GetPaginator() *Pages {
	if x != nil {
		return x.Paginator
	}
	return nil
}

type APICommentsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TypeId             CommentsType           `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3,enum=goautowp.CommentsType" json:"type_id,omitempty"`
	ItemId             int64                  `protobuf:"varint,3,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ParentId           int64                  `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Deleted            bool                   `protobuf:"varint,6,opt,name=deleted,proto3" json:"deleted,omitempty"`
	ModeratorAttention ModeratorAttention     `protobuf:"varint,7,opt,name=moderator_attention,json=moderatorAttention,proto3,enum=goautowp.ModeratorAttention" json:"moderator_attention,omitempty"`
	IsNew              bool                   `protobuf:"varint,8,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
	AuthorId           int64                  `protobuf:"varint,9,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Ip                 string                 `protobuf:"bytes,10,opt,name=ip,proto3" json:"ip,omitempty"`
	Text               string                 `protobuf:"bytes,11,opt,name=text,proto3" json:"text,omitempty"`
	Vote               int32                  `protobuf:"varint,12,opt,name=vote,proto3" json:"vote,omitempty"`
	Preview            string                 `protobuf:"bytes,13,opt,name=preview,proto3" json:"preview,omitempty"`
	Route              []string               `protobuf:"bytes,14,rep,name=route,proto3" json:"route,omitempty"`
	UserVote           int32                  `protobuf:"varint,15,opt,name=userVote,proto3" json:"userVote,omitempty"`
	Replies            []*APICommentsMessage  `protobuf:"bytes,16,rep,name=replies,proto3" json:"replies,omitempty"`
	PictureStatus      PictureStatus          `protobuf:"varint,17,opt,name=picture_status,json=pictureStatus,proto3,enum=goautowp.PictureStatus" json:"picture_status,omitempty"`
}

func (x *APICommentsMessage) Reset() {
	*x = APICommentsMessage{}
	mi := &file_spec_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APICommentsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APICommentsMessage) ProtoMessage() {}

func (x *APICommentsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APICommentsMessage.ProtoReflect.Descriptor instead.
func (*APICommentsMessage) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{229}
}

func (x *APICommentsMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APICommentsMessage) GetTypeId() CommentsType {
	if x != nil {
		return x.TypeId
	}
	return CommentsType_UNKNOWN
}

func (x *APICommentsMessage) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *APICommentsMessage) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *APICommentsMessage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *APICommentsMessage) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *APICommentsMessage) GetModeratorAttention() ModeratorAttention {
	if x != nil {
		return x.ModeratorAttention
	}
	return ModeratorAttention_NONE
}

func (x *APICommentsMessage) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *APICommentsMessage) GetAuthorId() int64 {
	if x != nil {
		return x.AuthorId
	}
	return 0
}

func (x *APICommentsMessage) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *APICommentsMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *APICommentsMessage) GetVote() int32 {
	if x != nil {
		return x.Vote
	}
	return 0
}

func (x *APICommentsMessage) GetPreview() string {
	if x != nil {
		return x.Preview
	}
	return ""
}

func (x *APICommentsMessage) GetRoute() []string {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *APICommentsMessage) GetUserVote() int32 {
	if x != nil {
		return x.UserVote
	}
	return 0
}

func (x *APICommentsMessage) GetReplies() []*APICommentsMessage {
	if x != nil {
		return x.Replies
	}
	return nil
}

func (x *APICommentsMessage) GetPictureStatus() PictureStatus {
	if x != nil {
		return x.PictureStatus
	}
	return PictureStatus_PICTURE_STATUS_UNKNOWN
}

type AddCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddCommentResponse) Reset() {
	*x = AddCommentResponse{}
	mi := &file_spec_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentResponse) ProtoMessage() {}

func (x *AddCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentResponse.ProtoReflect.Descriptor instead.
func (*AddCommentResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{230}
}

func (x *AddCommentResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type APIGetTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Revision int64 `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *APIGetTextRequest) Reset() {
	*x = APIGetTextRequest{}
	mi := &file_spec_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIGetTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGetTextRequest) ProtoMessage() {}

func (x *APIGetTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGetTextRequest.ProtoReflect.Descriptor instead.
func (*APIGetTextRequest) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{231}
}

func (x *APIGetTextRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APIGetTextRequest) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type TextRevision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Revision int64  `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	UserId   int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TextRevision) Reset() {
	*x = TextRevision{}
	mi := &file_spec_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextRevision) ProtoMessage() {}

func (x *TextRevision) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextRevision.ProtoReflect.Descriptor instead.
func (*TextRevision) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{232}
}

func (x *TextRevision) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TextRevision) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *TextRevision) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type APIGetTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current *TextRevision `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Prev    *TextRevision `protobuf:"bytes,2,opt,name=prev,proto3" json:"prev,omitempty"`
	Next    *TextRevision `protobuf:"bytes,3,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *APIGetTextResponse) Reset() {
	*x = APIGetTextResponse{}
	mi := &file_spec_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIGetTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGetTextResponse) ProtoMessage() {}

func (x *APIGetTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGetTextResponse.ProtoReflect.Descriptor instead.
func (*APIGetTextResponse) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{233}
}

func (x *APIGetTextResponse) GetCurrent() *TextRevision {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *APIGetTextResponse) GetPrev() *TextRevision {
	if x != nil {
		return x.Prev
	}
	return nil
}

func (x *APIGetTextResponse) GetNext() *TextRevision {
	if x != nil {
		return x.Next
	}
	return nil
}

var File_spec_proto protoreflect.FileDescriptor

var file_spec_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x6c, 0x61, 0x74, 0x6c, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x03, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3c, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x51, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x13, 0x70,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x62, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x12, 0x48, 0x0a, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x21, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x83, 0x02, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x17, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x74,
	0x0a, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x19, 0x41, 0x74, 0x74, 0x72, 0x5a, 0x6f, 0x6e, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1a, 0x41, 0x74,
	0x74, 0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x4f, 0x0a, 0x11, 0x41,
	0x74, 0x74, 0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1a,
	0x41, 0x74, 0x74, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb9, 0x01,
	0x0a, 0x11, 0x41, 0x74, 0x74, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x44, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c,
	0x45, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x52, 0x45, 0x45, 0x10, 0x07, 0x22, 0x3d, 0x0a, 0x11, 0x41, 0x74, 0x74,
	0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x42, 0x0a, 0x08, 0x41, 0x74, 0x74, 0x72,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x62, 0x62, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x62, 0x62, 0x72, 0x22, 0x3d, 0x0a, 0x11,
	0x41, 0x74, 0x74, 0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x2e, 0x0a, 0x08, 0x41,
	0x74, 0x74, 0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x19, 0x4d,
	0x6f, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x72, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x64, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x35,
	0x0a, 0x14, 0x41, 0x74, 0x74, 0x72, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x49, 0x0a, 0x18, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xd4, 0x01, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x47, 0x52, 0x45, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f,
	0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x22, 0x68, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x73, 0x5f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x49, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x7f, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x74, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xf0, 0x01, 0x0a, 0x0d, 0x41, 0x74,
	0x74, 0x72, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x16,
	0x41, 0x74, 0x74, 0x72, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x61, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x7a, 0x6f, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x0e, 0x41, 0x74,
	0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x44, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x96, 0x01, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x71, 0x0a, 0x0c, 0x50, 0x75, 0x6c,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x22, 0x2a, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x59, 0x45, 0x41, 0x52, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x02, 0x22, 0x4e, 0x0a, 0x09,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x47, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x0b,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x7f, 0x0a, 0x0d, 0x50, 0x75,
	0x6c, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x67,
	0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x47, 0x72, 0x69, 0x64, 0x52, 0x04,
	0x67, 0x72, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x52, 0x06, 0x6c, 0x65, 0x67,
	0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x71, 0x0a, 0x04, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x22, 0x32,
	0x0a, 0x0a, 0x53, 0x70, 0x65, 0x63, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x31, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x71, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x70, 0x65,
	0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x0f, 0x50, 0x65,
	0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x48, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2f,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x30, 0x0a, 0x0f, 0x52, 0x65, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x22, 0x34, 0x0a, 0x0a, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x73, 0x73, 0x22, 0x4d, 0x0a, 0x11, 0x41, 0x63, 0x6c, 0x45, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x22, 0x2a, 0x0a, 0x10, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x60, 0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x73, 0x22, 0x3f, 0x0a, 0x10, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x38, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22,
	0x49, 0x0a, 0x15, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x71, 0x0a, 0x10, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2f, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x2c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x76, 0x0a,
	0x08, 0x41, 0x50, 0x49, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xbc, 0x06, 0x0a, 0x07, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x41, 0x77, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x41, 0x50, 0x49, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x3b, 0x0a, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65,
	0x63, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a,
	0x03, 0x69, 0x6d, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x03,
	0x69, 0x6d, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x72,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x12,
	0x35, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x72,
	0x65, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x70,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x22, 0x58, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x37,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x27,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a,
	0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xaa,
	0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x6f, 0x74, 0x65, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41,
	0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x09,
	0x56, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x56, 0x45, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x0a,
	0x41, 0x50, 0x49, 0x42, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x0a,
	0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x62, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x62, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06,
	0x62, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa1,
	0x01, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x6f, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x62, 0x61,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x42, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x62,
	0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x68, 0x6f, 0x69, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x68, 0x6f, 0x69, 0x73, 0x55,
	0x72, 0x6c, 0x22, 0x4a, 0x0a, 0x15, 0x41, 0x50, 0x49, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x54, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x39,
	0x0a, 0x0f, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x0b, 0x41, 0x50, 0x49,
	0x49, 0x50, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x54, 0x6f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x05, 0x41, 0x50, 0x49, 0x49, 0x50,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x42, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x50, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x52, 0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x78, 0x0a, 0x18, 0x41, 0x50, 0x49,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x22, 0x33, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x33, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x5e, 0x0a,
	0x1c, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2e, 0x0a,
	0x1c, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x4b, 0x0a,
	0x17, 0x41, 0x50, 0x49, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x18, 0x41, 0x50,
	0x49, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x41, 0x50, 0x49, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x46, 0x0a, 0x14, 0x41, 0x50, 0x49, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x18, 0x41, 0x50, 0x49, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x18, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x36, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x41, 0x50, 0x49, 0x46,
	0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x41, 0x0a, 0x0f, 0x41, 0x50, 0x49, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41,
	0x50, 0x49, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x41, 0x50, 0x49, 0x46, 0x6f, 0x72, 0x75,
	0x6d, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x0f,
	0x41, 0x50, 0x49, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12,
	0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x2d, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x77,
	0x0a, 0x11, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x15, 0x41, 0x50, 0x49, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x28, 0x0a, 0x16, 0x41, 0x50, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x18, 0x41, 0x50, 0x49,
	0x53, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x13, 0x41, 0x50, 0x49, 0x4d, 0x6f, 0x76, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x12, 0x41, 0x50, 0x49, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b,
	0x0a, 0x14, 0x41, 0x50, 0x49, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3c, 0x0a, 0x0c, 0x41,
	0x50, 0x49, 0x4d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x76, 0x0a, 0x11, 0x41, 0x50, 0x49,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0xd1, 0x03, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x44,
	0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x66,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x69, 0x6d, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x70,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x41, 0x50, 0x49, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41,
	0x50, 0x49, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x49, 0x0a, 0x10, 0x41, 0x50, 0x49, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x4e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0x35, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x2e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x11, 0x41, 0x50, 0x49,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x79, 0x0a,
	0x16, 0x41, 0x50, 0x49, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x41, 0x50, 0x49, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x41, 0x50, 0x49,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x40,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x40, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x41, 0x50, 0x49, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x3c, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x59, 0x52, 0x49, 0x4c,
	0x4c, 0x49, 0x43, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x54, 0x49, 0x4e, 0x10, 0x03,
	0x22, 0x42, 0x0a, 0x0d, 0x41, 0x50, 0x49, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x10, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x70, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x41, 0x50, 0x49, 0x54, 0x6f,
	0x70, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x45,
	0x0a, 0x11, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x77, 0x69, 0x6e,
	0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x3a,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22,
	0x4a, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41,
	0x50, 0x49, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x3b, 0x0a, 0x15, 0x41,
	0x50, 0x49, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x41, 0x50, 0x49,
	0x54, 0x77, 0x69, 0x6e, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x12, 0x41, 0x50, 0x49, 0x54, 0x77, 0x69, 0x6e, 0x73,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x65, 0x0a, 0x15, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x70, 0x54, 0x77, 0x69, 0x6e,
	0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x14, 0x41, 0x50, 0x49,
	0x54, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54,
	0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x18,
	0x41, 0x50, 0x49, 0x54, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x13, 0x41, 0x50, 0x49,
	0x54, 0x6f, 0x70, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x6f,
	0x70, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x70, 0x0a, 0x17, 0x41, 0x50, 0x49,
	0x54, 0x6f, 0x70, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x0f,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x0d,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x60, 0x0a, 0x15, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0xdf, 0x06, 0x0a,
	0x0a, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6e, 0x61, 0x6d, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x61, 0x6d,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74,
	0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e,
	0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f,
	0x74, 0x77, 0x69, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x74, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x31, 0x32, 0x30, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x31, 0x32, 0x30, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x17,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x66, 0x44,
	0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67,
	0x0a, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x36, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x2c, 0x0a,
	0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x22, 0xa6, 0x01, 0x0a, 0x12,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x08, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x15, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xc1, 0x02,
	0x0a, 0x1a, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x42, 0x0a, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x18, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x16,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x69,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x22, 0xdf, 0x03, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6e, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x08, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x0b, 0x41, 0x50, 0x49, 0x54, 0x72, 0x65, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x72, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x98, 0x08, 0x0a, 0x07,
	0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x61, 0x6d, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x63,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x64, 0x65, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x74, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x64, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x31,
	0x32, 0x30, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x6f, 0x31, 0x32, 0x30, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x6f, 0x73,
	0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x0b, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2d,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x64, 0x0a,
	0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55,
	0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x1a,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x76, 0x6f, 0x74, 0x65, 0x22, 0x33, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x4c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x22, 0x64, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xb2, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x69, 0x0a,
	0x13, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x37, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x4d, 0x61, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0x9b, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c,
	0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x41, 0x50, 0x49, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22,
	0x34, 0x0a, 0x13, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x13, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x63, 0x0a, 0x13, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x56, 0x6f, 0x74,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x6a, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56,
	0x6f, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6f,
	0x74, 0x65, 0x22, 0x47, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x30, 0x0a, 0x1e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x77, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6f,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x73, 0x61, 0x76, 0x65, 0x22, 0x5d, 0x0a, 0x13, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x22, 0x0a, 0x10, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x19, 0x53, 0x65,
	0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x72, 0x65, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x72, 0x6f, 0x70, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x72, 0x6f, 0x70, 0x54, 0x6f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x70,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x6f, 0x70,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x1b, 0x53, 0x65,
	0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x22, 0x81, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x22,
	0xae, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x43, 0x72,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x6f, 0x70,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x72, 0x6f,
	0x70, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x6f,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x6f, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x62, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x0a,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x22, 0x5a, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x16,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xec, 0x02, 0x0a,
	0x0a, 0x41, 0x50, 0x49, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61,
	0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x1b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x79, 0x0a, 0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xbb, 0x02, 0x0a, 0x05, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x14, 0x44, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x73, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1d, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x50, 0x0a, 0x0f, 0x56,
	0x4f, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x56, 0x4f, 0x44, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x51, 0x0a,
	0x0b, 0x56, 0x4f, 0x44, 0x44, 0x61, 0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65,
	0x22, 0xa3, 0x03, 0x0a, 0x11, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x7a, 0x68, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x7a, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x74, 0x5f, 0x62, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x74, 0x42, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x1a,
	0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x1e, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xae, 0x01, 0x0a, 0x0f, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x6a, 0x0a, 0x10, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2d,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x5b, 0x0a,
	0x17, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x15, 0x41, 0x50,
	0x49, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x61, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x12, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x4c, 0x0a, 0x16, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x22, 0x4f, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x22, 0x55, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x50, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x61, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x61, 0x6e, 0x52, 0x04, 0x66, 0x61, 0x6e, 0x73, 0x22, 0x3b, 0x0a, 0x0f, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x6a, 0x0a, 0x10, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0xeb, 0x01, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x74, 0x6d, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x17, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x43,
	0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x13, 0x41, 0x50, 0x49, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x12,
	0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x31, 0x0a, 0x16, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x14, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x70, 0x0a, 0x0b, 0x41, 0x50,
	0x49, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x19,
	0x41, 0x50, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x1d, 0x41, 0x50, 0x49,
	0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x12, 0x41,
	0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x22, 0x54, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41,
	0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5c, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x1a, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x3d, 0x0a,
	0x0d, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc3, 0x01, 0x0a,
	0x0c, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x54,
	0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x65,
	0x78, 0x74, 0x22, 0x58, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x13,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x7a, 0x0a, 0x12, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x4c, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x46, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x64, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8a,
	0x01, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x15,
	0x4d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x34, 0x0a, 0x19, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x65, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x22, 0x51, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x14, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x6e, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65,
	0x77, 0x22, 0x5b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xc2,
	0x04, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x13, 0x6d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x4f, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x4f, 0x54,
	0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x4f, 0x54, 0x45,
	0x5f, 0x41, 0x53, 0x43, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x53,
	0x43, 0x10, 0x04, 0x22, 0x76, 0x0a, 0x16, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x78, 0x0a, 0x13, 0x41,
	0x50, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xdf, 0x04, 0x0a, 0x12, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65,
	0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76,
	0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x24, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a,
	0x11, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57,
	0x0a, 0x0c, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x41, 0x50, 0x49, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x12, 0x2a, 0x0a, 0x04,
	0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x2a, 0x7b, 0x0a, 0x0f, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x49, 0x43, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x53, 0x10, 0x03, 0x2a, 0xec, 0x01, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e,
	0x47, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x49, 0x4e,
	0x53, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x52, 0x41, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53,
	0x45, 0x55, 0x4d, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x09, 0x2a, 0x68, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x03, 0x2a, 0x9b,
	0x01, 0x0a, 0x0d, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x49, 0x43,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x58, 0x10, 0x04, 0x2a, 0x82, 0x01, 0x0a,
	0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x49,
	0x43, 0x54, 0x55, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x52, 0x54, 0x49, 0x43,
	0x4c, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x4f, 0x52, 0x55, 0x4d, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x05, 0x2a, 0x3a, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x32, 0xe7, 0x05,
	0x0a, 0x06, 0x41, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x12, 0x47, 0x0a, 0x0a, 0x41, 0x63, 0x6c, 0x45,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41,
	0x63, 0x6c, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41,
	0x50, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x63, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x73,
	0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x49, 0x50, 0x12, 0x19, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x49,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x50, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x52, 0x65, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x00, 0x32, 0xad, 0x07, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x75,
	0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x46, 0x6f, 0x72, 0x75, 0x6d,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1f, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x53,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x22, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41,
	0x50, 0x49, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x46, 0x6f, 0x72, 0x75, 0x6d,
	0x73, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41,
	0x50, 0x49, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41,
	0x50, 0x49, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x00, 0x32, 0x9a, 0x01, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x79, 0x43, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42,
	0x79, 0x43, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x22, 0x00, 0x32, 0x80, 0x04, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x12, 0x52, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x64,
	0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x2b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x6f, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x00, 0x32, 0xa7, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x00, 0x32, 0xac, 0x04, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x31, 0x0a, 0x02, 0x4d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x41, 0x50, 0x49, 0x4d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x20, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50,
	0x49, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0x80, 0x06, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6a, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x6e, 0x73,
	0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0xff, 0x15, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x42, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x41, 0x50, 0x49, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x70, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x41, 0x50, 0x49, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54,
	0x6f, 0x70, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54,
	0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x77, 0x69, 0x6e,
	0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x70,
	0x54, 0x77, 0x69, 0x6e, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x32, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x3c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x18, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x72, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1d, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x20, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x23, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x27,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x15, 0x53,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4e, 0x65,
	0x77, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x42, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x4d, 0x6f, 0x76,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x17, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xe6, 0x06, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x0b, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x24, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x23,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b,
	0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x03, 0x41, 0x64,
	0x64, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x32, 0x45,
	0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x00, 0x32, 0x48, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74,
	0x6f, 0x77, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x32,
	0xf2, 0x0e, 0x0a, 0x08, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x04,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x72, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x1b, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f,
	0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f,
	0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x74,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12,
	0x20, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x20,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x70,
	0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x12, 0x1a, 0x2e, 0x67, 0x6f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x44, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x43, 0x72, 0x6f, 0x70, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x13, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x14, 0x53, 0x65,
	0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x53, 0x65,
	0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x32, 0xea, 0x03, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x20, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x25, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x32, 0x92, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x3d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xa4, 0x01, 0x0a, 0x09, 0x44, 0x6f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x4f, 0x44, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x56, 0x4f, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x44, 0x6f,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x4e, 0x0a,
	0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x50, 0x49, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xa1, 0x08,
	0x0a, 0x05, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f,
	0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x49, 0x44, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x61, 0x75,
	0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x5a, 0x6f,
	0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x5a, 0x6f, 0x6e,
	0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77,
	0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x61,
	0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x67,
	0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x23, 0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x12, 0x1e,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x2f, 0x67, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x77, 0x70, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spec_proto_rawDescOnce sync.Once
	file_spec_proto_rawDescData = file_spec_proto_rawDesc
)

func file_spec_proto_rawDescGZIP() []byte {
	file_spec_proto_rawDescOnce.Do(func() {
		file_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_spec_proto_rawDescData)
	})
	return file_spec_proto_rawDescData
}

var file_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 234)
var file_spec_proto_goTypes = []any{
	(PictureItemType)(0),                      // 0: goautowp.PictureItemType
	(ItemType)(0),                             // 1: goautowp.ItemType
	(ItemParentType)(0),                       // 2: goautowp.ItemParentType
	(PictureStatus)(0),                        // 3: goautowp.PictureStatus
	(CommentsType)(0),                         // 4: goautowp.CommentsType
	(ModeratorAttention)(0),                   // 5: goautowp.ModeratorAttention
	(AttrAttributeType_ID)(0),                 // 6: goautowp.AttrAttributeType.ID
	(AttrConflictsRequest_Filter)(0),          // 7: goautowp.AttrConflictsRequest.Filter
	(PulseRequest_Period)(0),                  // 8: goautowp.PulseRequest.Period
	(CommentVote_VoteValue)(0),                // 9: goautowp.CommentVote.VoteValue
	(APIBrandsListLine_Category)(0),           // 10: goautowp.APIBrandsListLine.Category
	(ListItemsRequest_Order)(0),               // 11: goautowp.ListItemsRequest.Order
	(GetMessagesRequest_Order)(0),             // 12: goautowp.GetMessagesRequest.Order
	(*ErrorDetails)(nil),                      // 13: goautowp.ErrorDetails
	(*AttrAttributeID)(nil),                   // 14: goautowp.AttrAttributeID
	(*AttrAttributesRequest)(nil),             // 15: goautowp.AttrAttributesRequest
	(*AttrAttributesResponse)(nil),            // 16: goautowp.AttrAttributesResponse
	(*AttrAttribute)(nil),                     // 17: goautowp.AttrAttribute
	(*AttrListOptionsRequest)(nil),            // 18: goautowp.AttrListOptionsRequest
	(*AttrListOptionsResponse)(nil),           // 19: goautowp.AttrListOptionsResponse
	(*AttrListOption)(nil),                    // 20: goautowp.AttrListOption
	(*AttrZoneAttributesRequest)(nil),         // 21: goautowp.AttrZoneAttributesRequest
	(*AttrZoneAttributesResponse)(nil),        // 22: goautowp.AttrZoneAttributesResponse
	(*AttrZoneAttribute)(nil),                 // 23: goautowp.AttrZoneAttribute
	(*AttrAttributeTypesResponse)(nil),        // 24: goautowp.AttrAttributeTypesResponse
	(*AttrAttributeType)(nil),                 // 25: goautowp.AttrAttributeType
	(*AttrUnitsResponse)(nil),                 // 26: goautowp.AttrUnitsResponse
	(*AttrUnit)(nil),                          // 27: goautowp.AttrUnit
	(*AttrZonesResponse)(nil),                 // 28: goautowp.AttrZonesResponse
	(*AttrZone)(nil),                          // 29: goautowp.AttrZone
	(*MoveAttrUserValuesRequest)(nil),         // 30: goautowp.MoveAttrUserValuesRequest
	(*DeleteAttrUserValuesRequest)(nil),       // 31: goautowp.DeleteAttrUserValuesRequest
	(*AttrUserValuesFields)(nil),              // 32: goautowp.AttrUserValuesFields
	(*AttrUserValuesRequest)(nil),             // 33: goautowp.AttrUserValuesRequest
	(*AttrSetUserValuesRequest)(nil),          // 34: goautowp.AttrSetUserValuesRequest
	(*AttrConflictsRequest)(nil),              // 35: goautowp.AttrConflictsRequest
	(*AttrConflictValue)(nil),                 // 36: goautowp.AttrConflictValue
	(*AttrConflict)(nil),                      // 37: goautowp.AttrConflict
	(*AttrConflictsResponse)(nil),             // 38: goautowp.AttrConflictsResponse
	(*AttrUserValue)(nil),                     // 39: goautowp.AttrUserValue
	(*AttrUserValuesResponse)(nil),            // 40: goautowp.AttrUserValuesResponse
	(*AttrValuesRequest)(nil),                 // 41: goautowp.AttrValuesRequest
	(*AttrValuesResponse)(nil),                // 42: goautowp.AttrValuesResponse
	(*AttrValueValue)(nil),                    // 43: goautowp.AttrValueValue
	(*AttrValue)(nil),                         // 44: goautowp.AttrValue
	(*PulseRequest)(nil),                      // 45: goautowp.PulseRequest
	(*PulseGrid)(nil),                         // 46: goautowp.PulseGrid
	(*PulseLegend)(nil),                       // 47: goautowp.PulseLegend
	(*PulseResponse)(nil),                     // 48: goautowp.PulseResponse
	(*Spec)(nil),                              // 49: goautowp.Spec
	(*SpecsItems)(nil),                        // 50: goautowp.SpecsItems
	(*Perspective)(nil),                       // 51: goautowp.Perspective
	(*PerspectivesItems)(nil),                 // 52: goautowp.PerspectivesItems
	(*PerspectiveGroup)(nil),                  // 53: goautowp.PerspectiveGroup
	(*PerspectivePage)(nil),                   // 54: goautowp.PerspectivePage
	(*PerspectivePagesItems)(nil),             // 55: goautowp.PerspectivePagesItems
	(*ReCaptchaConfig)(nil),                   // 56: goautowp.ReCaptchaConfig
	(*BrandIcons)(nil),                        // 57: goautowp.BrandIcons
	(*AclEnforceRequest)(nil),                 // 58: goautowp.AclEnforceRequest
	(*AclEnforceResult)(nil),                  // 59: goautowp.AclEnforceResult
	(*VehicleType)(nil),                       // 60: goautowp.VehicleType
	(*VehicleTypeItems)(nil),                  // 61: goautowp.VehicleTypeItems
	(*GetBrandVehicleTypesRequest)(nil),       // 62: goautowp.GetBrandVehicleTypesRequest
	(*BrandVehicleTypeItems)(nil),             // 63: goautowp.BrandVehicleTypeItems
	(*BrandVehicleType)(nil),                  // 64: goautowp.BrandVehicleType
	(*CreateContactRequest)(nil),              // 65: goautowp.CreateContactRequest
	(*DeleteContactRequest)(nil),              // 66: goautowp.DeleteContactRequest
	(*GetContactRequest)(nil),                 // 67: goautowp.GetContactRequest
	(*APIImage)(nil),                          // 68: goautowp.APIImage
	(*APIUser)(nil),                           // 69: goautowp.APIUser
	(*Contact)(nil),                           // 70: goautowp.Contact
	(*ContactItems)(nil),                      // 71: goautowp.ContactItems
	(*GetContactsRequest)(nil),                // 72: goautowp.GetContactsRequest
	(*CommentVoteItems)(nil),                  // 73: goautowp.CommentVoteItems
	(*CommentVote)(nil),                       // 74: goautowp.CommentVote
	(*APIBanItem)(nil),                        // 75: goautowp.APIBanItem
	(*APITrafficTopItem)(nil),                 // 76: goautowp.APITrafficTopItem
	(*APITrafficTopResponse)(nil),             // 77: goautowp.APITrafficTopResponse
	(*APIGetIPRequest)(nil),                   // 78: goautowp.APIGetIPRequest
	(*APIIPRights)(nil),                       // 79: goautowp.APIIPRights
	(*APIIP)(nil),                             // 80: goautowp.APIIP
	(*APICreateFeedbackRequest)(nil),          // 81: goautowp.APICreateFeedbackRequest
	(*DeleteFromTrafficWhitelistRequest)(nil), // 82: goautowp.DeleteFromTrafficWhitelistRequest
	(*DeleteFromTrafficBlacklistRequest)(nil), // 83: goautowp.DeleteFromTrafficBlacklistRequest
	(*AddToTrafficBlacklistRequest)(nil),      // 84: goautowp.AddToTrafficBlacklistRequest
	(*AddToTrafficWhitelistRequest)(nil),      // 85: goautowp.AddToTrafficWhitelistRequest
	(*APITrafficWhitelistItem)(nil),           // 86: goautowp.APITrafficWhitelistItem
	(*APITrafficWhitelistItems)(nil),          // 87: goautowp.APITrafficWhitelistItems
	(*APIForumsUserSummary)(nil),              // 88: goautowp.APIForumsUserSummary
	(*APIGetForumsThemeRequest)(nil),          // 89: goautowp.APIGetForumsThemeRequest
	(*APIGetForumsTopicsRequest)(nil),         // 90: goautowp.APIGetForumsTopicsRequest
	(*APIGetForumsTopicRequest)(nil),          // 91: goautowp.APIGetForumsTopicRequest
	(*APIGetForumsThemesRequest)(nil),         // 92: goautowp.APIGetForumsThemesRequest
	(*APIForumsTheme)(nil),                    // 93: goautowp.APIForumsTheme
	(*APIForumsThemes)(nil),                   // 94: goautowp.APIForumsThemes
	(*APIForumsTopic)(nil),                    // 95: goautowp.APIForumsTopic
	(*APIForumsTopics)(nil),                   // 96: goautowp.APIForumsTopics
	(*APICommentMessage)(nil),                 // 97: goautowp.APICommentMessage
	(*APICreateTopicRequest)(nil),             // 98: goautowp.APICreateTopicRequest
	(*APICreateTopicResponse)(nil),            // 99: goautowp.APICreateTopicResponse
	(*APISetTopicStatusRequest)(nil),          // 100: goautowp.APISetTopicStatusRequest
	(*APIMoveTopicRequest)(nil),               // 101: goautowp.APIMoveTopicRequest
	(*APIMessageNewCount)(nil),                // 102: goautowp.APIMessageNewCount
	(*APIMessageSummary)(nil),                 // 103: goautowp.APIMessageSummary
	(*APIDeleteUserRequest)(nil),              // 104: goautowp.APIDeleteUserRequest
	(*APIMeRequest)(nil),                      // 105: goautowp.APIMeRequest
	(*APIGetUserRequest)(nil),                 // 106: goautowp.APIGetUserRequest
	(*UserFields)(nil),                        // 107: goautowp.UserFields
	(*APIBrandSection)(nil),                   // 108: goautowp.APIBrandSection
	(*APIBrandSections)(nil),                  // 109: goautowp.APIBrandSections
	(*GetBrandSectionsRequest)(nil),           // 110: goautowp.GetBrandSectionsRequest
	(*GetTopBrandsListRequest)(nil),           // 111: goautowp.GetTopBrandsListRequest
	(*GetBrandsRequest)(nil),                  // 112: goautowp.GetBrandsRequest
	(*APIBrandsListItem)(nil),                 // 113: goautowp.APIBrandsListItem
	(*APIBrandsListCharacter)(nil),            // 114: goautowp.APIBrandsListCharacter
	(*APIBrandsListLine)(nil),                 // 115: goautowp.APIBrandsListLine
	(*APIBrandsList)(nil),                     // 116: goautowp.APIBrandsList
	(*APITopBrandsList)(nil),                  // 117: goautowp.APITopBrandsList
	(*APITopBrandsListItem)(nil),              // 118: goautowp.APITopBrandsListItem
	(*GetTopPersonsListRequest)(nil),          // 119: goautowp.GetTopPersonsListRequest
	(*GetTwinsBrandsListRequest)(nil),         // 120: goautowp.GetTwinsBrandsListRequest
	(*GetTopTwinsBrandsListRequest)(nil),      // 121: goautowp.GetTopTwinsBrandsListRequest
	(*GetTopCategoriesListRequest)(nil),       // 122: goautowp.GetTopCategoriesListRequest
	(*GetTopFactoriesListRequest)(nil),        // 123: goautowp.GetTopFactoriesListRequest
	(*APITopPersonsList)(nil),                 // 124: goautowp.APITopPersonsList
	(*APITopPersonsListItem)(nil),             // 125: goautowp.APITopPersonsListItem
	(*APITwinsBrandsListItem)(nil),            // 126: goautowp.APITwinsBrandsListItem
	(*APITwinsBrandsList)(nil),                // 127: goautowp.APITwinsBrandsList
	(*APITopTwinsBrandsList)(nil),             // 128: goautowp.APITopTwinsBrandsList
	(*APITopCategoriesList)(nil),              // 129: goautowp.APITopCategoriesList
	(*APITopCategoriesListItem)(nil),          // 130: goautowp.APITopCategoriesListItem
	(*APITopFactoriesList)(nil),               // 131: goautowp.APITopFactoriesList
	(*APITopFactoriesListItem)(nil),           // 132: goautowp.APITopFactoriesListItem
	(*PicturesOptions)(nil),                   // 133: goautowp.PicturesOptions
	(*PictureFields)(nil),                     // 134: goautowp.PictureFields
	(*PreviewPicturesFields)(nil),             // 135: goautowp.PreviewPicturesFields
	(*ItemFields)(nil),                        // 136: goautowp.ItemFields
	(*ItemRequest)(nil),                       // 137: goautowp.ItemRequest
	(*ListItemsRequest)(nil),                  // 138: goautowp.ListItemsRequest
	(*PictureItemOptions)(nil),                // 139: goautowp.PictureItemOptions
	(*ItemParentListOptions)(nil),             // 140: goautowp.ItemParentListOptions
	(*ItemParentCacheListOptions)(nil),        // 141: goautowp.ItemParentCacheListOptions
	(*ItemListOptions)(nil),                   // 142: goautowp.ItemListOptions
	(*GetTreeRequest)(nil),                    // 143: goautowp.GetTreeRequest
	(*APITreeItem)(nil),                       // 144: goautowp.APITreeItem
	(*APIItem)(nil),                           // 145: goautowp.APIItem
	(*APIItemList)(nil),                       // 146: goautowp.APIItemList
	(*CommentsSubscribeRequest)(nil),          // 147: goautowp.CommentsSubscribeRequest
	(*CommentsUnSubscribeRequest)(nil),        // 148: goautowp.CommentsUnSubscribeRequest
	(*GetCommentVotesRequest)(nil),            // 149: goautowp.GetCommentVotesRequest
	(*CommentsViewRequest)(nil),               // 150: goautowp.CommentsViewRequest
	(*CommentsSetDeletedRequest)(nil),         // 151: goautowp.CommentsSetDeletedRequest
	(*CommentsMoveCommentRequest)(nil),        // 152: goautowp.CommentsMoveCommentRequest
	(*CommentsVoteCommentRequest)(nil),        // 153: goautowp.CommentsVoteCommentRequest
	(*CommentsVoteCommentResponse)(nil),       // 154: goautowp.CommentsVoteCommentResponse
	(*LogEventsRequest)(nil),                  // 155: goautowp.LogEventsRequest
	(*LogEvents)(nil),                         // 156: goautowp.LogEvents
	(*LogEvent)(nil),                          // 157: goautowp.LogEvent
	(*MapGetPointsRequest)(nil),               // 158: goautowp.MapGetPointsRequest
	(*MapPoints)(nil),                         // 159: goautowp.MapPoints
	(*MapPoint)(nil),                          // 160: goautowp.MapPoint
	(*PicturesViewRequest)(nil),               // 161: goautowp.PicturesViewRequest
	(*PicturesVoteRequest)(nil),               // 162: goautowp.PicturesVoteRequest
	(*PicturesVoteSummary)(nil),               // 163: goautowp.PicturesVoteSummary
	(*ModerVoteTemplate)(nil),                 // 164: goautowp.ModerVoteTemplate
	(*ModerVoteTemplates)(nil),                // 165: goautowp.ModerVoteTemplates
	(*DeleteModerVoteTemplateRequest)(nil),    // 166: goautowp.DeleteModerVoteTemplateRequest
	(*UpdateModerVoteRequest)(nil),            // 167: goautowp.UpdateModerVoteRequest
	(*PicturesUserSummary)(nil),               // 168: goautowp.PicturesUserSummary
	(*PictureIDRequest)(nil),                  // 169: goautowp.PictureIDRequest
	(*SetPictureItemAreaRequest)(nil),         // 170: goautowp.SetPictureItemAreaRequest
	(*SetPictureItemPerspectiveRequest)(nil),  // 171: goautowp.SetPictureItemPerspectiveRequest
	(*SetPictureItemItemIDRequest)(nil),       // 172: goautowp.SetPictureItemItemIDRequest
	(*DeletePictureItemRequest)(nil),          // 173: goautowp.DeletePictureItemRequest
	(*CreatePictureItemRequest)(nil),          // 174: goautowp.CreatePictureItemRequest
	(*SetPictureCropRequest)(nil),             // 175: goautowp.SetPictureCropRequest
	(*SetPicturePointRequest)(nil),            // 176: goautowp.SetPicturePointRequest
	(*UpdatePictureRequest)(nil),              // 177: goautowp.UpdatePictureRequest
	(*SetPictureCopyrightsRequest)(nil),       // 178: goautowp.SetPictureCopyrightsRequest
	(*SetPictureStatusRequest)(nil),           // 179: goautowp.SetPictureStatusRequest
	(*DeleteSimilarRequest)(nil),              // 180: goautowp.DeleteSimilarRequest
	(*DeleteModerVoteRequest)(nil),            // 181: goautowp.DeleteModerVoteRequest
	(*MessagingDeleteMessage)(nil),            // 182: goautowp.MessagingDeleteMessage
	(*MessagingClearFolder)(nil),              // 183: goautowp.MessagingClearFolder
	(*MessagingCreateMessage)(nil),            // 184: goautowp.MessagingCreateMessage
	(*APIMessage)(nil),                        // 185: goautowp.APIMessage
	(*MessagingGetMessagesRequest)(nil),       // 186: goautowp.MessagingGetMessagesRequest
	(*MessagingGetMessagesResponse)(nil),      // 187: goautowp.MessagingGetMessagesResponse
	(*Pages)(nil),                             // 188: goautowp.Pages
	(*DonationsTransaction)(nil),              // 189: goautowp.DonationsTransaction
	(*DonationsTransactionsResponse)(nil),     // 190: goautowp.DonationsTransactionsResponse
	(*VODDataResponse)(nil),                   // 191: goautowp.VODDataResponse
	(*VODDataDate)(nil),                       // 192: goautowp.VODDataDate
	(*AboutDataResponse)(nil),                 // 193: goautowp.AboutDataResponse
	(*APIUserPreferencesRequest)(nil),         // 194: goautowp.APIUserPreferencesRequest
	(*APIUserPreferencesResponse)(nil),        // 195: goautowp.APIUserPreferencesResponse
	(*APIUsersRequest)(nil),                   // 196: goautowp.APIUsersRequest
	(*APIUsersResponse)(nil),                  // 197: goautowp.APIUsersResponse
	(*APIUsersRatingUserBrand)(nil),           // 198: goautowp.APIUsersRatingUserBrand
	(*APIUsersRatingUserFan)(nil),             // 199: goautowp.APIUsersRatingUserFan
	(*APIUsersRatingUser)(nil),                // 200: goautowp.APIUsersRatingUser
	(*APIUsersRatingResponse)(nil),            // 201: goautowp.APIUsersRatingResponse
	(*UserRatingDetailsRequest)(nil),          // 202: goautowp.UserRatingDetailsRequest
	(*UserRatingBrandsResponse)(nil),          // 203: goautowp.UserRatingBrandsResponse
	(*GetUserRatingFansResponse)(nil),         // 204: goautowp.GetUserRatingFansResponse
	(*ArticlesRequest)(nil),                   // 205: goautowp.ArticlesRequest
	(*ArticlesResponse)(nil),                  // 206: goautowp.ArticlesResponse
	(*Article)(nil),                           // 207: goautowp.Article
	(*ArticleByCatnameRequest)(nil),           // 208: goautowp.ArticleByCatnameRequest
	(*APIContentLanguages)(nil),               // 209: goautowp.APIContentLanguages
	(*APIItemLinkRequest)(nil),                // 210: goautowp.APIItemLinkRequest
	(*APIGetItemLinksRequest)(nil),            // 211: goautowp.APIGetItemLinksRequest
	(*APIItemLinksResponse)(nil),              // 212: goautowp.APIItemLinksResponse
	(*APIItemLink)(nil),                       // 213: goautowp.APIItemLink
	(*APICreateItemLinkResponse)(nil),         // 214: goautowp.APICreateItemLinkResponse
	(*APIGetItemVehicleTypesRequest)(nil),     // 215: goautowp.APIGetItemVehicleTypesRequest
	(*APIItemVehicleType)(nil),                // 216: goautowp.APIItemVehicleType
	(*APIGetItemVehicleTypesResponse)(nil),    // 217: goautowp.APIGetItemVehicleTypesResponse
	(*APIItemVehicleTypeRequest)(nil),         // 218: goautowp.APIItemVehicleTypeRequest
	(*APIGetItemLanguagesRequest)(nil),        // 219: goautowp.APIGetItemLanguagesRequest
	(*ItemLanguages)(nil),                     // 220: goautowp.ItemLanguages
	(*ItemLanguage)(nil),                      // 221: goautowp.ItemLanguage
	(*APIGetItemParentLanguagesRequest)(nil),  // 222: goautowp.APIGetItemParentLanguagesRequest
	(*ItemParentLanguages)(nil),               // 223: goautowp.ItemParentLanguages
	(*ItemParentLanguage)(nil),                // 224: goautowp.ItemParentLanguage
	(*StatsResponse)(nil),                     // 225: goautowp.StatsResponse
	(*StatsValue)(nil),                        // 226: goautowp.StatsValue
	(*NewItemsRequest)(nil),                   // 227: goautowp.NewItemsRequest
	(*NewItemsResponse)(nil),                  // 228: goautowp.NewItemsResponse
	(*ItemParent)(nil),                        // 229: goautowp.ItemParent
	(*DeleteItemParentRequest)(nil),           // 230: goautowp.DeleteItemParentRequest
	(*MoveItemParentRequest)(nil),             // 231: goautowp.MoveItemParentRequest
	(*RefreshInheritanceRequest)(nil),         // 232: goautowp.RefreshInheritanceRequest
	(*SetUserItemSubscriptionRequest)(nil),    // 233: goautowp.SetUserItemSubscriptionRequest
	(*SetItemEngineRequest)(nil),              // 234: goautowp.SetItemEngineRequest
	(*AddCommentRequest)(nil),                 // 235: goautowp.AddCommentRequest
	(*GetMessagePageRequest)(nil),             // 236: goautowp.GetMessagePageRequest
	(*CommentMessageFields)(nil),              // 237: goautowp.CommentMessageFields
	(*GetMessageRequest)(nil),                 // 238: goautowp.GetMessageRequest
	(*GetMessagesRequest)(nil),                // 239: goautowp.GetMessagesRequest
	(*APICommentsMessagePage)(nil),            // 240: goautowp.APICommentsMessagePage
	(*APICommentsMessages)(nil),               // 241: goautowp.APICommentsMessages
	(*APICommentsMessage)(nil),                // 242: goautowp.APICommentsMessage
	(*AddCommentResponse)(nil),                // 243: goautowp.AddCommentResponse
	(*APIGetTextRequest)(nil),                 // 244: goautowp.APIGetTextRequest
	(*TextRevision)(nil),                      // 245: goautowp.TextRevision
	(*APIGetTextResponse)(nil),                // 246: goautowp.APIGetTextResponse
	(*errdetails.RetryInfo)(nil),              // 247: google.rpc.RetryInfo
	(*errdetails.DebugInfo)(nil),              // 248: google.rpc.DebugInfo
	(*errdetails.QuotaFailure)(nil),           // 249: google.rpc.QuotaFailure
	(*errdetails.PreconditionFailure)(nil),    // 250: google.rpc.PreconditionFailure
	(*errdetails.BadRequest)(nil),             // 251: google.rpc.BadRequest
	(*errdetails.RequestInfo)(nil),            // 252: google.rpc.RequestInfo
	(*errdetails.Help)(nil),                   // 253: google.rpc.Help
	(*errdetails.LocalizedMessage)(nil),       // 254: google.rpc.LocalizedMessage
	(*timestamppb.Timestamp)(nil),             // 255: google.protobuf.Timestamp
	(*latlng.LatLng)(nil),                     // 256: google.type.LatLng
	(*date.Date)(nil),                         // 257: google.type.Date
	(*emptypb.Empty)(nil),                     // 258: google.protobuf.Empty
}
var file_spec_proto_depIdxs = []int32{
	247, // 0: goautowp.ErrorDetails.retryInfo:type_name -> google.rpc.RetryInfo
	248, // 1: goautowp.ErrorDetails.debugInfo:type_name -> google.rpc.DebugInfo
	249, // 2: goautowp.ErrorDetails.quotaFailure:type_name -> google.rpc.QuotaFailure
	250, // 3: goautowp.ErrorDetails.preconditionFailure:type_name -> google.rpc.PreconditionFailure
	251, // 4: goautowp.ErrorDetails.badRequest:type_name -> google.rpc.BadRequest
	252, // 5: goautowp.ErrorDetails.requestInfo:type_name -> google.rpc.RequestInfo
	253, // 6: goautowp.ErrorDetails.help:type_name -> google.rpc.Help
	254, // 7: goautowp.ErrorDetails.localizedMessage:type_name -> google.rpc.LocalizedMessage
	17,  // 8: goautowp.AttrAttributesResponse.items:type_name -> goautowp.AttrAttribute
	6,   // 9: goautowp.AttrAttribute.type_id:type_name -> goautowp.AttrAttributeType.ID
	20,  // 10: goautowp.AttrListOptionsResponse.items:type_name -> goautowp.AttrListOption
	23,  // 11: goautowp.AttrZoneAttributesResponse.items:type_name -> goautowp.AttrZoneAttribute
	25,  // 12: goautowp.AttrAttributeTypesResponse.items:type_name -> goautowp.AttrAttributeType
	6,   // 13: goautowp.AttrAttributeType.id:type_name -> goautowp.AttrAttributeType.ID
	27,  // 14: goautowp.AttrUnitsResponse.items:type_name -> goautowp.AttrUnit
	29,  // 15: goautowp.AttrZonesResponse.items:type_name -> goautowp.AttrZone
	32,  // 16: goautowp.AttrUserValuesRequest.fields:type_name -> goautowp.AttrUserValuesFields
	39,  // 17: goautowp.AttrSetUserValuesRequest.items:type_name -> goautowp.AttrUserValue
	7,   // 18: goautowp.AttrConflictsRequest.filter:type_name -> goautowp.AttrConflictsRequest.Filter
	36,  // 19: goautowp.AttrConflict.values:type_name -> goautowp.AttrConflictValue
	37,  // 20: goautowp.AttrConflictsResponse.items:type_name -> goautowp.AttrConflict
	188, // 21: goautowp.AttrConflictsResponse.paginator:type_name -> goautowp.Pages
	43,  // 22: goautowp.AttrUserValue.value:type_name -> goautowp.AttrValueValue
	255, // 23: goautowp.AttrUserValue.update_date:type_name -> google.protobuf.Timestamp
	39,  // 24: goautowp.AttrUserValuesResponse.items:type_name -> goautowp.AttrUserValue
	44,  // 25: goautowp.AttrValuesResponse.items:type_name -> goautowp.AttrValue
	6,   // 26: goautowp.AttrValueValue.type:type_name -> goautowp.AttrAttributeType.ID
	43,  // 27: goautowp.AttrValue.value:type_name -> goautowp.AttrValueValue
	8,   // 28: goautowp.PulseRequest.period:type_name -> goautowp.PulseRequest.Period
	46,  // 29: goautowp.PulseResponse.grid:type_name -> goautowp.PulseGrid
	47,  // 30: goautowp.PulseResponse.legend:type_name -> goautowp.PulseLegend
	49,  // 31: goautowp.Spec.childs:type_name -> goautowp.Spec
	49,  // 32: goautowp.SpecsItems.items:type_name -> goautowp.Spec
	51,  // 33: goautowp.PerspectivesItems.items:type_name -> goautowp.Perspective
	51,  // 34: goautowp.PerspectiveGroup.perspectives:type_name -> goautowp.Perspective
	53,  // 35: goautowp.PerspectivePage.groups:type_name -> goautowp.PerspectiveGroup
	54,  // 36: goautowp.PerspectivePagesItems.items:type_name -> goautowp.PerspectivePage
	60,  // 37: goautowp.VehicleType.childs:type_name -> goautowp.VehicleType
	60,  // 38: goautowp.VehicleTypeItems.items:type_name -> goautowp.VehicleType
	64,  // 39: goautowp.BrandVehicleTypeItems.items:type_name -> goautowp.BrandVehicleType
	68,  // 40: goautowp.APIUser.avatar:type_name -> goautowp.APIImage
	255, // 41: goautowp.APIUser.last_online:type_name -> google.protobuf.Timestamp
	68,  // 42: goautowp.APIUser.img:type_name -> goautowp.APIImage
	68,  // 43: goautowp.APIUser.photo:type_name -> goautowp.APIImage
	255, // 44: goautowp.APIUser.reg_date:type_name -> google.protobuf.Timestamp
	69,  // 45: goautowp.Contact.user:type_name -> goautowp.APIUser
	70,  // 46: goautowp.ContactItems.items:type_name -> goautowp.Contact
	74,  // 47: goautowp.CommentVoteItems.items:type_name -> goautowp.CommentVote
	9,   // 48: goautowp.CommentVote.value:type_name -> goautowp.CommentVote.VoteValue
	69,  // 49: goautowp.CommentVote.user:type_name -> goautowp.APIUser
	255, // 50: goautowp.APIBanItem.until:type_name -> google.protobuf.Timestamp
	69,  // 51: goautowp.APIBanItem.by_user:type_name -> goautowp.APIUser
	75,  // 52: goautowp.APITrafficTopItem.ban:type_name -> goautowp.APIBanItem
	76,  // 53: goautowp.APITrafficTopResponse.items:type_name -> goautowp.APITrafficTopItem
	75,  // 54: goautowp.APIIP.blacklist:type_name -> goautowp.APIBanItem
	79,  // 55: goautowp.APIIP.rights:type_name -> goautowp.APIIPRights
	86,  // 56: goautowp.APITrafficWhitelistItems.items:type_name -> goautowp.APITrafficWhitelistItem
	93,  // 57: goautowp.APIForumsThemes.items:type_name -> goautowp.APIForumsTheme
	255, // 58: goautowp.APIForumsTopic.created_at:type_name -> google.protobuf.Timestamp
	95,  // 59: goautowp.APIForumsTopics.items:type_name -> goautowp.APIForumsTopic
	188, // 60: goautowp.APIForumsTopics.paginator:type_name -> goautowp.Pages
	255, // 61: goautowp.APICommentMessage.created_at:type_name -> google.protobuf.Timestamp
	107, // 62: goautowp.APIMeRequest.fields:type_name -> goautowp.UserFields
	107, // 63: goautowp.APIGetUserRequest.fields:type_name -> goautowp.UserFields
	108, // 64: goautowp.APIBrandSection.groups:type_name -> goautowp.APIBrandSection
	108, // 65: goautowp.APIBrandSections.sections:type_name -> goautowp.APIBrandSection
	113, // 66: goautowp.APIBrandsListCharacter.items:type_name -> goautowp.APIBrandsListItem
	10,  // 67: goautowp.APIBrandsListLine.category:type_name -> goautowp.APIBrandsListLine.Category
	114, // 68: goautowp.APIBrandsListLine.characters:type_name -> goautowp.APIBrandsListCharacter
	115, // 69: goautowp.APIBrandsList.lines:type_name -> goautowp.APIBrandsListLine
	118, // 70: goautowp.APITopBrandsList.brands:type_name -> goautowp.APITopBrandsListItem
	0,   // 71: goautowp.GetTopPersonsListRequest.picture_item_type:type_name -> goautowp.PictureItemType
	125, // 72: goautowp.APITopPersonsList.items:type_name -> goautowp.APITopPersonsListItem
	126, // 73: goautowp.APITwinsBrandsList.items:type_name -> goautowp.APITwinsBrandsListItem
	126, // 74: goautowp.APITopTwinsBrandsList.items:type_name -> goautowp.APITwinsBrandsListItem
	130, // 75: goautowp.APITopCategoriesList.items:type_name -> goautowp.APITopCategoriesListItem
	132, // 76: goautowp.APITopFactoriesList.items:type_name -> goautowp.APITopFactoriesListItem
	3,   // 77: goautowp.PicturesOptions.status:type_name -> goautowp.PictureStatus
	139, // 78: goautowp.PicturesOptions.picture_item:type_name -> goautowp.PictureItemOptions
	134, // 79: goautowp.PreviewPicturesFields.picture:type_name -> goautowp.PictureFields
	135, // 80: goautowp.ItemFields.preview_pictures:type_name -> goautowp.PreviewPicturesFields
	136, // 81: goautowp.ItemRequest.fields:type_name -> goautowp.ItemFields
	136, // 82: goautowp.ListItemsRequest.fields:type_name -> goautowp.ItemFields
	142, // 83: goautowp.ListItemsRequest.options:type_name -> goautowp.ItemListOptions
	11,  // 84: goautowp.ListItemsRequest.order:type_name -> goautowp.ListItemsRequest.Order
	0,   // 85: goautowp.PictureItemOptions.type_id:type_name -> goautowp.PictureItemType
	133, // 86: goautowp.PictureItemOptions.pictures:type_name -> goautowp.PicturesOptions
	142, // 87: goautowp.ItemParentListOptions.parent:type_name -> goautowp.ItemListOptions
	142, // 88: goautowp.ItemParentCacheListOptions.items_by_item_id:type_name -> goautowp.ItemListOptions
	139, // 89: goautowp.ItemParentCacheListOptions.picture_items_by_item_id:type_name -> goautowp.PictureItemOptions
	140, // 90: goautowp.ItemParentCacheListOptions.item_parent_by_item_id:type_name -> goautowp.ItemParentListOptions
	1,   // 91: goautowp.ItemListOptions.type_id:type_name -> goautowp.ItemType
	139, // 92: goautowp.ItemListOptions.preview_pictures:type_name -> goautowp.PictureItemOptions
	141, // 93: goautowp.ItemListOptions.descendant:type_name -> goautowp.ItemParentCacheListOptions
	141, // 94: goautowp.ItemListOptions.ancestor:type_name -> goautowp.ItemParentCacheListOptions
	140, // 95: goautowp.ItemListOptions.parent:type_name -> goautowp.ItemParentListOptions
	144, // 96: goautowp.APITreeItem.childs:type_name -> goautowp.APITreeItem
	1,   // 97: goautowp.APIItem.item_type_id:type_name -> goautowp.ItemType
	68,  // 98: goautowp.APIItem.logo120:type_name -> goautowp.APIImage
	68,  // 99: goautowp.APIItem.brandicon:type_name -> goautowp.APIImage
	256, // 100: goautowp.APIItem.location:type_name -> google.type.LatLng
	145, // 101: goautowp.APIItemList.items:type_name -> goautowp.APIItem
	188, // 102: goautowp.APIItemList.paginator:type_name -> goautowp.Pages
	4,   // 103: goautowp.CommentsSubscribeRequest.type_id:type_name -> goautowp.CommentsType
	4,   // 104: goautowp.CommentsUnSubscribeRequest.type_id:type_name -> goautowp.CommentsType
	4,   // 105: goautowp.CommentsViewRequest.type_id:type_name -> goautowp.CommentsType
	4,   // 106: goautowp.CommentsMoveCommentRequest.type_id:type_name -> goautowp.CommentsType
	157, // 107: goautowp.LogEvents.items:type_name -> goautowp.LogEvent
	188, // 108: goautowp.LogEvents.paginator:type_name -> goautowp.Pages
	255, // 109: goautowp.LogEvent.created_at:type_name -> google.protobuf.Timestamp
	160, // 110: goautowp.MapPoints.points:type_name -> goautowp.MapPoint
	256, // 111: goautowp.MapPoint.location:type_name -> google.type.LatLng
	68,  // 112: goautowp.MapPoint.image:type_name -> goautowp.APIImage
	164, // 113: goautowp.ModerVoteTemplates.items:type_name -> goautowp.ModerVoteTemplate
	0,   // 114: goautowp.SetPictureItemAreaRequest.type:type_name -> goautowp.PictureItemType
	0,   // 115: goautowp.SetPictureItemPerspectiveRequest.type:type_name -> goautowp.PictureItemType
	0,   // 116: goautowp.SetPictureItemItemIDRequest.type:type_name -> goautowp.PictureItemType
	0,   // 117: goautowp.DeletePictureItemRequest.type:type_name -> goautowp.PictureItemType
	0,   // 118: goautowp.CreatePictureItemRequest.type:type_name -> goautowp.PictureItemType
	256, // 119: goautowp.SetPicturePointRequest.point:type_name -> google.type.LatLng
	257, // 120: goautowp.UpdatePictureRequest.taken_date:type_name -> google.type.Date
	3,   // 121: goautowp.SetPictureStatusRequest.status:type_name -> goautowp.PictureStatus
	255, // 122: goautowp.APIMessage.date:type_name -> google.protobuf.Timestamp
	185, // 123: goautowp.MessagingGetMessagesResponse.items:type_name -> goautowp.APIMessage
	188, // 124: goautowp.MessagingGetMessagesResponse.paginator:type_name -> goautowp.Pages
	255, // 125: goautowp.DonationsTransaction.date:type_name -> google.protobuf.Timestamp
	189, // 126: goautowp.DonationsTransactionsResponse.items:type_name -> goautowp.DonationsTransaction
	192, // 127: goautowp.VODDataResponse.dates:type_name -> goautowp.VODDataDate
	255, // 128: goautowp.VODDataDate.date:type_name -> google.protobuf.Timestamp
	107, // 129: goautowp.APIUsersRequest.fields:type_name -> goautowp.UserFields
	69,  // 130: goautowp.APIUsersResponse.items:type_name -> goautowp.APIUser
	188, // 131: goautowp.APIUsersResponse.paginator:type_name -> goautowp.Pages
	200, // 132: goautowp.APIUsersRatingResponse.users:type_name -> goautowp.APIUsersRatingUser
	198, // 133: goautowp.UserRatingBrandsResponse.brands:type_name -> goautowp.APIUsersRatingUserBrand
	199, // 134: goautowp.GetUserRatingFansResponse.fans:type_name -> goautowp.APIUsersRatingUserFan
	207, // 135: goautowp.ArticlesResponse.items:type_name -> goautowp.Article
	188, // 136: goautowp.ArticlesResponse.paginator:type_name -> goautowp.Pages
	255, // 137: goautowp.Article.date:type_name -> google.protobuf.Timestamp
	213, // 138: goautowp.APIItemLinksResponse.items:type_name -> goautowp.APIItemLink
	216, // 139: goautowp.APIGetItemVehicleTypesResponse.items:type_name -> goautowp.APIItemVehicleType
	221, // 140: goautowp.ItemLanguages.items:type_name -> goautowp.ItemLanguage
	224, // 141: goautowp.ItemParentLanguages.items:type_name -> goautowp.ItemParentLanguage
	226, // 142: goautowp.StatsResponse.values:type_name -> goautowp.StatsValue
	145, // 143: goautowp.NewItemsResponse.brand:type_name -> goautowp.APIItem
	145, // 144: goautowp.NewItemsResponse.items:type_name -> goautowp.APIItem
	2,   // 145: goautowp.ItemParent.type:type_name -> goautowp.ItemParentType
	4,   // 146: goautowp.AddCommentRequest.type_id:type_name -> goautowp.CommentsType
	237, // 147: goautowp.GetMessageRequest.fields:type_name -> goautowp.CommentMessageFields
	237, // 148: goautowp.GetMessagesRequest.fields:type_name -> goautowp.CommentMessageFields
	4,   // 149: goautowp.GetMessagesRequest.type_id:type_name -> goautowp.CommentsType
	12,  // 150: goautowp.GetMessagesRequest.order:type_name -> goautowp.GetMessagesRequest.Order
	5,   // 151: goautowp.GetMessagesRequest.moderator_attention:type_name -> goautowp.ModeratorAttention
	4,   // 152: goautowp.APICommentsMessagePage.type_id:type_name -> goautowp.CommentsType
	242, // 153: goautowp.APICommentsMessages.items:type_name -> goautowp.APICommentsMessage
	188, // 154: goautowp.APICommentsMessages.paginator:type_name -> goautowp.Pages
	4,   // 155: goautowp.APICommentsMessage.type_id:type_name -> goautowp.CommentsType
	255, // 156: goautowp.APICommentsMessage.created_at:type_name -> google.protobuf.Timestamp
	5,   // 157: goautowp.APICommentsMessage.moderator_attention:type_name -> goautowp.ModeratorAttention
	242, // 158: goautowp.APICommentsMessage.replies:type_name -> goautowp.APICommentsMessage
	3,   // 159: goautowp.APICommentsMessage.picture_status:type_name -> goautowp.PictureStatus
	245, // 160: goautowp.APIGetTextResponse.current:type_name -> goautowp.TextRevision
	245, // 161: goautowp.APIGetTextResponse.prev:type_name -> goautowp.TextRevision
	245, // 162: goautowp.APIGetTextResponse.next:type_name -> goautowp.TextRevision
	58,  // 163: goautowp.Autowp.AclEnforce:input_type -> goautowp.AclEnforceRequest
	81,  // 164: goautowp.Autowp.CreateFeedback:input_type -> goautowp.APICreateFeedbackRequest
	258, // 165: goautowp.Autowp.GetBrandIcons:input_type -> google.protobuf.Empty
	62,  // 166: goautowp.Autowp.GetBrandVehicleTypes:input_type -> goautowp.GetBrandVehicleTypesRequest
	78,  // 167: goautowp.Autowp.GetIP:input_type -> goautowp.APIGetIPRequest
	258, // 168: goautowp.Autowp.GetPerspectives:input_type -> google.protobuf.Empty
	258, // 169: goautowp.Autowp.GetPerspectivePages:input_type -> google.protobuf.Empty
	258, // 170: goautowp.Autowp.GetReCaptchaConfig:input_type -> google.protobuf.Empty
	258, // 171: goautowp.Autowp.GetSpecs:input_type -> google.protobuf.Empty
	258, // 172: goautowp.Autowp.GetVehicleTypes:input_type -> google.protobuf.Empty
	258, // 173: goautowp.Forums.GetUserSummary:input_type -> google.protobuf.Empty
	98,  // 174: goautowp.Forums.CreateTopic:input_type -> goautowp.APICreateTopicRequest
	100, // 175: goautowp.Forums.CloseTopic:input_type -> goautowp.APISetTopicStatusRequest
	100, // 176: goautowp.Forums.OpenTopic:input_type -> goautowp.APISetTopicStatusRequest
	100, // 177: goautowp.Forums.DeleteTopic:input_type -> goautowp.APISetTopicStatusRequest
	101, // 178: goautowp.Forums.MoveTopic:input_type -> goautowp.APIMoveTopicRequest
	89,  // 179: goautowp.Forums.GetTheme:input_type -> goautowp.APIGetForumsThemeRequest
	92,  // 180: goautowp.Forums.GetThemes:input_type -> goautowp.APIGetForumsThemesRequest
	91,  // 181: goautowp.Forums.GetTopic:input_type -> goautowp.APIGetForumsTopicRequest
	89,  // 182: goautowp.Forums.GetLastTopic:input_type -> goautowp.APIGetForumsThemeRequest
	91,  // 183: goautowp.Forums.GetLastMessage:input_type -> goautowp.APIGetForumsTopicRequest
	90,  // 184: goautowp.Forums.GetTopics:input_type -> goautowp.APIGetForumsTopicsRequest
	205, // 185: goautowp.Articles.GetList:input_type -> goautowp.ArticlesRequest
	208, // 186: goautowp.Articles.GetItemByCatname:input_type -> goautowp.ArticleByCatnameRequest
	84,  // 187: goautowp.Traffic.AddToBlacklist:input_type -> goautowp.AddToTrafficBlacklistRequest
	85,  // 188: goautowp.Traffic.AddToWhitelist:input_type -> goautowp.AddToTrafficWhitelistRequest
	83,  // 189: goautowp.Traffic.DeleteFromBlacklist:input_type -> goautowp.DeleteFromTrafficBlacklistRequest
	82,  // 190: goautowp.Traffic.DeleteFromWhitelist:input_type -> goautowp.DeleteFromTrafficWhitelistRequest
	258, // 191: goautowp.Traffic.GetTop:input_type -> google.protobuf.Empty
	258, // 192: goautowp.Traffic.GetWhitelist:input_type -> google.protobuf.Empty
	65,  // 193: goautowp.Contacts.CreateContact:input_type -> goautowp.CreateContactRequest
	66,  // 194: goautowp.Contacts.DeleteContact:input_type -> goautowp.DeleteContactRequest
	67,  // 195: goautowp.Contacts.GetContact:input_type -> goautowp.GetContactRequest
	72,  // 196: goautowp.Contacts.GetContacts:input_type -> goautowp.GetContactsRequest
	104, // 197: goautowp.Users.DeleteUser:input_type -> goautowp.APIDeleteUserRequest
	106, // 198: goautowp.Users.GetUser:input_type -> goautowp.APIGetUserRequest
	105, // 199: goautowp.Users.Me:input_type -> goautowp.APIMeRequest
	194, // 200: goautowp.Users.GetUserPreferences:input_type -> goautowp.APIUserPreferencesRequest
	194, // 201: goautowp.Users.DisableUserCommentsNotifications:input_type -> goautowp.APIUserPreferencesRequest
	194, // 202: goautowp.Users.EnableUserCommentsNotifications:input_type -> goautowp.APIUserPreferencesRequest
	196, // 203: goautowp.Users.GetUsers:input_type -> goautowp.APIUsersRequest
	258, // 204: goautowp.Rating.GetUserPicturesRating:input_type -> google.protobuf.Empty
	202, // 205: goautowp.Rating.GetUserPicturesRatingBrands:input_type -> goautowp.UserRatingDetailsRequest
	258, // 206: goautowp.Rating.GetUserCommentsRating:input_type -> google.protobuf.Empty
	202, // 207: goautowp.Rating.GetUserCommentsRatingFans:input_type -> goautowp.UserRatingDetailsRequest
	258, // 208: goautowp.Rating.GetUserPictureLikesRating:input_type -> google.protobuf.Empty
	202, // 209: goautowp.Rating.GetUserPictureLikesRatingFans:input_type -> goautowp.UserRatingDetailsRequest
	258, // 210: goautowp.Rating.GetUserSpecsRating:input_type -> google.protobuf.Empty
	202, // 211: goautowp.Rating.GetUserSpecsRatingBrands:input_type -> goautowp.UserRatingDetailsRequest
	112, // 212: goautowp.Items.GetBrands:input_type -> goautowp.GetBrandsRequest
	110, // 213: goautowp.Items.GetBrandSections:input_type -> goautowp.GetBrandSectionsRequest
	111, // 214: goautowp.Items.GetTopBrandsList:input_type -> goautowp.GetTopBrandsListRequest
	119, // 215: goautowp.Items.GetTopPersonsList:input_type -> goautowp.GetTopPersonsListRequest
	123, // 216: goautowp.Items.GetTopFactoriesList:input_type -> goautowp.GetTopFactoriesListRequest
	122, // 217: goautowp.Items.GetTopCategoriesList:input_type -> goautowp.GetTopCategoriesListRequest
	120, // 218: goautowp.Items.GetTwinsBrandsList:input_type -> goautowp.GetTwinsBrandsListRequest
	121, // 219: goautowp.Items.GetTopTwinsBrandsList:input_type -> goautowp.GetTopTwinsBrandsListRequest
	137, // 220: goautowp.Items.Item:input_type -> goautowp.ItemRequest
	138, // 221: goautowp.Items.List:input_type -> goautowp.ListItemsRequest
	143, // 222: goautowp.Items.GetTree:input_type -> goautowp.GetTreeRequest
	258, // 223: goautowp.Items.GetContentLanguages:input_type -> google.protobuf.Empty
	210, // 224: goautowp.Items.GetItemLink:input_type -> goautowp.APIItemLinkRequest
	211, // 225: goautowp.Items.GetItemLinks:input_type -> goautowp.APIGetItemLinksRequest
	210, // 226: goautowp.Items.DeleteItemLink:input_type -> goautowp.APIItemLinkRequest
	213, // 227: goautowp.Items.CreateItemLink:input_type -> goautowp.APIItemLink
	213, // 228: goautowp.Items.UpdateItemLink:input_type -> goautowp.APIItemLink
	215, // 229: goautowp.Items.GetItemVehicleTypes:input_type -> goautowp.APIGetItemVehicleTypesRequest
	218, // 230: goautowp.Items.GetItemVehicleType:input_type -> goautowp.APIItemVehicleTypeRequest
	216, // 231: goautowp.Items.CreateItemVehicleType:input_type -> goautowp.APIItemVehicleType
	218, // 232: goautowp.Items.DeleteItemVehicleType:input_type -> goautowp.APIItemVehicleTypeRequest
	219, // 233: goautowp.Items.GetItemLanguages:input_type -> goautowp.APIGetItemLanguagesRequest
	221, // 234: goautowp.Items.UpdateItemLanguage:input_type -> goautowp.ItemLanguage
	222, // 235: goautowp.Items.GetItemParentLanguages:input_type -> goautowp.APIGetItemParentLanguagesRequest
	224, // 236: goautowp.Items.SetItemParentLanguage:input_type -> goautowp.ItemParentLanguage
	258, // 237: goautowp.Items.GetStats:input_type -> google.protobuf.Empty
	227, // 238: goautowp.Items.GetBrandNewItems:input_type -> goautowp.NewItemsRequest
	227, // 239: goautowp.Items.GetNewItems:input_type -> goautowp.NewItemsRequest
	229, // 240: goautowp.Items.CreateItemParent:input_type -> goautowp.ItemParent
	229, // 241: goautowp.Items.UpdateItemParent:input_type -> goautowp.ItemParent
	230, // 242: goautowp.Items.DeleteItemParent:input_type -> goautowp.DeleteItemParentRequest
	231, // 243: goautowp.Items.MoveItemParent:input_type -> goautowp.MoveItemParentRequest
	232, // 244: goautowp.Items.RefreshInheritance:input_type -> goautowp.RefreshInheritanceRequest
	233, // 245: goautowp.Items.SetUserItemSubscription:input_type -> goautowp.SetUserItemSubscriptionRequest
	234, // 246: goautowp.Items.SetItemEngine:input_type -> goautowp.SetItemEngineRequest
	149, // 247: goautowp.Comments.GetCommentVotes:input_type -> goautowp.GetCommentVotesRequest
	147, // 248: goautowp.Comments.Subscribe:input_type -> goautowp.CommentsSubscribeRequest
	148, // 249: goautowp.Comments.UnSubscribe:input_type -> goautowp.CommentsUnSubscribeRequest
	150, // 250: goautowp.Comments.View:input_type -> goautowp.CommentsViewRequest
	151, // 251: goautowp.Comments.SetDeleted:input_type -> goautowp.CommentsSetDeletedRequest
	152, // 252: goautowp.Comments.MoveComment:input_type -> goautowp.CommentsMoveCommentRequest
	153, // 253: goautowp.Comments.VoteComment:input_type -> goautowp.CommentsVoteCommentRequest
	235, // 254: goautowp.Comments.Add:input_type -> goautowp.AddCommentRequest
	236, // 255: goautowp.Comments.GetMessagePage:input_type -> goautowp.GetMessagePageRequest
	238, // 256: goautowp.Comments.GetMessage:input_type -> goautowp.GetMessageRequest
	239, // 257: goautowp.Comments.GetMessages:input_type -> goautowp.GetMessagesRequest
	155, // 258: goautowp.Log.GetEvents:input_type -> goautowp.LogEventsRequest
	158, // 259: goautowp.Map.GetPoints:input_type -> goautowp.MapGetPointsRequest
	161, // 260: goautowp.Pictures.View:input_type -> goautowp.PicturesViewRequest
	162, // 261: goautowp.Pictures.Vote:input_type -> goautowp.PicturesVoteRequest
	164, // 262: goautowp.Pictures.CreateModerVoteTemplate:input_type -> goautowp.ModerVoteTemplate
	166, // 263: goautowp.Pictures.DeleteModerVoteTemplate:input_type -> goautowp.DeleteModerVoteTemplateRequest
	258, // 264: goautowp.Pictures.GetModerVoteTemplates:input_type -> google.protobuf.Empty
	181, // 265: goautowp.Pictures.DeleteModerVote:input_type -> goautowp.DeleteModerVoteRequest
	167, // 266: goautowp.Pictures.UpdateModerVote:input_type -> goautowp.UpdateModerVoteRequest
	258, // 267: goautowp.Pictures.GetUserSummary:input_type -> google.protobuf.Empty
	169, // 268: goautowp.Pictures.Normalize:input_type -> goautowp.PictureIDRequest
	169, // 269: goautowp.Pictures.Flop:input_type -> goautowp.PictureIDRequest
	180, // 270: goautowp.Pictures.DeleteSimilar:input_type -> goautowp.DeleteSimilarRequest
	169, // 271: goautowp.Pictures.Repair:input_type -> goautowp.PictureIDRequest
	170, // 272: goautowp.Pictures.SetPictureItemArea:input_type -> goautowp.SetPictureItemAreaRequest
	171, // 273: goautowp.Pictures.SetPictureItemPerspective:input_type -> goautowp.SetPictureItemPerspectiveRequest
	172, // 274: goautowp.Pictures.SetPictureItemItemID:input_type -> goautowp.SetPictureItemItemIDRequest
	173, // 275: goautowp.Pictures.DeletePictureItem:input_type -> goautowp.DeletePictureItemRequest
	174, // 276: goautowp.Pictures.CreatePictureItem:input_type -> goautowp.CreatePictureItemRequest
	175, // 277: goautowp.Pictures.SetPictureCrop:input_type -> goautowp.SetPictureCropRequest
	169, // 278: goautowp.Pictures.ClearReplacePicture:input_type -> goautowp.PictureIDRequest
	169, // 279: goautowp.Pictures.AcceptReplacePicture:input_type -> goautowp.PictureIDRequest
	176, // 280: goautowp.Pictures.SetPicturePoint:input_type -> goautowp.SetPicturePointRequest
	177, // 281: goautowp.Pictures.UpdatePicture:input_type -> goautowp.UpdatePictureRequest
	178, // 282: goautowp.Pictures.SetPictureCopyrights:input_type -> goautowp.SetPictureCopyrightsRequest
	179, // 283: goautowp.Pictures.SetPictureStatus:input_type -> goautowp.SetPictureStatusRequest
	258, // 284: goautowp.Messaging.GetMessagesNewCount:input_type -> google.protobuf.Empty
	258, // 285: goautowp.Messaging.GetMessagesSummary:input_type -> google.protobuf.Empty
	182, // 286: goautowp.Messaging.DeleteMessage:input_type -> goautowp.MessagingDeleteMessage
	183, // 287: goautowp.Messaging.ClearFolder:input_type -> goautowp.MessagingClearFolder
	184, // 288: goautowp.Messaging.CreateMessage:input_type -> goautowp.MessagingCreateMessage
	186, // 289: goautowp.Messaging.GetMessages:input_type -> goautowp.MessagingGetMessagesRequest
	45,  // 290: goautowp.Statistics.GetPulse:input_type -> goautowp.PulseRequest
	258, // 291: goautowp.Statistics.GetAboutData:input_type -> google.protobuf.Empty
	258, // 292: goautowp.Donations.GetVODData:input_type -> google.protobuf.Empty
	258, // 293: goautowp.Donations.GetTransactions:input_type -> google.protobuf.Empty
	244, // 294: goautowp.Text.GetText:input_type -> goautowp.APIGetTextRequest
	14,  // 295: goautowp.Attrs.GetAttribute:input_type -> goautowp.AttrAttributeID
	15,  // 296: goautowp.Attrs.GetAttributes:input_type -> goautowp.AttrAttributesRequest
	258, // 297: goautowp.Attrs.GetAttributeTypes:input_type -> google.protobuf.Empty
	18,  // 298: goautowp.Attrs.GetListOptions:input_type -> goautowp.AttrListOptionsRequest
	258, // 299: goautowp.Attrs.GetUnits:input_type -> google.protobuf.Empty
	21,  // 300: goautowp.Attrs.GetZoneAttributes:input_type -> goautowp.AttrZoneAttributesRequest
	258, // 301: goautowp.Attrs.GetZones:input_type -> google.protobuf.Empty
	41,  // 302: goautowp.Attrs.GetValues:input_type -> goautowp.AttrValuesRequest
	33,  // 303: goautowp.Attrs.GetUserValues:input_type -> goautowp.AttrUserValuesRequest
	34,  // 304: goautowp.Attrs.SetUserValues:input_type -> goautowp.AttrSetUserValuesRequest
	31,  // 305: goautowp.Attrs.DeleteUserValues:input_type -> goautowp.DeleteAttrUserValuesRequest
	30,  // 306: goautowp.Attrs.MoveUserValues:input_type -> goautowp.MoveAttrUserValuesRequest
	35,  // 307: goautowp.Attrs.GetConflicts:input_type -> goautowp.AttrConflictsRequest
	59,  // 308: goautowp.Autowp.AclEnforce:output_type -> goautowp.AclEnforceResult
	258, // 309: goautowp.Autowp.CreateFeedback:output_type -> google.protobuf.Empty
	57,  // 310: goautowp.Autowp.GetBrandIcons:output_type -> goautowp.BrandIcons
	63,  // 311: goautowp.Autowp.GetBrandVehicleTypes:output_type -> goautowp.BrandVehicleTypeItems
	80,  // 312: goautowp.Autowp.GetIP:output_type -> goautowp.APIIP
	52,  // 313: goautowp.Autowp.GetPerspectives:output_type -> goautowp.PerspectivesItems
	55,  // 314: goautowp.Autowp.GetPerspectivePages:output_type -> goautowp.PerspectivePagesItems
	56,  // 315: goautowp.Autowp.GetReCaptchaConfig:output_type -> goautowp.ReCaptchaConfig
	50,  // 316: goautowp.Autowp.GetSpecs:output_type -> goautowp.SpecsItems
	61,  // 317: goautowp.Autowp.GetVehicleTypes:output_type -> goautowp.VehicleTypeItems
	88,  // 318: goautowp.Forums.GetUserSummary:output_type -> goautowp.APIForumsUserSummary
	99,  // 319: goautowp.Forums.CreateTopic:output_type -> goautowp.APICreateTopicResponse
	258, // 320: goautowp.Forums.CloseTopic:output_type -> google.protobuf.Empty
	258, // 321: goautowp.Forums.OpenTopic:output_type -> google.protobuf.Empty
	258, // 322: goautowp.Forums.DeleteTopic:output_type -> google.protobuf.Empty
	258, // 323: goautowp.Forums.MoveTopic:output_type -> google.protobuf.Empty
	93,  // 324: goautowp.Forums.GetTheme:output_type -> goautowp.APIForumsTheme
	94,  // 325: goautowp.Forums.GetThemes:output_type -> goautowp.APIForumsThemes
	95,  // 326: goautowp.Forums.GetTopic:output_type -> goautowp.APIForumsTopic
	95,  // 327: goautowp.Forums.GetLastTopic:output_type -> goautowp.APIForumsTopic
	97,  // 328: goautowp.Forums.GetLastMessage:output_type -> goautowp.APICommentMessage
	96,  // 329: goautowp.Forums.GetTopics:output_type -> goautowp.APIForumsTopics
	206, // 330: goautowp.Articles.GetList:output_type -> goautowp.ArticlesResponse
	207, // 331: goautowp.Articles.GetItemByCatname:output_type -> goautowp.Article
	258, // 332: goautowp.Traffic.AddToBlacklist:output_type -> google.protobuf.Empty
	258, // 333: goautowp.Traffic.AddToWhitelist:output_type -> google.protobuf.Empty
	258, // 334: goautowp.Traffic.DeleteFromBlacklist:output_type -> google.protobuf.Empty
	258, // 335: goautowp.Traffic.DeleteFromWhitelist:output_type -> google.protobuf.Empty
	77,  // 336: goautowp.Traffic.GetTop:output_type -> goautowp.APITrafficTopResponse
	87,  // 337: goautowp.Traffic.GetWhitelist:output_type -> goautowp.APITrafficWhitelistItems
	258, // 338: goautowp.Contacts.CreateContact:output_type -> google.protobuf.Empty
	258, // 339: goautowp.Contacts.DeleteContact:output_type -> google.protobuf.Empty
	70,  // 340: goautowp.Contacts.GetContact:output_type -> goautowp.Contact
	71,  // 341: goautowp.Contacts.GetContacts:output_type -> goautowp.ContactItems
	258, // 342: goautowp.Users.DeleteUser:output_type -> google.protobuf.Empty
	69,  // 343: goautowp.Users.GetUser:output_type -> goautowp.APIUser
	69,  // 344: goautowp.Users.Me:output_type -> goautowp.APIUser
	195, // 345: goautowp.Users.GetUserPreferences:output_type -> goautowp.APIUserPreferencesResponse
	258, // 346: goautowp.Users.DisableUserCommentsNotifications:output_type -> google.protobuf.Empty
	258, // 347: goautowp.Users.EnableUserCommentsNotifications:output_type -> google.protobuf.Empty
	197, // 348: goautowp.Users.GetUsers:output_type -> goautowp.APIUsersResponse
	201, // 349: goautowp.Rating.GetUserPicturesRating:output_type -> goautowp.APIUsersRatingResponse
	203, // 350: goautowp.Rating.GetUserPicturesRatingBrands:output_type -> goautowp.UserRatingBrandsResponse
	201, // 351: goautowp.Rating.GetUserCommentsRating:output_type -> goautowp.APIUsersRatingResponse
	204, // 352: goautowp.Rating.GetUserCommentsRatingFans:output_type -> goautowp.GetUserRatingFansResponse
	201, // 353: goautowp.Rating.GetUserPictureLikesRating:output_type -> goautowp.APIUsersRatingResponse
	204, // 354: goautowp.Rating.GetUserPictureLikesRatingFans:output_type -> goautowp.GetUserRatingFansResponse
	201, // 355: goautowp.Rating.GetUserSpecsRating:output_type -> goautowp.APIUsersRatingResponse
	203, // 356: goautowp.Rating.GetUserSpecsRatingBrands:output_type -> goautowp.UserRatingBrandsResponse
	116, // 357: goautowp.Items.GetBrands:output_type -> goautowp.APIBrandsList
	109, // 358: goautowp.Items.GetBrandSections:output_type -> goautowp.APIBrandSections
	117, // 359: goautowp.Items.GetTopBrandsList:output_type -> goautowp.APITopBrandsList
	124, // 360: goautowp.Items.GetTopPersonsList:output_type -> goautowp.APITopPersonsList
	131, // 361: goautowp.Items.GetTopFactoriesList:output_type -> goautowp.APITopFactoriesList
	129, // 362: goautowp.Items.GetTopCategoriesList:output_type -> goautowp.APITopCategoriesList
	127, // 363: goautowp.Items.GetTwinsBrandsList:output_type -> goautowp.APITwinsBrandsList
	128, // 364: goautowp.Items.GetTopTwinsBrandsList:output_type -> goautowp.APITopTwinsBrandsList
	145, // 365: goautowp.Items.Item:output_type -> goautowp.APIItem
	146, // 366: goautowp.Items.List:output_type -> goautowp.APIItemList
	144, // 367: goautowp.Items.GetTree:output_type -> goautowp.APITreeItem
	209, // 368: goautowp.Items.GetContentLanguages:output_type -> goautowp.APIContentLanguages
	213, // 369: goautowp.Items.GetItemLink:output_type -> goautowp.APIItemLink
	212, // 370: goautowp.Items.GetItemLinks:output_type -> goautowp.APIItemLinksResponse
	258, // 371: goautowp.Items.DeleteItemLink:output_type -> google.protobuf.Empty
	214, // 372: goautowp.Items.CreateItemLink:output_type -> goautowp.APICreateItemLinkResponse
	258, // 373: goautowp.Items.UpdateItemLink:output_type -> google.protobuf.Empty
	217, // 374: goautowp.Items.GetItemVehicleTypes:output_type -> goautowp.APIGetItemVehicleTypesResponse
	216, // 375: goautowp.Items.GetItemVehicleType:output_type -> goautowp.APIItemVehicleType
	258, // 376: goautowp.Items.CreateItemVehicleType:output_type -> google.protobuf.Empty
	258, // 377: goautowp.Items.DeleteItemVehicleType:output_type -> google.protobuf.Empty
	220, // 378: goautowp.Items.GetItemLanguages:output_type -> goautowp.ItemLanguages
	258, // 379: goautowp.Items.UpdateItemLanguage:output_type -> google.protobuf.Empty
	223, // 380: goautowp.Items.GetItemParentLanguages:output_type -> goautowp.ItemParentLanguages
	258, // 381: goautowp.Items.SetItemParentLanguage:output_type -> google.protobuf.Empty
	225, // 382: goautowp.Items.GetStats:output_type -> goautowp.StatsResponse
	228, // 383: goautowp.Items.GetBrandNewItems:output_type -> goautowp.NewItemsResponse
	228, // 384: goautowp.Items.GetNewItems:output_type -> goautowp.NewItemsResponse
	258, // 385: goautowp.Items.CreateItemParent:output_type -> google.protobuf.Empty
	258, // 386: goautowp.Items.UpdateItemParent:output_type -> google.protobuf.Empty
	258, // 387: goautowp.Items.DeleteItemParent:output_type -> google.protobuf.Empty
	258, // 388: goautowp.Items.MoveItemParent:output_type -> google.protobuf.Empty
	258, // 389: goautowp.Items.RefreshInheritance:output_type -> google.protobuf.Empty
	258, // 390: goautowp.Items.SetUserItemSubscription:output_type -> google.protobuf.Empty
	258, // 391: goautowp.Items.SetItemEngine:output_type -> google.protobuf.Empty
	73,  // 392: goautowp.Comments.GetCommentVotes:output_type -> goautowp.CommentVoteItems
	258, // 393: goautowp.Comments.Subscribe:output_type -> google.protobuf.Empty
	258, // 394: goautowp.Comments.UnSubscribe:output_type -> google.protobuf.Empty
	258, // 395: goautowp.Comments.View:output_type -> google.protobuf.Empty
	258, // 396: goautowp.Comments.SetDeleted:output_type -> google.protobuf.Empty
	258, // 397: goautowp.Comments.MoveComment:output_type -> google.protobuf.Empty
	154, // 398: goautowp.Comments.VoteComment:output_type -> goautowp.CommentsVoteCommentResponse
	243, // 399: goautowp.Comments.Add:output_type -> goautowp.AddCommentResponse
	240, // 400: goautowp.Comments.GetMessagePage:output_type -> goautowp.APICommentsMessagePage
	242, // 401: goautowp.Comments.GetMessage:output_type -> goautowp.APICommentsMessage
	241, // 402: goautowp.Comments.GetMessages:output_type -> goautowp.APICommentsMessages
	156, // 403: goautowp.Log.GetEvents:output_type -> goautowp.LogEvents
	159, // 404: goautowp.Map.GetPoints:output_type -> goautowp.MapPoints
	258, // 405: goautowp.Pictures.View:output_type -> google.protobuf.Empty
	163, // 406: goautowp.Pictures.Vote:output_type -> goautowp.PicturesVoteSummary
	164, // 407: goautowp.Pictures.CreateModerVoteTemplate:output_type -> goautowp.ModerVoteTemplate
	258, // 408: goautowp.Pictures.DeleteModerVoteTemplate:output_type -> google.protobuf.Empty
	165, // 409: goautowp.Pictures.GetModerVoteTemplates:output_type -> goautowp.ModerVoteTemplates
	258, // 410: goautowp.Pictures.DeleteModerVote:output_type -> google.protobuf.Empty
	258, // 411: goautowp.Pictures.UpdateModerVote:output_type -> google.protobuf.Empty
	168, // 412: goautowp.Pictures.GetUserSummary:output_type -> goautowp.PicturesUserSummary
	258, // 413: goautowp.Pictures.Normalize:output_type -> google.protobuf.Empty
	258, // 414: goautowp.Pictures.Flop:output_type -> google.protobuf.Empty
	258, // 415: goautowp.Pictures.DeleteSimilar:output_type -> google.protobuf.Empty
	258, // 416: goautowp.Pictures.Repair:output_type -> google.protobuf.Empty
	258, // 417: goautowp.Pictures.SetPictureItemArea:output_type -> google.protobuf.Empty
	258, // 418: goautowp.Pictures.SetPictureItemPerspective:output_type -> google.protobuf.Empty
	258, // 419: goautowp.Pictures.SetPictureItemItemID:output_type -> google.protobuf.Empty
	258, // 420: goautowp.Pictures.DeletePictureItem:output_type -> google.protobuf.Empty
	258, // 421: goautowp.Pictures.CreatePictureItem:output_type -> google.protobuf.Empty
	258, // 422: goautowp.Pictures.SetPictureCrop:output_type -> google.protobuf.Empty
	258, // 423: goautowp.Pictures.ClearReplacePicture:output_type -> google.protobuf.Empty
	258, // 424: goautowp.Pictures.AcceptReplacePicture:output_type -> google.protobuf.Empty
	258, // 425: goautowp.Pictures.SetPicturePoint:output_type -> google.protobuf.Empty
	258, // 426: goautowp.Pictures.UpdatePicture:output_type -> google.protobuf.Empty
	258, // 427: goautowp.Pictures.SetPictureCopyrights:output_type -> google.protobuf.Empty
	258, // 428: goautowp.Pictures.SetPictureStatus:output_type -> google.protobuf.Empty
	102, // 429: goautowp.Messaging.GetMessagesNewCount:output_type -> goautowp.APIMessageNewCount
	103, // 430: goautowp.Messaging.GetMessagesSummary:output_type -> goautowp.APIMessageSummary
	258, // 431: goautowp.Messaging.DeleteMessage:output_type -> google.protobuf.Empty
	258, // 432: goautowp.Messaging.ClearFolder:output_type -> google.protobuf.Empty
	258, // 433: goautowp.Messaging.CreateMessage:output_type -> google.protobuf.Empty
	187, // 434: goautowp.Messaging.GetMessages:output_type -> goautowp.MessagingGetMessagesResponse
	48,  // 435: goautowp.Statistics.GetPulse:output_type -> goautowp.PulseResponse
	193, // 436: goautowp.Statistics.GetAboutData:output_type -> goautowp.AboutDataResponse
	191, // 437: goautowp.Donations.GetVODData:output_type -> goautowp.VODDataResponse
	190, // 438: goautowp.Donations.GetTransactions:output_type -> goautowp.DonationsTransactionsResponse
	246, // 439: goautowp.Text.GetText:output_type -> goautowp.APIGetTextResponse
	17,  // 440: goautowp.Attrs.GetAttribute:output_type -> goautowp.AttrAttribute
	16,  // 441: goautowp.Attrs.GetAttributes:output_type -> goautowp.AttrAttributesResponse
	24,  // 442: goautowp.Attrs.GetAttributeTypes:output_type -> goautowp.AttrAttributeTypesResponse
	19,  // 443: goautowp.Attrs.GetListOptions:output_type -> goautowp.AttrListOptionsResponse
	26,  // 444: goautowp.Attrs.GetUnits:output_type -> goautowp.AttrUnitsResponse
	22,  // 445: goautowp.Attrs.GetZoneAttributes:output_type -> goautowp.AttrZoneAttributesResponse
	28,  // 446: goautowp.Attrs.GetZones:output_type -> goautowp.AttrZonesResponse
	42,  // 447: goautowp.Attrs.GetValues:output_type -> goautowp.AttrValuesResponse
	40,  // 448: goautowp.Attrs.GetUserValues:output_type -> goautowp.AttrUserValuesResponse
	258, // 449: goautowp.Attrs.SetUserValues:output_type -> google.protobuf.Empty
	258, // 450: goautowp.Attrs.DeleteUserValues:output_type -> google.protobuf.Empty
	258, // 451: goautowp.Attrs.MoveUserValues:output_type -> google.protobuf.Empty
	38,  // 452: goautowp.Attrs.GetConflicts:output_type -> goautowp.AttrConflictsResponse
	308, // [308:453] is the sub-list for method output_type
	163, // [163:308] is the sub-list for method input_type
	163, // [163:163] is the sub-list for extension type_name
	163, // [163:163] is the sub-list for extension extendee
	0,   // [0:163] is the sub-list for field type_name
}

func init() { file_spec_proto_init() }
func file_spec_proto_init() {
	if File_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spec_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   234,
			NumExtensions: 0,
			NumServices:   17,
		},
		GoTypes:           file_spec_proto_goTypes,
		DependencyIndexes: file_spec_proto_depIdxs,
		EnumInfos:         file_spec_proto_enumTypes,
		MessageInfos:      file_spec_proto_msgTypes,
	}.Build()
	File_spec_proto = out.File
	file_spec_proto_rawDesc = nil
	file_spec_proto_goTypes = nil
	file_spec_proto_depIdxs = nil
}
